
am2320.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000611c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  080062c0  080062c0  000162c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006714  08006714  00016714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800671c  0800671c  0001671c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006720  08006720  00016720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08006724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000d0  200001dc  08006900  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002ac  08006900  000202ac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e3bf  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002491  00000000  00000000  0002e5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00006ba1  00000000  00000000  00030a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000820  00000000  00000000  00037600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000d30  00000000  00000000  00037e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000167f0  00000000  00000000  00038b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000eeac  00000000  00000000  0004f340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00087c7c  00000000  00000000  0005e1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000e5e68  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002910  00000000  00000000  000e5ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080062a4 	.word	0x080062a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080062a4 	.word	0x080062a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <HAL_InitTick+0x3c>)
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_InitTick+0x40>)
{
 8000eb6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	7818      	ldrb	r0, [r3, #0]
 8000eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebe:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ec2:	6810      	ldr	r0, [r2, #0]
 8000ec4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec8:	f000 f8a8 	bl	800101c <HAL_SYSTICK_Config>
 8000ecc:	4604      	mov	r4, r0
 8000ece:	b958      	cbnz	r0, 8000ee8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed0:	2d0f      	cmp	r5, #15
 8000ed2:	d809      	bhi.n	8000ee8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f85e 	bl	8000f9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <HAL_InitTick+0x44>)
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ee6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ee8:	2001      	movs	r0, #1
 8000eea:	e7fc      	b.n	8000ee6 <HAL_InitTick+0x36>
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_Init>:
{
 8000ef8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_Init+0x30>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f02:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f0a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f12:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 f82f 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff ffc8 	bl	8000eb0 <HAL_InitTick>
  HAL_MspInit();
 8000f20:	f002 f996 	bl	8003250 <HAL_MspInit>
}
 8000f24:	2000      	movs	r0, #0
 8000f26:	bd08      	pop	{r3, pc}
 8000f28:	40023c00 	.word	0x40023c00

08000f2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f2c:	4a03      	ldr	r2, [pc, #12]	; (8000f3c <HAL_IncTick+0x10>)
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <HAL_IncTick+0x14>)
 8000f30:	6811      	ldr	r1, [r2, #0]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	440b      	add	r3, r1
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000204 	.word	0x20000204
 8000f40:	20000000 	.word	0x20000000

08000f44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f44:	4b01      	ldr	r3, [pc, #4]	; (8000f4c <HAL_GetTick+0x8>)
 8000f46:	6818      	ldr	r0, [r3, #0]
}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000204 	.word	0x20000204

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b538      	push	{r3, r4, r5, lr}
 8000f52:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff fff6 	bl	8000f44 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f58:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5a:	bf1c      	itt	ne
 8000f5c:	4b05      	ldrne	r3, [pc, #20]	; (8000f74 <HAL_Delay+0x24>)
 8000f5e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f62:	bf18      	it	ne
 8000f64:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f66:	f7ff ffed 	bl	8000f44 <HAL_GetTick>
 8000f6a:	1b43      	subs	r3, r0, r5
 8000f6c:	42a3      	cmp	r3, r4
 8000f6e:	d3fa      	bcc.n	8000f66 <HAL_Delay+0x16>
  {
  }
}
 8000f70:	bd38      	pop	{r3, r4, r5, pc}
 8000f72:	bf00      	nop
 8000f74:	20000000 	.word	0x20000000

08000f78 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4907      	ldr	r1, [pc, #28]	; (8000f98 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f7a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f88:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000f94:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9e:	b530      	push	{r4, r5, lr}
 8000fa0:	68dc      	ldr	r4, [r3, #12]
 8000fa2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	2d04      	cmp	r5, #4
 8000fae:	bf28      	it	cs
 8000fb0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb8:	bf8c      	ite	hi
 8000fba:	3c03      	subhi	r4, #3
 8000fbc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbe:	fa03 f505 	lsl.w	r5, r3, r5
 8000fc2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc6:	40a3      	lsls	r3, r4
 8000fc8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000fce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	bfac      	ite	ge
 8000fd6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fda:	4a08      	ldrlt	r2, [pc, #32]	; (8000ffc <HAL_NVIC_SetPriority+0x60>)
 8000fdc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000fe0:	bfb8      	it	lt
 8000fe2:	f000 000f 	andlt.w	r0, r0, #15
 8000fe6:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	bfaa      	itet	ge
 8000fea:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ff4:	bd30      	pop	{r4, r5, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00
 8000ffc:	e000ed14 	.word	0xe000ed14

08001000 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001000:	2800      	cmp	r0, #0
 8001002:	db08      	blt.n	8001016 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001004:	0942      	lsrs	r2, r0, #5
 8001006:	2301      	movs	r3, #1
 8001008:	f000 001f 	and.w	r0, r0, #31
 800100c:	fa03 f000 	lsl.w	r0, r3, r0
 8001010:	4b01      	ldr	r3, [pc, #4]	; (8001018 <HAL_NVIC_EnableIRQ+0x18>)
 8001012:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100

0800101c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	3801      	subs	r0, #1
 800101e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001022:	d20a      	bcs.n	800103a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001028:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	21f0      	movs	r1, #240	; 0xf0
 800102c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e010 	.word	0xe000e010
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001048:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800104c:	2b02      	cmp	r3, #2
 800104e:	d003      	beq.n	8001058 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001054:	2001      	movs	r0, #1
 8001056:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001058:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800105a:	2305      	movs	r3, #5
 800105c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001060:	6813      	ldr	r3, [r2, #0]
 8001062:	f023 0301 	bic.w	r3, r3, #1
 8001066:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8001068:	2000      	movs	r0, #0
}
 800106a:	4770      	bx	lr

0800106c <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 800106c:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8001070:	4770      	bx	lr
	...

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001078:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8001204 <HAL_GPIO_Init+0x190>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800107c:	4a5f      	ldr	r2, [pc, #380]	; (80011fc <HAL_GPIO_Init+0x188>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001080:	f04f 0901 	mov.w	r9, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001084:	680c      	ldr	r4, [r1, #0]
    ioposition = 0x01U << position;
 8001086:	fa09 fa03 	lsl.w	sl, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108a:	ea0a 0504 	and.w	r5, sl, r4
    if(iocurrent == ioposition)
 800108e:	ea3a 0404 	bics.w	r4, sl, r4
 8001092:	f040 80a4 	bne.w	80011de <HAL_GPIO_Init+0x16a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001096:	684c      	ldr	r4, [r1, #4]
 8001098:	f024 0e10 	bic.w	lr, r4, #16
 800109c:	f1be 0f02 	cmp.w	lr, #2
 80010a0:	d114      	bne.n	80010cc <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3U];
 80010a2:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80010a6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010aa:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80010ae:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80010b6:	270f      	movs	r7, #15
 80010b8:	fa07 f70b 	lsl.w	r7, r7, fp
 80010bc:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c0:	690e      	ldr	r6, [r1, #16]
 80010c2:	fa06 f60b 	lsl.w	r6, r6, fp
 80010c6:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80010c8:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 80010cc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80010d4:	2703      	movs	r7, #3
 80010d6:	fa07 f70c 	lsl.w	r7, r7, ip
 80010da:	ea2b 0b07 	bic.w	fp, fp, r7
 80010de:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e0:	f004 0703 	and.w	r7, r4, #3
 80010e4:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e8:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ec:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f0:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 80010f4:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f6:	d811      	bhi.n	800111c <HAL_GPIO_Init+0xa8>
        temp = GPIOx->OSPEEDR; 
 80010f8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010fa:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fe:	68cf      	ldr	r7, [r1, #12]
 8001100:	fa07 f70c 	lsl.w	r7, r7, ip
 8001104:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001108:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800110a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110c:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001110:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001114:	409f      	lsls	r7, r3
 8001116:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800111a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800111c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800111e:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001120:	688e      	ldr	r6, [r1, #8]
 8001122:	fa06 f60c 	lsl.w	r6, r6, ip
 8001126:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8001128:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800112a:	00e6      	lsls	r6, r4, #3
 800112c:	d557      	bpl.n	80011de <HAL_GPIO_Init+0x16a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	f04f 0b00 	mov.w	fp, #0
 8001132:	f8cd b004 	str.w	fp, [sp, #4]
 8001136:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800113a:	4e31      	ldr	r6, [pc, #196]	; (8001200 <HAL_GPIO_Init+0x18c>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001140:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001144:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001148:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800114c:	9701      	str	r7, [sp, #4]
 800114e:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001150:	f023 0703 	bic.w	r7, r3, #3
 8001154:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001158:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800115c:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001160:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001164:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001168:	f04f 0c0f 	mov.w	ip, #15
 800116c:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001170:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001172:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001176:	d039      	beq.n	80011ec <HAL_GPIO_Init+0x178>
 8001178:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800117c:	42b0      	cmp	r0, r6
 800117e:	d037      	beq.n	80011f0 <HAL_GPIO_Init+0x17c>
 8001180:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001184:	42b0      	cmp	r0, r6
 8001186:	d035      	beq.n	80011f4 <HAL_GPIO_Init+0x180>
 8001188:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800118c:	42b0      	cmp	r0, r6
 800118e:	d033      	beq.n	80011f8 <HAL_GPIO_Init+0x184>
 8001190:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001194:	42b0      	cmp	r0, r6
 8001196:	bf0c      	ite	eq
 8001198:	2604      	moveq	r6, #4
 800119a:	2607      	movne	r6, #7
 800119c:	fa06 f60e 	lsl.w	r6, r6, lr
 80011a0:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a4:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80011a6:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011aa:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80011ae:	bf0c      	ite	eq
 80011b0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80011b2:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80011b4:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80011b6:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80011bc:	bf0c      	ite	eq
 80011be:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80011c0:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80011c2:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c4:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80011ca:	bf0c      	ite	eq
 80011cc:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80011ce:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80011d0:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80011d2:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80011d6:	bf54      	ite	pl
 80011d8:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80011da:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80011dc:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	3301      	adds	r3, #1
 80011e0:	2b10      	cmp	r3, #16
 80011e2:	f47f af4f 	bne.w	8001084 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 80011e6:	b003      	add	sp, #12
 80011e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ec:	465e      	mov	r6, fp
 80011ee:	e7d5      	b.n	800119c <HAL_GPIO_Init+0x128>
 80011f0:	2601      	movs	r6, #1
 80011f2:	e7d3      	b.n	800119c <HAL_GPIO_Init+0x128>
 80011f4:	2602      	movs	r6, #2
 80011f6:	e7d1      	b.n	800119c <HAL_GPIO_Init+0x128>
 80011f8:	2603      	movs	r6, #3
 80011fa:	e7cf      	b.n	800119c <HAL_GPIO_Init+0x128>
 80011fc:	40013c00 	.word	0x40013c00
 8001200:	40020000 	.word	0x40020000
 8001204:	40023800 	.word	0x40023800

08001208 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001208:	b10a      	cbz	r2, 800120e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800120a:	6181      	str	r1, [r0, #24]
  }
}
 800120c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800120e:	0409      	lsls	r1, r1, #16
 8001210:	e7fb      	b.n	800120a <HAL_GPIO_WritePin+0x2>

08001212 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001212:	6801      	ldr	r1, [r0, #0]
 8001214:	694b      	ldr	r3, [r1, #20]
 8001216:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	d010      	beq.n	8001242 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001220:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001224:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001226:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001228:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800122a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800122e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001232:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001234:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800123e:	2001      	movs	r0, #1
 8001240:	4770      	bx	lr
  }
  return HAL_OK;
 8001242:	4618      	mov	r0, r3
}
 8001244:	4770      	bx	lr

08001246 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800124a:	4604      	mov	r4, r0
 800124c:	460f      	mov	r7, r1
 800124e:	4616      	mov	r6, r2
 8001250:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001252:	6825      	ldr	r5, [r4, #0]
 8001254:	6968      	ldr	r0, [r5, #20]
 8001256:	ea27 0000 	bic.w	r0, r7, r0
 800125a:	b280      	uxth	r0, r0
 800125c:	b1b8      	cbz	r0, 800128e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800125e:	696b      	ldr	r3, [r5, #20]
 8001260:	055a      	lsls	r2, r3, #21
 8001262:	d516      	bpl.n	8001292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001264:	682b      	ldr	r3, [r5, #0]
 8001266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800126c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001270:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001272:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001274:	2300      	movs	r3, #0
 8001276:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001278:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800127c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001280:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001282:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001286:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001288:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800128c:	2001      	movs	r0, #1
}
 800128e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001292:	1c73      	adds	r3, r6, #1
 8001294:	d0de      	beq.n	8001254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001296:	f7ff fe55 	bl	8000f44 <HAL_GetTick>
 800129a:	eba0 0008 	sub.w	r0, r0, r8
 800129e:	42b0      	cmp	r0, r6
 80012a0:	d801      	bhi.n	80012a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	d1d5      	bne.n	8001252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80012a6:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80012a8:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80012aa:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80012ac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012b0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80012b6:	f042 0220 	orr.w	r2, r2, #32
 80012ba:	e7e4      	b.n	8001286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

080012bc <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80012bc:	b570      	push	{r4, r5, r6, lr}
 80012be:	4604      	mov	r4, r0
 80012c0:	460d      	mov	r5, r1
 80012c2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	075b      	lsls	r3, r3, #29
 80012ca:	d501      	bpl.n	80012d0 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80012cc:	2000      	movs	r0, #0
}
 80012ce:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80012d0:	4620      	mov	r0, r4
 80012d2:	f7ff ff9e 	bl	8001212 <I2C_IsAcknowledgeFailed>
 80012d6:	b9a8      	cbnz	r0, 8001304 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80012d8:	1c6a      	adds	r2, r5, #1
 80012da:	d0f3      	beq.n	80012c4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012dc:	f7ff fe32 	bl	8000f44 <HAL_GetTick>
 80012e0:	1b80      	subs	r0, r0, r6
 80012e2:	42a8      	cmp	r0, r5
 80012e4:	d801      	bhi.n	80012ea <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80012e6:	2d00      	cmp	r5, #0
 80012e8:	d1ec      	bne.n	80012c4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80012ea:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80012ec:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80012ee:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80012f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80012f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80012f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80012fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80012fe:	f042 0220 	orr.w	r2, r2, #32
 8001302:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001304:	2001      	movs	r0, #1
 8001306:	e7e2      	b.n	80012ce <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08001308 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	4604      	mov	r4, r0
 800130c:	460d      	mov	r5, r1
 800130e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001310:	6821      	ldr	r1, [r4, #0]
 8001312:	694b      	ldr	r3, [r1, #20]
 8001314:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001318:	d001      	beq.n	800131e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800131a:	2000      	movs	r0, #0
 800131c:	e010      	b.n	8001340 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800131e:	694a      	ldr	r2, [r1, #20]
 8001320:	06d2      	lsls	r2, r2, #27
 8001322:	d50e      	bpl.n	8001342 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001324:	f06f 0210 	mvn.w	r2, #16
 8001328:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800132a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800132c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800132e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001332:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001336:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001338:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800133a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800133e:	2001      	movs	r0, #1
}
 8001340:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001342:	f7ff fdff 	bl	8000f44 <HAL_GetTick>
 8001346:	1b80      	subs	r0, r0, r6
 8001348:	42a8      	cmp	r0, r5
 800134a:	d801      	bhi.n	8001350 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800134c:	2d00      	cmp	r5, #0
 800134e:	d1df      	bne.n	8001310 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001350:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001352:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001354:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001356:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800135a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800135e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001360:	f042 0220 	orr.w	r2, r2, #32
 8001364:	e7e8      	b.n	8001338 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08001366 <I2C_WaitOnFlagUntilTimeout>:
{
 8001366:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 800136a:	4606      	mov	r6, r0
 800136c:	460f      	mov	r7, r1
 800136e:	4691      	mov	r9, r2
 8001370:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001372:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8001376:	6833      	ldr	r3, [r6, #0]
 8001378:	f1ba 0f01 	cmp.w	sl, #1
 800137c:	bf0c      	ite	eq
 800137e:	695c      	ldreq	r4, [r3, #20]
 8001380:	699c      	ldrne	r4, [r3, #24]
 8001382:	ea27 0404 	bic.w	r4, r7, r4
 8001386:	b2a4      	uxth	r4, r4
 8001388:	fab4 f484 	clz	r4, r4
 800138c:	0964      	lsrs	r4, r4, #5
 800138e:	45a1      	cmp	r9, r4
 8001390:	d001      	beq.n	8001396 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001392:	2000      	movs	r0, #0
 8001394:	e017      	b.n	80013c6 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8001396:	1c6a      	adds	r2, r5, #1
 8001398:	d0ee      	beq.n	8001378 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800139a:	f7ff fdd3 	bl	8000f44 <HAL_GetTick>
 800139e:	9b08      	ldr	r3, [sp, #32]
 80013a0:	1ac0      	subs	r0, r0, r3
 80013a2:	42a8      	cmp	r0, r5
 80013a4:	d801      	bhi.n	80013aa <I2C_WaitOnFlagUntilTimeout+0x44>
 80013a6:	2d00      	cmp	r5, #0
 80013a8:	d1e5      	bne.n	8001376 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80013aa:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80013ac:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80013ae:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80013b0:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80013b4:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80013b8:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80013ba:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80013be:	f042 0220 	orr.w	r2, r2, #32
 80013c2:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80013c4:	2001      	movs	r0, #1
}
 80013c6:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

080013ca <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80013ca:	b570      	push	{r4, r5, r6, lr}
 80013cc:	4604      	mov	r4, r0
 80013ce:	460d      	mov	r5, r1
 80013d0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	061b      	lsls	r3, r3, #24
 80013d8:	d501      	bpl.n	80013de <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80013da:	2000      	movs	r0, #0
}
 80013dc:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013de:	4620      	mov	r0, r4
 80013e0:	f7ff ff17 	bl	8001212 <I2C_IsAcknowledgeFailed>
 80013e4:	b9a8      	cbnz	r0, 8001412 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80013e6:	1c6a      	adds	r2, r5, #1
 80013e8:	d0f3      	beq.n	80013d2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013ea:	f7ff fdab 	bl	8000f44 <HAL_GetTick>
 80013ee:	1b80      	subs	r0, r0, r6
 80013f0:	42a8      	cmp	r0, r5
 80013f2:	d801      	bhi.n	80013f8 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80013f4:	2d00      	cmp	r5, #0
 80013f6:	d1ec      	bne.n	80013d2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80013f8:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80013fa:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80013fc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80013fe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001402:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001406:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001408:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800140c:	f042 0220 	orr.w	r2, r2, #32
 8001410:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001412:	2001      	movs	r0, #1
 8001414:	e7e2      	b.n	80013dc <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08001418 <HAL_I2C_Init>:
{
 8001418:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800141a:	4604      	mov	r4, r0
 800141c:	b908      	cbnz	r0, 8001422 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800141e:	2001      	movs	r0, #1
}
 8001420:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001422:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001426:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800142a:	b91b      	cbnz	r3, 8001434 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800142c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001430:	f001 ff2c 	bl	800328c <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001434:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001436:	2324      	movs	r3, #36	; 0x24
 8001438:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800143c:	6813      	ldr	r3, [r2, #0]
 800143e:	f023 0301 	bic.w	r3, r3, #1
 8001442:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001444:	f001 faae 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001448:	4a3f      	ldr	r2, [pc, #252]	; (8001548 <HAL_I2C_Init+0x130>)
 800144a:	6863      	ldr	r3, [r4, #4]
 800144c:	4293      	cmp	r3, r2
 800144e:	bf94      	ite	ls
 8001450:	4a3e      	ldrls	r2, [pc, #248]	; (800154c <HAL_I2C_Init+0x134>)
 8001452:	4a3f      	ldrhi	r2, [pc, #252]	; (8001550 <HAL_I2C_Init+0x138>)
 8001454:	4290      	cmp	r0, r2
 8001456:	bf8c      	ite	hi
 8001458:	2200      	movhi	r2, #0
 800145a:	2201      	movls	r2, #1
 800145c:	2a00      	cmp	r2, #0
 800145e:	d1de      	bne.n	800141e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001460:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001462:	4e3c      	ldr	r6, [pc, #240]	; (8001554 <HAL_I2C_Init+0x13c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001464:	684a      	ldr	r2, [r1, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001466:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800146a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800146e:	4332      	orrs	r2, r6
 8001470:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001472:	4a35      	ldr	r2, [pc, #212]	; (8001548 <HAL_I2C_Init+0x130>)
 8001474:	6a0d      	ldr	r5, [r1, #32]
 8001476:	4293      	cmp	r3, r2
 8001478:	bf84      	itt	hi
 800147a:	f44f 7296 	movhi.w	r2, #300	; 0x12c
 800147e:	4372      	mulhi	r2, r6
 8001480:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001484:	bf91      	iteee	ls
 8001486:	1c72      	addls	r2, r6, #1
 8001488:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 800148c:	fbb2 f2f6 	udivhi	r2, r2, r6
 8001490:	3201      	addhi	r2, #1
 8001492:	432a      	orrs	r2, r5
 8001494:	620a      	str	r2, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001496:	69cd      	ldr	r5, [r1, #28]
 8001498:	1e42      	subs	r2, r0, #1
 800149a:	482b      	ldr	r0, [pc, #172]	; (8001548 <HAL_I2C_Init+0x130>)
 800149c:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 80014a0:	4283      	cmp	r3, r0
 80014a2:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80014a6:	d832      	bhi.n	800150e <HAL_I2C_Init+0xf6>
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	f640 72fc 	movw	r2, #4092	; 0xffc
 80014b2:	3301      	adds	r3, #1
 80014b4:	4213      	tst	r3, r2
 80014b6:	d042      	beq.n	800153e <HAL_I2C_Init+0x126>
 80014b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014bc:	432b      	orrs	r3, r5
 80014be:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014c0:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80014c4:	680a      	ldr	r2, [r1, #0]
 80014c6:	4303      	orrs	r3, r0
 80014c8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014d0:	688a      	ldr	r2, [r1, #8]
 80014d2:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80014d6:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 80014da:	4303      	orrs	r3, r0
 80014dc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014e0:	4313      	orrs	r3, r2
 80014e2:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014e4:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80014e8:	68ca      	ldr	r2, [r1, #12]
 80014ea:	4303      	orrs	r3, r0
 80014ec:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014f0:	4313      	orrs	r3, r2
 80014f2:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80014f4:	680b      	ldr	r3, [r1, #0]
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014fc:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80014fe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001500:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001502:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001506:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001508:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800150c:	e788      	b.n	8001420 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800150e:	68a0      	ldr	r0, [r4, #8]
 8001510:	b950      	cbnz	r0, 8001528 <HAL_I2C_Init+0x110>
 8001512:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	3301      	adds	r3, #1
 800151c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001520:	b17b      	cbz	r3, 8001542 <HAL_I2C_Init+0x12a>
 8001522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001526:	e7c9      	b.n	80014bc <HAL_I2C_Init+0xa4>
 8001528:	2019      	movs	r0, #25
 800152a:	4343      	muls	r3, r0
 800152c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001530:	3301      	adds	r3, #1
 8001532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001536:	b123      	cbz	r3, 8001542 <HAL_I2C_Init+0x12a>
 8001538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800153c:	e7be      	b.n	80014bc <HAL_I2C_Init+0xa4>
 800153e:	2304      	movs	r3, #4
 8001540:	e7bc      	b.n	80014bc <HAL_I2C_Init+0xa4>
 8001542:	2301      	movs	r3, #1
 8001544:	e7ba      	b.n	80014bc <HAL_I2C_Init+0xa4>
 8001546:	bf00      	nop
 8001548:	000186a0 	.word	0x000186a0
 800154c:	001e847f 	.word	0x001e847f
 8001550:	003d08ff 	.word	0x003d08ff
 8001554:	000f4240 	.word	0x000f4240

08001558 <HAL_I2C_Master_Transmit>:
{
 8001558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800155c:	4604      	mov	r4, r0
 800155e:	b085      	sub	sp, #20
 8001560:	4698      	mov	r8, r3
 8001562:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001564:	460d      	mov	r5, r1
 8001566:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff fcec 	bl	8000f44 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800156c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001570:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001572:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001574:	d004      	beq.n	8001580 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 8001576:	2502      	movs	r5, #2
}
 8001578:	4628      	mov	r0, r5
 800157a:	b005      	add	sp, #20
 800157c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001580:	9000      	str	r0, [sp, #0]
 8001582:	495a      	ldr	r1, [pc, #360]	; (80016ec <HAL_I2C_Master_Transmit+0x194>)
 8001584:	2319      	movs	r3, #25
 8001586:	2201      	movs	r2, #1
 8001588:	4620      	mov	r0, r4
 800158a:	f7ff feec 	bl	8001366 <I2C_WaitOnFlagUntilTimeout>
 800158e:	2800      	cmp	r0, #0
 8001590:	d1f1      	bne.n	8001576 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8001592:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001596:	2b01      	cmp	r3, #1
 8001598:	d0ed      	beq.n	8001576 <HAL_I2C_Master_Transmit+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800159a:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 800159c:	2301      	movs	r3, #1
 800159e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015a2:	680b      	ldr	r3, [r1, #0]
 80015a4:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80015a6:	bf5e      	ittt	pl
 80015a8:	680b      	ldrpl	r3, [r1, #0]
 80015aa:	f043 0301 	orrpl.w	r3, r3, #1
 80015ae:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015b0:	680b      	ldr	r3, [r1, #0]
 80015b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015b6:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015b8:	2321      	movs	r3, #33	; 0x21
 80015ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015be:	2310      	movs	r3, #16
 80015c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80015c8:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015ce:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015d0:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <HAL_I2C_Master_Transmit+0x198>)
 80015d2:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80015d6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d004      	beq.n	80015e8 <HAL_I2C_Master_Transmit+0x90>
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d002      	beq.n	80015e8 <HAL_I2C_Master_Transmit+0x90>
 80015e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80015e6:	d104      	bne.n	80015f2 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015e8:	680b      	ldr	r3, [r1, #0]
 80015ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ee:	600b      	str	r3, [r1, #0]
 80015f0:	e002      	b.n	80015f8 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80015f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015f4:	2b12      	cmp	r3, #18
 80015f6:	d0f7      	beq.n	80015e8 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015f8:	9600      	str	r6, [sp, #0]
 80015fa:	463b      	mov	r3, r7
 80015fc:	2200      	movs	r2, #0
 80015fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff feaf 	bl	8001366 <I2C_WaitOnFlagUntilTimeout>
 8001608:	b108      	cbz	r0, 800160e <HAL_I2C_Master_Transmit+0xb6>
        return HAL_ERROR;
 800160a:	2501      	movs	r5, #1
 800160c:	e7b4      	b.n	8001578 <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800160e:	6923      	ldr	r3, [r4, #16]
 8001610:	6822      	ldr	r2, [r4, #0]
 8001612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001616:	d121      	bne.n	800165c <HAL_I2C_Master_Transmit+0x104>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001618:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800161c:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800161e:	4935      	ldr	r1, [pc, #212]	; (80016f4 <HAL_I2C_Master_Transmit+0x19c>)
 8001620:	4633      	mov	r3, r6
 8001622:	463a      	mov	r2, r7
 8001624:	4620      	mov	r0, r4
 8001626:	f7ff fe0e 	bl	8001246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800162a:	4605      	mov	r5, r0
 800162c:	2800      	cmp	r0, #0
 800162e:	d1ec      	bne.n	800160a <HAL_I2C_Master_Transmit+0xb2>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001630:	6823      	ldr	r3, [r4, #0]
 8001632:	9003      	str	r0, [sp, #12]
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	9203      	str	r2, [sp, #12]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	9303      	str	r3, [sp, #12]
 800163c:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800163e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001640:	b9f3      	cbnz	r3, 8001680 <HAL_I2C_Master_Transmit+0x128>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001642:	6821      	ldr	r1, [r4, #0]
 8001644:	680a      	ldr	r2, [r1, #0]
 8001646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800164a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800164c:	2220      	movs	r2, #32
 800164e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001652:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001656:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800165a:	e78d      	b.n	8001578 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800165c:	11eb      	asrs	r3, r5, #7
 800165e:	f003 0306 	and.w	r3, r3, #6
 8001662:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001666:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001668:	4923      	ldr	r1, [pc, #140]	; (80016f8 <HAL_I2C_Master_Transmit+0x1a0>)
 800166a:	4633      	mov	r3, r6
 800166c:	463a      	mov	r2, r7
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff fde9 	bl	8001246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001674:	2800      	cmp	r0, #0
 8001676:	d1c8      	bne.n	800160a <HAL_I2C_Master_Transmit+0xb2>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	b2ed      	uxtb	r5, r5
 800167c:	611d      	str	r5, [r3, #16]
 800167e:	e7ce      	b.n	800161e <HAL_I2C_Master_Transmit+0xc6>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001680:	4632      	mov	r2, r6
 8001682:	4639      	mov	r1, r7
 8001684:	4620      	mov	r0, r4
 8001686:	f7ff fea0 	bl	80013ca <I2C_WaitOnTXEFlagUntilTimeout>
 800168a:	b140      	cbz	r0, 800169e <HAL_I2C_Master_Transmit+0x146>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800168c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800168e:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001690:	bf01      	itttt	eq
 8001692:	6822      	ldreq	r2, [r4, #0]
 8001694:	6813      	ldreq	r3, [r2, #0]
 8001696:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800169a:	6013      	streq	r3, [r2, #0]
 800169c:	e7b5      	b.n	800160a <HAL_I2C_Master_Transmit+0xb2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800169e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016a0:	6820      	ldr	r0, [r4, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80016a8:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80016aa:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80016ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80016ae:	3a01      	subs	r2, #1
 80016b0:	b292      	uxth	r2, r2
 80016b2:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80016b4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016b6:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 80016ba:	1e51      	subs	r1, r2, #1
 80016bc:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016be:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 80016c2:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016c4:	d00a      	beq.n	80016dc <HAL_I2C_Master_Transmit+0x184>
 80016c6:	b149      	cbz	r1, 80016dc <HAL_I2C_Master_Transmit+0x184>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016c8:	7859      	ldrb	r1, [r3, #1]
 80016ca:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80016cc:	3302      	adds	r3, #2
 80016ce:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80016d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80016d6:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80016d8:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80016da:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016dc:	4632      	mov	r2, r6
 80016de:	4639      	mov	r1, r7
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7ff fdeb 	bl	80012bc <I2C_WaitOnBTFFlagUntilTimeout>
 80016e6:	2800      	cmp	r0, #0
 80016e8:	d0a9      	beq.n	800163e <HAL_I2C_Master_Transmit+0xe6>
 80016ea:	e7cf      	b.n	800168c <HAL_I2C_Master_Transmit+0x134>
 80016ec:	00100002 	.word	0x00100002
 80016f0:	ffff0000 	.word	0xffff0000
 80016f4:	00010002 	.word	0x00010002
 80016f8:	00010008 	.word	0x00010008

080016fc <HAL_I2C_Master_Receive>:
{
 80016fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001700:	4604      	mov	r4, r0
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	4698      	mov	r8, r3
 8001706:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8001708:	460e      	mov	r6, r1
 800170a:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff fc1a 	bl	8000f44 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001710:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001714:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001716:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001718:	d004      	beq.n	8001724 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 800171a:	2602      	movs	r6, #2
}
 800171c:	4630      	mov	r0, r6
 800171e:	b009      	add	sp, #36	; 0x24
 8001720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001724:	9000      	str	r0, [sp, #0]
 8001726:	49a5      	ldr	r1, [pc, #660]	; (80019bc <HAL_I2C_Master_Receive+0x2c0>)
 8001728:	2319      	movs	r3, #25
 800172a:	2201      	movs	r2, #1
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff fe1a 	bl	8001366 <I2C_WaitOnFlagUntilTimeout>
 8001732:	2800      	cmp	r0, #0
 8001734:	d1f1      	bne.n	800171a <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001736:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800173a:	2b01      	cmp	r3, #1
 800173c:	d0ed      	beq.n	800171a <HAL_I2C_Master_Receive+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800173e:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8001740:	2301      	movs	r3, #1
 8001742:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001746:	680b      	ldr	r3, [r1, #0]
 8001748:	07d8      	lsls	r0, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800174a:	bf5e      	ittt	pl
 800174c:	680b      	ldrpl	r3, [r1, #0]
 800174e:	f043 0301 	orrpl.w	r3, r3, #1
 8001752:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001754:	680b      	ldr	r3, [r1, #0]
 8001756:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800175a:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800175c:	2322      	movs	r3, #34	; 0x22
 800175e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001762:	2310      	movs	r3, #16
 8001764:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001768:	2300      	movs	r3, #0
 800176a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800176c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001770:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001772:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001774:	4b92      	ldr	r3, [pc, #584]	; (80019c0 <HAL_I2C_Master_Receive+0x2c4>)
 8001776:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001778:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800177a:	680a      	ldr	r2, [r1, #0]
    hi2c->pBuffPtr    = pData;
 800177c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001784:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001786:	600a      	str	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001788:	d004      	beq.n	8001794 <HAL_I2C_Master_Receive+0x98>
 800178a:	2b01      	cmp	r3, #1
 800178c:	d002      	beq.n	8001794 <HAL_I2C_Master_Receive+0x98>
 800178e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001792:	d104      	bne.n	800179e <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001794:	680b      	ldr	r3, [r1, #0]
 8001796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179a:	600b      	str	r3, [r1, #0]
 800179c:	e002      	b.n	80017a4 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800179e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80017a0:	2b11      	cmp	r3, #17
 80017a2:	d0f7      	beq.n	8001794 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017a4:	9500      	str	r5, [sp, #0]
 80017a6:	463b      	mov	r3, r7
 80017a8:	2200      	movs	r2, #0
 80017aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff fdd9 	bl	8001366 <I2C_WaitOnFlagUntilTimeout>
 80017b4:	b108      	cbz	r0, 80017ba <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 80017b6:	2601      	movs	r6, #1
 80017b8:	e7b0      	b.n	800171c <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017ba:	6922      	ldr	r2, [r4, #16]
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80017c2:	d127      	bne.n	8001814 <HAL_I2C_Master_Receive+0x118>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80017c4:	f046 0601 	orr.w	r6, r6, #1
 80017c8:	b2f6      	uxtb	r6, r6
 80017ca:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017cc:	497d      	ldr	r1, [pc, #500]	; (80019c4 <HAL_I2C_Master_Receive+0x2c8>)
 80017ce:	462b      	mov	r3, r5
 80017d0:	463a      	mov	r2, r7
 80017d2:	4620      	mov	r0, r4
 80017d4:	f7ff fd37 	bl	8001246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017d8:	4606      	mov	r6, r0
 80017da:	2800      	cmp	r0, #0
 80017dc:	d1eb      	bne.n	80017b6 <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 80017de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	2a00      	cmp	r2, #0
 80017e4:	d14a      	bne.n	800187c <HAL_I2C_Master_Receive+0x180>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017e6:	9003      	str	r0, [sp, #12]
 80017e8:	695a      	ldr	r2, [r3, #20]
 80017ea:	9203      	str	r2, [sp, #12]
 80017ec:	699a      	ldr	r2, [r3, #24]
 80017ee:	9203      	str	r2, [sp, #12]
 80017f0:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f8:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017fa:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80019cc <HAL_I2C_Master_Receive+0x2d0>
    while (hi2c->XferSize > 0U)
 80017fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001800:	2b00      	cmp	r3, #0
 8001802:	d163      	bne.n	80018cc <HAL_I2C_Master_Receive+0x1d0>
    hi2c->State = HAL_I2C_STATE_READY;
 8001804:	2220      	movs	r2, #32
 8001806:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800180a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800180e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001812:	e783      	b.n	800171c <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001814:	ea4f 18e6 	mov.w	r8, r6, asr #7
 8001818:	f008 0806 	and.w	r8, r8, #6
 800181c:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001820:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001822:	4969      	ldr	r1, [pc, #420]	; (80019c8 <HAL_I2C_Master_Receive+0x2cc>)
 8001824:	462b      	mov	r3, r5
 8001826:	463a      	mov	r2, r7
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff fd0c 	bl	8001246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800182e:	2800      	cmp	r0, #0
 8001830:	d1c1      	bne.n	80017b6 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001832:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001834:	4963      	ldr	r1, [pc, #396]	; (80019c4 <HAL_I2C_Master_Receive+0x2c8>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001836:	b2f6      	uxtb	r6, r6
 8001838:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800183a:	463a      	mov	r2, r7
 800183c:	462b      	mov	r3, r5
 800183e:	4620      	mov	r0, r4
 8001840:	f7ff fd01 	bl	8001246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001844:	2800      	cmp	r0, #0
 8001846:	d1b6      	bne.n	80017b6 <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	9007      	str	r0, [sp, #28]
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	9207      	str	r2, [sp, #28]
 8001850:	699a      	ldr	r2, [r3, #24]
 8001852:	9207      	str	r2, [sp, #28]
 8001854:	9a07      	ldr	r2, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800185c:	601a      	str	r2, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800185e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001862:	4602      	mov	r2, r0
 8001864:	9500      	str	r5, [sp, #0]
 8001866:	463b      	mov	r3, r7
 8001868:	4620      	mov	r0, r4
 800186a:	f7ff fd7c 	bl	8001366 <I2C_WaitOnFlagUntilTimeout>
 800186e:	2800      	cmp	r0, #0
 8001870:	d1a1      	bne.n	80017b6 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001872:	6822      	ldr	r2, [r4, #0]
 8001874:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001878:	6113      	str	r3, [r2, #16]
 800187a:	e7a7      	b.n	80017cc <HAL_I2C_Master_Receive+0xd0>
    else if (hi2c->XferSize == 1U)
 800187c:	2a01      	cmp	r2, #1
 800187e:	d10a      	bne.n	8001896 <HAL_I2C_Master_Receive+0x19a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001886:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001888:	9004      	str	r0, [sp, #16]
 800188a:	695a      	ldr	r2, [r3, #20]
 800188c:	9204      	str	r2, [sp, #16]
 800188e:	699a      	ldr	r2, [r3, #24]
 8001890:	9204      	str	r2, [sp, #16]
 8001892:	9a04      	ldr	r2, [sp, #16]
 8001894:	e7ad      	b.n	80017f2 <HAL_I2C_Master_Receive+0xf6>
    else if (hi2c->XferSize == 2U)
 8001896:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001898:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 800189a:	d10d      	bne.n	80018b8 <HAL_I2C_Master_Receive+0x1bc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800189c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a0:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018a8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018aa:	9005      	str	r0, [sp, #20]
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	9205      	str	r2, [sp, #20]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	9305      	str	r3, [sp, #20]
 80018b4:	9b05      	ldr	r3, [sp, #20]
 80018b6:	e7a0      	b.n	80017fa <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018bc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018be:	9006      	str	r0, [sp, #24]
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	9206      	str	r2, [sp, #24]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	9306      	str	r3, [sp, #24]
 80018c8:	9b06      	ldr	r3, [sp, #24]
 80018ca:	e796      	b.n	80017fa <HAL_I2C_Master_Receive+0xfe>
      if (hi2c->XferSize <= 3U)
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d858      	bhi.n	8001982 <HAL_I2C_Master_Receive+0x286>
        if (hi2c->XferSize == 1U)
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d116      	bne.n	8001902 <HAL_I2C_Master_Receive+0x206>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d4:	462a      	mov	r2, r5
 80018d6:	4639      	mov	r1, r7
 80018d8:	4620      	mov	r0, r4
 80018da:	f7ff fd15 	bl	8001308 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018de:	2800      	cmp	r0, #0
 80018e0:	f47f af69 	bne.w	80017b6 <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018ea:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80018ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018ee:	3301      	adds	r3, #1
 80018f0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80018f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018f4:	3b01      	subs	r3, #1
 80018f6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80018f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001900:	e77d      	b.n	80017fe <HAL_I2C_Master_Receive+0x102>
        else if (hi2c->XferSize == 2U)
 8001902:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001904:	9500      	str	r5, [sp, #0]
 8001906:	463b      	mov	r3, r7
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	4641      	mov	r1, r8
 800190e:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001910:	d11a      	bne.n	8001948 <HAL_I2C_Master_Receive+0x24c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001912:	f7ff fd28 	bl	8001366 <I2C_WaitOnFlagUntilTimeout>
 8001916:	2800      	cmp	r0, #0
 8001918:	f47f af4d 	bne.w	80017b6 <HAL_I2C_Master_Receive+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001924:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800192a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800192c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800192e:	1c53      	adds	r3, r2, #1
 8001930:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001932:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001934:	3b01      	subs	r3, #1
 8001936:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001938:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800193a:	3b01      	subs	r3, #1
 800193c:	b29b      	uxth	r3, r3
 800193e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001940:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	7053      	strb	r3, [r2, #1]
 8001946:	e7d1      	b.n	80018ec <HAL_I2C_Master_Receive+0x1f0>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001948:	f7ff fd0d 	bl	8001366 <I2C_WaitOnFlagUntilTimeout>
 800194c:	2800      	cmp	r0, #0
 800194e:	f47f af32 	bne.w	80017b6 <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800195a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001960:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001962:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001964:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8001966:	3301      	adds	r3, #1
 8001968:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800196a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800196c:	3b01      	subs	r3, #1
 800196e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001970:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001972:	3b01      	subs	r3, #1
 8001974:	b29b      	uxth	r3, r3
 8001976:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001978:	4602      	mov	r2, r0
 800197a:	463b      	mov	r3, r7
 800197c:	4641      	mov	r1, r8
 800197e:	4620      	mov	r0, r4
 8001980:	e7c7      	b.n	8001912 <HAL_I2C_Master_Receive+0x216>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001982:	462a      	mov	r2, r5
 8001984:	4639      	mov	r1, r7
 8001986:	4620      	mov	r0, r4
 8001988:	f7ff fcbe 	bl	8001308 <I2C_WaitOnRXNEFlagUntilTimeout>
 800198c:	2800      	cmp	r0, #0
 800198e:	f47f af12 	bne.w	80017b6 <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001998:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800199a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800199c:	1c53      	adds	r3, r2, #1
 800199e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80019a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019a2:	3b01      	subs	r3, #1
 80019a4:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80019a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019a8:	3b01      	subs	r3, #1
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	6959      	ldr	r1, [r3, #20]
 80019b2:	0749      	lsls	r1, r1, #29
 80019b4:	f57f af23 	bpl.w	80017fe <HAL_I2C_Master_Receive+0x102>
 80019b8:	e7c3      	b.n	8001942 <HAL_I2C_Master_Receive+0x246>
 80019ba:	bf00      	nop
 80019bc:	00100002 	.word	0x00100002
 80019c0:	ffff0000 	.word	0xffff0000
 80019c4:	00010002 	.word	0x00010002
 80019c8:	00010008 	.word	0x00010008
 80019cc:	00010004 	.word	0x00010004

080019d0 <HAL_I2C_MasterTxCpltCallback>:
 80019d0:	4770      	bx	lr

080019d2 <HAL_I2C_MasterRxCpltCallback>:
 80019d2:	4770      	bx	lr

080019d4 <HAL_I2C_SlaveTxCpltCallback>:
 80019d4:	4770      	bx	lr

080019d6 <HAL_I2C_SlaveRxCpltCallback>:
 80019d6:	4770      	bx	lr

080019d8 <HAL_I2C_AddrCallback>:
}
 80019d8:	4770      	bx	lr

080019da <HAL_I2C_ListenCpltCallback>:
 80019da:	4770      	bx	lr

080019dc <HAL_I2C_MemTxCpltCallback>:
 80019dc:	4770      	bx	lr

080019de <HAL_I2C_MemRxCpltCallback>:
 80019de:	4770      	bx	lr

080019e0 <HAL_I2C_ErrorCallback>:
 80019e0:	4770      	bx	lr

080019e2 <HAL_I2C_AbortCpltCallback>:
 80019e2:	4770      	bx	lr

080019e4 <I2C_DMAAbort>:
{
 80019e4:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80019e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019e8:	6802      	ldr	r2, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80019ea:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ee:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferCpltCallback = NULL;
 80019f0:	6b46      	ldr	r6, [r0, #52]	; 0x34
  hi2c->hdmarx->XferCpltCallback = NULL;
 80019f2:	6b85      	ldr	r5, [r0, #56]	; 0x38
  hi2c->hdmatx->XferCpltCallback = NULL;
 80019f4:	2300      	movs	r3, #0
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019f6:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
  hi2c->hdmatx->XferCpltCallback = NULL;
 80019fa:	63f3      	str	r3, [r6, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 80019fc:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019fe:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8001a00:	8543      	strh	r3, [r0, #42]	; 0x2a
  __HAL_I2C_DISABLE(hi2c);
 8001a02:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001a04:	6533      	str	r3, [r6, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8001a06:	f024 0401 	bic.w	r4, r4, #1
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001a0a:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8001a0c:	6014      	str	r4, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001a0e:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001a12:	2c60      	cmp	r4, #96	; 0x60
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a14:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001a16:	d108      	bne.n	8001a2a <I2C_DMAAbort+0x46>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001a18:	2220      	movs	r2, #32
 8001a1a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001a1e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001a22:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001a24:	f7ff ffdd 	bl	80019e2 <HAL_I2C_AbortCpltCallback>
}
 8001a28:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001a2a:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8001a2e:	2928      	cmp	r1, #40	; 0x28
 8001a30:	d10d      	bne.n	8001a4e <I2C_DMAAbort+0x6a>
      __HAL_I2C_ENABLE(hi2c);
 8001a32:	6814      	ldr	r4, [r2, #0]
 8001a34:	f044 0401 	orr.w	r4, r4, #1
 8001a38:	6014      	str	r4, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a3a:	6814      	ldr	r4, [r2, #0]
 8001a3c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8001a40:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a42:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001a44:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 8001a48:	f7ff ffca 	bl	80019e0 <HAL_I2C_ErrorCallback>
}
 8001a4c:	e7ec      	b.n	8001a28 <I2C_DMAAbort+0x44>
      hi2c->State = HAL_I2C_STATE_READY;
 8001a4e:	2220      	movs	r2, #32
 8001a50:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a54:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001a58:	e7f6      	b.n	8001a48 <I2C_DMAAbort+0x64>
	...

08001a5c <I2C_ITError>:
{
 8001a5c:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a5e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001a62:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8001a66:	6803      	ldr	r3, [r0, #0]
 8001a68:	2910      	cmp	r1, #16
{
 8001a6a:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a6c:	b2d2      	uxtb	r2, r2
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001a6e:	d112      	bne.n	8001a96 <I2C_ITError+0x3a>
 8001a70:	2a22      	cmp	r2, #34	; 0x22
 8001a72:	d110      	bne.n	8001a96 <I2C_ITError+0x3a>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a74:	6819      	ldr	r1, [r3, #0]
 8001a76:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8001a7a:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8001a7c:	6859      	ldr	r1, [r3, #4]
 8001a7e:	0509      	lsls	r1, r1, #20
 8001a80:	d404      	bmi.n	8001a8c <I2C_ITError+0x30>
 8001a82:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8001a84:	bf1c      	itt	ne
 8001a86:	2220      	movne	r2, #32
 8001a88:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a90:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8001a94:	e007      	b.n	8001aa6 <I2C_ITError+0x4a>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001a96:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8001a9a:	2928      	cmp	r1, #40	; 0x28
 8001a9c:	d1ee      	bne.n	8001a7c <I2C_ITError+0x20>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001aa2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001aac:	d04c      	beq.n	8001b48 <I2C_ITError+0xec>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001aae:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001ab0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001ab2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ab6:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001ab8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <I2C_ITError+0x13c>)
 8001ac0:	d028      	beq.n	8001b14 <I2C_ITError+0xb8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001ac2:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001ac4:	f7ff fac0 	bl	8001048 <HAL_DMA_Abort_IT>
 8001ac8:	b150      	cbz	r0, 8001ae0 <I2C_ITError+0x84>
        __HAL_I2C_DISABLE(hi2c);
 8001aca:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001acc:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8001ace:	6813      	ldr	r3, [r2, #0]
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001ad6:	2320      	movs	r3, #32
 8001ad8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001adc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001ade:	4798      	blx	r3
  CurrentState = hi2c->State;
 8001ae0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001ae4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ae6:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8001ae8:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001aea:	d512      	bpl.n	8001b12 <I2C_ITError+0xb6>
 8001aec:	2b28      	cmp	r3, #40	; 0x28
 8001aee:	d110      	bne.n	8001b12 <I2C_ITError+0xb6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001af0:	6822      	ldr	r2, [r4, #0]
 8001af2:	6853      	ldr	r3, [r2, #4]
 8001af4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001af8:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001afa:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <I2C_ITError+0x140>)
 8001afc:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8001afe:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8001b04:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8001b06:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001b0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001b0e:	f7ff ff64 	bl	80019da <HAL_I2C_ListenCpltCallback>
}
 8001b12:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001b14:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001b16:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001b18:	f7ff fa96 	bl	8001048 <HAL_DMA_Abort_IT>
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	d0df      	beq.n	8001ae0 <I2C_ITError+0x84>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	0652      	lsls	r2, r2, #25
 8001b26:	d505      	bpl.n	8001b34 <I2C_ITError+0xd8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b2c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b30:	3301      	adds	r3, #1
 8001b32:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8001b34:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001b36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8001b38:	6813      	ldr	r3, [r2, #0]
 8001b3a:	f023 0301 	bic.w	r3, r3, #1
 8001b3e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001b40:	2320      	movs	r3, #32
 8001b42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001b46:	e7c9      	b.n	8001adc <I2C_ITError+0x80>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001b48:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001b4c:	2960      	cmp	r1, #96	; 0x60
 8001b4e:	d115      	bne.n	8001b7c <I2C_ITError+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 8001b50:	2120      	movs	r1, #32
 8001b52:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b56:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	0650      	lsls	r0, r2, #25
 8001b5c:	d505      	bpl.n	8001b6a <I2C_ITError+0x10e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b62:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b66:	3301      	adds	r3, #1
 8001b68:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8001b6a:	6822      	ldr	r2, [r4, #0]
 8001b6c:	6813      	ldr	r3, [r2, #0]
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001b74:	4620      	mov	r0, r4
 8001b76:	f7ff ff34 	bl	80019e2 <HAL_I2C_AbortCpltCallback>
 8001b7a:	e7b1      	b.n	8001ae0 <I2C_ITError+0x84>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	0651      	lsls	r1, r2, #25
 8001b80:	d505      	bpl.n	8001b8e <I2C_ITError+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b86:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f7ff ff26 	bl	80019e0 <HAL_I2C_ErrorCallback>
 8001b94:	e7a4      	b.n	8001ae0 <I2C_ITError+0x84>
 8001b96:	bf00      	nop
 8001b98:	080019e5 	.word	0x080019e5
 8001b9c:	ffff0000 	.word	0xffff0000

08001ba0 <HAL_I2C_EV_IRQHandler>:
{
 8001ba0:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001ba2:	6803      	ldr	r3, [r0, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ba6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ba8:	f890 503e 	ldrb.w	r5, [r0, #62]	; 0x3e
{
 8001bac:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bae:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001bb2:	2d10      	cmp	r5, #16
{
 8001bb4:	b08c      	sub	sp, #48	; 0x30
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001bb6:	b2ee      	uxtb	r6, r5
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bb8:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001bba:	d002      	beq.n	8001bc2 <HAL_I2C_EV_IRQHandler+0x22>
 8001bbc:	2e40      	cmp	r6, #64	; 0x40
 8001bbe:	f040 82ae 	bne.w	800211e <HAL_I2C_EV_IRQHandler+0x57e>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001bc2:	699d      	ldr	r5, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001bc4:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001bc6:	07c6      	lsls	r6, r0, #31
 8001bc8:	d407      	bmi.n	8001bda <HAL_I2C_EV_IRQHandler+0x3a>
 8001bca:	f5b1 0f2a 	cmp.w	r1, #11141120	; 0xaa0000
 8001bce:	d002      	beq.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
 8001bd0:	f1b1 4f2a 	cmp.w	r1, #2852126720	; 0xaa000000
 8001bd4:	d152      	bne.n	8001c7c <HAL_I2C_EV_IRQHandler+0xdc>
}
 8001bd6:	b00c      	add	sp, #48	; 0x30
 8001bd8:	bd70      	pop	{r4, r5, r6, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bda:	0591      	lsls	r1, r2, #22
 8001bdc:	d54e      	bpl.n	8001c7c <HAL_I2C_EV_IRQHandler+0xdc>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8001bde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001be0:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8001be4:	d10c      	bne.n	8001c00 <HAL_I2C_EV_IRQHandler+0x60>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8001be6:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001be8:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001bea:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001bee:	2a40      	cmp	r2, #64	; 0x40
 8001bf0:	d111      	bne.n	8001c16 <HAL_I2C_EV_IRQHandler+0x76>
    if (hi2c->EventCount == 0U)
 8001bf2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001bf4:	b952      	cbnz	r2, 8001c0c <HAL_I2C_EV_IRQHandler+0x6c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001bf6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001bf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001bfc:	611a      	str	r2, [r3, #16]
 8001bfe:	e7ea      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8001c00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c02:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8001c06:	d1f0      	bne.n	8001bea <HAL_I2C_EV_IRQHandler+0x4a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001c08:	2208      	movs	r2, #8
 8001c0a:	e7ed      	b.n	8001be8 <HAL_I2C_EV_IRQHandler+0x48>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001c0c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	e7f2      	b.n	8001bfc <HAL_I2C_EV_IRQHandler+0x5c>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c16:	6922      	ldr	r2, [r4, #16]
 8001c18:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001c1c:	d11b      	bne.n	8001c56 <HAL_I2C_EV_IRQHandler+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c1e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001c22:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001c24:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c26:	d112      	bne.n	8001c4e <HAL_I2C_EV_IRQHandler+0xae>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001c28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001c2c:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001c2e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001c30:	b912      	cbnz	r2, 8001c38 <HAL_I2C_EV_IRQHandler+0x98>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001c32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001c34:	2900      	cmp	r1, #0
 8001c36:	d0ce      	beq.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001c38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c3a:	b91a      	cbnz	r2, 8001c44 <HAL_I2C_EV_IRQHandler+0xa4>
 8001c3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001c3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c40:	2a00      	cmp	r2, #0
 8001c42:	d0c8      	beq.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	e7c3      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	e7ea      	b.n	8001c2c <HAL_I2C_EV_IRQHandler+0x8c>
      if (hi2c->EventCount == 0U)
 8001c56:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001c58:	b932      	cbnz	r2, 8001c68 <HAL_I2C_EV_IRQHandler+0xc8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001c5a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001c5c:	11d2      	asrs	r2, r2, #7
 8001c5e:	f002 0206 	and.w	r2, r2, #6
 8001c62:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8001c66:	e7c9      	b.n	8001bfc <HAL_I2C_EV_IRQHandler+0x5c>
      else if (hi2c->EventCount == 1U)
 8001c68:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001c6a:	2a01      	cmp	r2, #1
 8001c6c:	d1b3      	bne.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001c6e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001c70:	11d2      	asrs	r2, r2, #7
 8001c72:	f002 0206 	and.w	r2, r2, #6
 8001c76:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8001c7a:	e7bf      	b.n	8001bfc <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c7c:	0706      	lsls	r6, r0, #28
 8001c7e:	d503      	bpl.n	8001c88 <HAL_I2C_EV_IRQHandler+0xe8>
 8001c80:	0591      	lsls	r1, r2, #22
 8001c82:	d501      	bpl.n	8001c88 <HAL_I2C_EV_IRQHandler+0xe8>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001c84:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001c86:	e7e4      	b.n	8001c52 <HAL_I2C_EV_IRQHandler+0xb2>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c88:	0786      	lsls	r6, r0, #30
 8001c8a:	f140 80dd 	bpl.w	8001e48 <HAL_I2C_EV_IRQHandler+0x2a8>
 8001c8e:	0591      	lsls	r1, r2, #22
 8001c90:	f140 80da 	bpl.w	8001e48 <HAL_I2C_EV_IRQHandler+0x2a8>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001c94:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001c98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001c9a:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c9c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001ca0:	2822      	cmp	r0, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001ca2:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ca4:	f040 80c8 	bne.w	8001e38 <HAL_I2C_EV_IRQHandler+0x298>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001ca8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001caa:	b940      	cbnz	r0, 8001cbe <HAL_I2C_EV_IRQHandler+0x11e>
 8001cac:	2940      	cmp	r1, #64	; 0x40
 8001cae:	d106      	bne.n	8001cbe <HAL_I2C_EV_IRQHandler+0x11e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cb0:	9001      	str	r0, [sp, #4]
 8001cb2:	695a      	ldr	r2, [r3, #20]
 8001cb4:	9201      	str	r2, [sp, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	9b01      	ldr	r3, [sp, #4]
 8001cbc:	e78b      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001cbe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001cc0:	b981      	cbnz	r1, 8001ce4 <HAL_I2C_EV_IRQHandler+0x144>
 8001cc2:	6920      	ldr	r0, [r4, #16]
 8001cc4:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_I2C_EV_IRQHandler+0x144>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cca:	9102      	str	r1, [sp, #8]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	9202      	str	r2, [sp, #8]
 8001cd0:	699a      	ldr	r2, [r3, #24]
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cdc:	601a      	str	r2, [r3, #0]
            hi2c->EventCount++;
 8001cde:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	e028      	b.n	8001d36 <HAL_I2C_EV_IRQHandler+0x196>
      if (hi2c->XferCount == 0U)
 8001ce4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001ce6:	b289      	uxth	r1, r1
 8001ce8:	b951      	cbnz	r1, 8001d00 <HAL_I2C_EV_IRQHandler+0x160>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cea:	9103      	str	r1, [sp, #12]
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	9203      	str	r2, [sp, #12]
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	9203      	str	r2, [sp, #12]
 8001cf4:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	e019      	b.n	8001d34 <HAL_I2C_EV_IRQHandler+0x194>
      else if (hi2c->XferCount == 1U)
 8001d00:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001d02:	b289      	uxth	r1, r1
 8001d04:	2901      	cmp	r1, #1
 8001d06:	d14a      	bne.n	8001d9e <HAL_I2C_EV_IRQHandler+0x1fe>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001d08:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001d0c:	d11c      	bne.n	8001d48 <HAL_I2C_EV_IRQHandler+0x1a8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d14:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001d1c:	d00d      	beq.n	8001d3a <HAL_I2C_EV_IRQHandler+0x19a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d24:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d26:	2200      	movs	r2, #0
 8001d28:	9204      	str	r2, [sp, #16]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	9204      	str	r2, [sp, #16]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	9304      	str	r3, [sp, #16]
 8001d32:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	6523      	str	r3, [r4, #80]	; 0x50
 8001d38:	e74d      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d3a:	9205      	str	r2, [sp, #20]
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	9205      	str	r2, [sp, #20]
 8001d40:	699a      	ldr	r2, [r3, #24]
 8001d42:	9205      	str	r2, [sp, #20]
 8001d44:	9a05      	ldr	r2, [sp, #20]
 8001d46:	e7d6      	b.n	8001cf6 <HAL_I2C_EV_IRQHandler+0x156>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001d48:	2a08      	cmp	r2, #8
 8001d4a:	d01c      	beq.n	8001d86 <HAL_I2C_EV_IRQHandler+0x1e6>
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d01a      	beq.n	8001d86 <HAL_I2C_EV_IRQHandler+0x1e6>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001d50:	2d12      	cmp	r5, #18
 8001d52:	d10d      	bne.n	8001d70 <HAL_I2C_EV_IRQHandler+0x1d0>
 8001d54:	2a01      	cmp	r2, #1
 8001d56:	d116      	bne.n	8001d86 <HAL_I2C_EV_IRQHandler+0x1e6>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d5e:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d60:	2200      	movs	r2, #0
 8001d62:	9206      	str	r2, [sp, #24]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	9206      	str	r2, [sp, #24]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	9306      	str	r3, [sp, #24]
 8001d6c:	9b06      	ldr	r3, [sp, #24]
 8001d6e:	e7e1      	b.n	8001d34 <HAL_I2C_EV_IRQHandler+0x194>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001d70:	2a10      	cmp	r2, #16
 8001d72:	d8f1      	bhi.n	8001d58 <HAL_I2C_EV_IRQHandler+0x1b8>
 8001d74:	499f      	ldr	r1, [pc, #636]	; (8001ff4 <HAL_I2C_EV_IRQHandler+0x454>)
 8001d76:	fa21 f202 	lsr.w	r2, r1, r2
 8001d7a:	07d2      	lsls	r2, r2, #31
 8001d7c:	d5ec      	bpl.n	8001d58 <HAL_I2C_EV_IRQHandler+0x1b8>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d84:	e7eb      	b.n	8001d5e <HAL_I2C_EV_IRQHandler+0x1be>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8c:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	9207      	str	r2, [sp, #28]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	9207      	str	r2, [sp, #28]
 8001d96:	699a      	ldr	r2, [r3, #24]
 8001d98:	9207      	str	r2, [sp, #28]
 8001d9a:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9c:	e7ab      	b.n	8001cf6 <HAL_I2C_EV_IRQHandler+0x156>
      else if (hi2c->XferCount == 2U)
 8001d9e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001da0:	b289      	uxth	r1, r1
 8001da2:	2902      	cmp	r1, #2
 8001da4:	d12a      	bne.n	8001dfc <HAL_I2C_EV_IRQHandler+0x25c>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001da6:	2a10      	cmp	r2, #16
 8001da8:	d803      	bhi.n	8001db2 <HAL_I2C_EV_IRQHandler+0x212>
 8001daa:	4992      	ldr	r1, [pc, #584]	; (8001ff4 <HAL_I2C_EV_IRQHandler+0x454>)
 8001dac:	40d1      	lsrs	r1, r2
 8001dae:	07ce      	lsls	r6, r1, #31
 8001db0:	d420      	bmi.n	8001df4 <HAL_I2C_EV_IRQHandler+0x254>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db2:	6819      	ldr	r1, [r3, #0]
 8001db4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001db8:	6019      	str	r1, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dba:	6819      	ldr	r1, [r3, #0]
 8001dbc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dc0:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001dc2:	6859      	ldr	r1, [r3, #4]
 8001dc4:	050d      	lsls	r5, r1, #20
 8001dc6:	d50d      	bpl.n	8001de4 <HAL_I2C_EV_IRQHandler+0x244>
 8001dc8:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001dcc:	d006      	beq.n	8001ddc <HAL_I2C_EV_IRQHandler+0x23c>
 8001dce:	1e51      	subs	r1, r2, #1
 8001dd0:	291f      	cmp	r1, #31
 8001dd2:	d807      	bhi.n	8001de4 <HAL_I2C_EV_IRQHandler+0x244>
 8001dd4:	4a88      	ldr	r2, [pc, #544]	; (8001ff8 <HAL_I2C_EV_IRQHandler+0x458>)
 8001dd6:	40ca      	lsrs	r2, r1
 8001dd8:	07d0      	lsls	r0, r2, #31
 8001dda:	d503      	bpl.n	8001de4 <HAL_I2C_EV_IRQHandler+0x244>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001de2:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001de4:	2200      	movs	r2, #0
 8001de6:	9208      	str	r2, [sp, #32]
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	9208      	str	r2, [sp, #32]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	9308      	str	r3, [sp, #32]
 8001df0:	9b08      	ldr	r3, [sp, #32]
 8001df2:	e79f      	b.n	8001d34 <HAL_I2C_EV_IRQHandler+0x194>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001df4:	6819      	ldr	r1, [r3, #0]
 8001df6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001dfa:	e7e1      	b.n	8001dc0 <HAL_I2C_EV_IRQHandler+0x220>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001e02:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001e04:	6859      	ldr	r1, [r3, #4]
 8001e06:	0509      	lsls	r1, r1, #20
 8001e08:	d50e      	bpl.n	8001e28 <HAL_I2C_EV_IRQHandler+0x288>
 8001e0a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001e0e:	d007      	beq.n	8001e20 <HAL_I2C_EV_IRQHandler+0x280>
 8001e10:	3a01      	subs	r2, #1
 8001e12:	2a1f      	cmp	r2, #31
 8001e14:	d808      	bhi.n	8001e28 <HAL_I2C_EV_IRQHandler+0x288>
 8001e16:	4978      	ldr	r1, [pc, #480]	; (8001ff8 <HAL_I2C_EV_IRQHandler+0x458>)
 8001e18:	fa21 f202 	lsr.w	r2, r1, r2
 8001e1c:	07d6      	lsls	r6, r2, #31
 8001e1e:	d503      	bpl.n	8001e28 <HAL_I2C_EV_IRQHandler+0x288>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e26:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	9209      	str	r2, [sp, #36]	; 0x24
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	9209      	str	r2, [sp, #36]	; 0x24
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	9309      	str	r3, [sp, #36]	; 0x24
 8001e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e36:	e77d      	b.n	8001d34 <HAL_I2C_EV_IRQHandler+0x194>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	920a      	str	r2, [sp, #40]	; 0x28
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	920a      	str	r2, [sp, #40]	; 0x28
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	930a      	str	r3, [sp, #40]	; 0x28
 8001e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e46:	e6c6      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001e48:	076d      	lsls	r5, r5, #29
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e4a:	6859      	ldr	r1, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001e4c:	f140 80a8 	bpl.w	8001fa0 <HAL_I2C_EV_IRQHandler+0x400>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e50:	050e      	lsls	r6, r1, #20
 8001e52:	f53f aec0 	bmi.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e56:	0605      	lsls	r5, r0, #24
 8001e58:	f3c0 0180 	ubfx	r1, r0, #2, #1
 8001e5c:	d569      	bpl.n	8001f32 <HAL_I2C_EV_IRQHandler+0x392>
 8001e5e:	0550      	lsls	r0, r2, #21
 8001e60:	d567      	bpl.n	8001f32 <HAL_I2C_EV_IRQHandler+0x392>
 8001e62:	2900      	cmp	r1, #0
 8001e64:	d168      	bne.n	8001f38 <HAL_I2C_EV_IRQHandler+0x398>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e66:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e6a:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e6c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e72:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e74:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e76:	b9c5      	cbnz	r5, 8001eaa <HAL_I2C_EV_IRQHandler+0x30a>
 8001e78:	2a21      	cmp	r2, #33	; 0x21
 8001e7a:	d118      	bne.n	8001eae <HAL_I2C_EV_IRQHandler+0x30e>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e7c:	2808      	cmp	r0, #8
 8001e7e:	d078      	beq.n	8001f72 <HAL_I2C_EV_IRQHandler+0x3d2>
 8001e80:	2820      	cmp	r0, #32
 8001e82:	d076      	beq.n	8001f72 <HAL_I2C_EV_IRQHandler+0x3d2>
 8001e84:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8001e88:	d073      	beq.n	8001f72 <HAL_I2C_EV_IRQHandler+0x3d2>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e90:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e92:	2311      	movs	r3, #17
 8001e94:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f7ff fd94 	bl	80019d0 <HAL_I2C_MasterTxCpltCallback>
 8001ea8:	e695      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001eaa:	2a21      	cmp	r2, #33	; 0x21
 8001eac:	d005      	beq.n	8001eba <HAL_I2C_EV_IRQHandler+0x31a>
 8001eae:	2940      	cmp	r1, #64	; 0x40
 8001eb0:	f47f ae91 	bne.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001eb4:	2a22      	cmp	r2, #34	; 0x22
 8001eb6:	f47f ae8e 	bne.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
    if (hi2c->XferCount == 0U)
 8001eba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ebc:	b292      	uxth	r2, r2
 8001ebe:	b91a      	cbnz	r2, 8001ec8 <HAL_I2C_EV_IRQHandler+0x328>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec6:	e6c0      	b.n	8001c4a <HAL_I2C_EV_IRQHandler+0xaa>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ec8:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001ecc:	2a40      	cmp	r2, #64	; 0x40
 8001ece:	d126      	bne.n	8001f1e <HAL_I2C_EV_IRQHandler+0x37e>
        if (hi2c->EventCount == 0U)
 8001ed0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001ed2:	b962      	cbnz	r2, 8001eee <HAL_I2C_EV_IRQHandler+0x34e>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001ed4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001ed6:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ed8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001eda:	d104      	bne.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x346>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8001ee0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	e727      	b.n	8001d36 <HAL_I2C_EV_IRQHandler+0x196>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001ee6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001eea:	611a      	str	r2, [r3, #16]
 8001eec:	e6f7      	b.n	8001cde <HAL_I2C_EV_IRQHandler+0x13e>
        else if (hi2c->EventCount == 1U)
 8001eee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001ef0:	2a01      	cmp	r2, #1
 8001ef2:	d102      	bne.n	8001efa <HAL_I2C_EV_IRQHandler+0x35a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ef4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	e7f7      	b.n	8001eea <HAL_I2C_EV_IRQHandler+0x34a>
        else if (hi2c->EventCount == 2U)
 8001efa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001efc:	2a02      	cmp	r2, #2
 8001efe:	f47f ae6a 	bne.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f02:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001f06:	2a22      	cmp	r2, #34	; 0x22
 8001f08:	d104      	bne.n	8001f14 <HAL_I2C_EV_IRQHandler+0x374>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e660      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f14:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001f18:	2a21      	cmp	r2, #33	; 0x21
 8001f1a:	f47f ae5c 	bne.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f20:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001f24:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8001f26:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001f28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 8001f30:	e651      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f32:	2900      	cmp	r1, #0
 8001f34:	f43f ae4f 	beq.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
 8001f38:	0592      	lsls	r2, r2, #22
 8001f3a:	f57f ae4c 	bpl.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f3e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f40:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001f44:	2a21      	cmp	r2, #33	; 0x21
 8001f46:	f47f ae46 	bne.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
    if (hi2c->XferCount != 0U)
 8001f4a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001f4c:	b292      	uxth	r2, r2
 8001f4e:	2a00      	cmp	r2, #0
 8001f50:	d1e5      	bne.n	8001f1e <HAL_I2C_EV_IRQHandler+0x37e>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f52:	2908      	cmp	r1, #8
 8001f54:	d00d      	beq.n	8001f72 <HAL_I2C_EV_IRQHandler+0x3d2>
 8001f56:	2920      	cmp	r1, #32
 8001f58:	d00b      	beq.n	8001f72 <HAL_I2C_EV_IRQHandler+0x3d2>
 8001f5a:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001f5e:	d008      	beq.n	8001f72 <HAL_I2C_EV_IRQHandler+0x3d2>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f60:	6859      	ldr	r1, [r3, #4]
 8001f62:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8001f66:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f68:	2311      	movs	r3, #17
 8001f6a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8001f70:	e794      	b.n	8001e9c <HAL_I2C_EV_IRQHandler+0x2fc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f78:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f80:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f82:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001f84:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f86:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001f88:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f8c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f94:	2a40      	cmp	r2, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001f96:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f98:	d184      	bne.n	8001ea4 <HAL_I2C_EV_IRQHandler+0x304>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001f9a:	f7ff fd1f 	bl	80019dc <HAL_I2C_MemTxCpltCallback>
 8001f9e:	e61a      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001fa0:	050e      	lsls	r6, r1, #20
 8001fa2:	f53f ae18 	bmi.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fa6:	0645      	lsls	r5, r0, #25
 8001fa8:	f3c0 0180 	ubfx	r1, r0, #2, #1
 8001fac:	d54d      	bpl.n	800204a <HAL_I2C_EV_IRQHandler+0x4aa>
 8001fae:	0550      	lsls	r0, r2, #21
 8001fb0:	d54b      	bpl.n	800204a <HAL_I2C_EV_IRQHandler+0x4aa>
 8001fb2:	2900      	cmp	r1, #0
 8001fb4:	d14c      	bne.n	8002050 <HAL_I2C_EV_IRQHandler+0x4b0>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fb6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001fba:	2a22      	cmp	r2, #34	; 0x22
 8001fbc:	f47f ae0b 	bne.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
    tmp = hi2c->XferCount;
 8001fc0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001fc2:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8001fc4:	2a03      	cmp	r2, #3
 8001fc6:	d919      	bls.n	8001ffc <HAL_I2C_EV_IRQHandler+0x45c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fcc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001fd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8001fdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	f47f adf8 	bne.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fe6:	6822      	ldr	r2, [r4, #0]
 8001fe8:	6853      	ldr	r3, [r2, #4]
 8001fea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fee:	6053      	str	r3, [r2, #4]
 8001ff0:	e5f1      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
 8001ff2:	bf00      	nop
 8001ff4:	00010014 	.word	0x00010014
 8001ff8:	80008081 	.word	0x80008081
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001ffc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001ffe:	2802      	cmp	r0, #2
 8002000:	f43f ade9 	beq.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
 8002004:	2a01      	cmp	r2, #1
 8002006:	f63f ade6 	bhi.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002010:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002018:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800201e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002022:	3301      	adds	r3, #1
 8002024:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002026:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002028:	3b01      	subs	r3, #1
 800202a:	b29b      	uxth	r3, r3
 800202c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800202e:	2320      	movs	r3, #32
 8002030:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002034:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002038:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800203c:	2b40      	cmp	r3, #64	; 0x40
 800203e:	d168      	bne.n	8002112 <HAL_I2C_EV_IRQHandler+0x572>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002040:	6321      	str	r1, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002042:	4620      	mov	r0, r4
 8002044:	f7ff fccb 	bl	80019de <HAL_I2C_MemRxCpltCallback>
 8002048:	e5c5      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800204a:	2900      	cmp	r1, #0
 800204c:	f43f adc3 	beq.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
 8002050:	0592      	lsls	r2, r2, #22
 8002052:	f57f adc0 	bpl.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002056:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8002058:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800205a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800205c:	b280      	uxth	r0, r0
 800205e:	2804      	cmp	r0, #4
 8002060:	d109      	bne.n	8002076 <HAL_I2C_EV_IRQHandler+0x4d6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002068:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800206e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002070:	3301      	adds	r3, #1
 8002072:	6263      	str	r3, [r4, #36]	; 0x24
 8002074:	e758      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x388>
  else if (hi2c->XferCount == 3U)
 8002076:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8002078:	b280      	uxth	r0, r0
 800207a:	2803      	cmp	r0, #3
 800207c:	d10c      	bne.n	8002098 <HAL_I2C_EV_IRQHandler+0x4f8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800207e:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002080:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002082:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8002086:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002088:	d0ef      	beq.n	800206a <HAL_I2C_EV_IRQHandler+0x4ca>
 800208a:	2a02      	cmp	r2, #2
 800208c:	d0ed      	beq.n	800206a <HAL_I2C_EV_IRQHandler+0x4ca>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002094:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002096:	e7e8      	b.n	800206a <HAL_I2C_EV_IRQHandler+0x4ca>
  else if (hi2c->XferCount == 2U)
 8002098:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800209a:	b280      	uxth	r0, r0
 800209c:	2802      	cmp	r0, #2
 800209e:	d1e4      	bne.n	800206a <HAL_I2C_EV_IRQHandler+0x4ca>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80020a0:	2a01      	cmp	r2, #1
 80020a2:	d001      	beq.n	80020a8 <HAL_I2C_EV_IRQHandler+0x508>
 80020a4:	2a10      	cmp	r2, #16
 80020a6:	d128      	bne.n	80020fa <HAL_I2C_EV_IRQHandler+0x55a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80020b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020b6:	1c53      	adds	r3, r2, #1
 80020b8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80020ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29b      	uxth	r3, r3
 80020c0:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c2:	6823      	ldr	r3, [r4, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 80020c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80020ca:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 80020cc:	3301      	adds	r3, #1
 80020ce:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80020d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80020d8:	6853      	ldr	r3, [r2, #4]
 80020da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020de:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	2320      	movs	r3, #32
 80020e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020e6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80020ea:	2b40      	cmp	r3, #64	; 0x40
 80020ec:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020f4:	d10d      	bne.n	8002112 <HAL_I2C_EV_IRQHandler+0x572>
      hi2c->PreviousState = I2C_STATE_NONE;
 80020f6:	6323      	str	r3, [r4, #48]	; 0x30
 80020f8:	e7a3      	b.n	8002042 <HAL_I2C_EV_IRQHandler+0x4a2>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80020fa:	2a04      	cmp	r2, #4
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_EV_IRQHandler+0x562>
 80020fe:	2a02      	cmp	r2, #2
 8002100:	d103      	bne.n	800210a <HAL_I2C_EV_IRQHandler+0x56a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002108:	e7d1      	b.n	80020ae <HAL_I2C_EV_IRQHandler+0x50e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002110:	e7cd      	b.n	80020ae <HAL_I2C_EV_IRQHandler+0x50e>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002112:	2312      	movs	r3, #18
 8002114:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002116:	4620      	mov	r0, r4
 8002118:	f7ff fc5b 	bl	80019d2 <HAL_I2C_MasterRxCpltCallback>
 800211c:	e55b      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800211e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002120:	b311      	cbz	r1, 8002168 <HAL_I2C_EV_IRQHandler+0x5c8>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002122:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8002124:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002126:	078e      	lsls	r6, r1, #30
 8002128:	d528      	bpl.n	800217c <HAL_I2C_EV_IRQHandler+0x5dc>
 800212a:	0596      	lsls	r6, r2, #22
 800212c:	d526      	bpl.n	800217c <HAL_I2C_EV_IRQHandler+0x5dc>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800212e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002130:	b102      	cbz	r2, 8002134 <HAL_I2C_EV_IRQHandler+0x594>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002132:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002134:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002138:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800213c:	2a28      	cmp	r2, #40	; 0x28
 800213e:	d116      	bne.n	800216e <HAL_I2C_EV_IRQHandler+0x5ce>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002146:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002148:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800214c:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 800214e:	f04f 0300 	mov.w	r3, #0
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002152:	bf54      	ite	pl
 8002154:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002156:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8002158:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800215c:	f001 0101 	and.w	r1, r1, #1
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002160:	4620      	mov	r0, r4
 8002162:	f7ff fc39 	bl	80019d8 <HAL_I2C_AddrCallback>
 8002166:	e536      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002168:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800216a:	6959      	ldr	r1, [r3, #20]
 800216c:	e7db      	b.n	8002126 <HAL_I2C_EV_IRQHandler+0x586>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800216e:	f06f 0202 	mvn.w	r2, #2
 8002172:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002174:	2300      	movs	r3, #0
 8002176:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800217a:	e52c      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800217c:	06ce      	lsls	r6, r1, #27
 800217e:	f140 80b1 	bpl.w	80022e4 <HAL_I2C_EV_IRQHandler+0x744>
 8002182:	0595      	lsls	r5, r2, #22
 8002184:	f140 80ae 	bpl.w	80022e4 <HAL_I2C_EV_IRQHandler+0x744>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002188:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002192:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002194:	2200      	movs	r2, #0
 8002196:	920b      	str	r2, [sp, #44]	; 0x2c
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	920b      	str	r2, [sp, #44]	; 0x2c
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ac:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	0512      	lsls	r2, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021b2:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80021b4:	d520      	bpl.n	80021f8 <HAL_I2C_EV_IRQHandler+0x658>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80021b6:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 80021ba:	2a22      	cmp	r2, #34	; 0x22
 80021bc:	d14a      	bne.n	8002254 <HAL_I2C_EV_IRQHandler+0x6b4>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80021be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80021c0:	6802      	ldr	r2, [r0, #0]
 80021c2:	6852      	ldr	r2, [r2, #4]
 80021c4:	b292      	uxth	r2, r2
 80021c6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80021c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80021ca:	b292      	uxth	r2, r2
 80021cc:	b11a      	cbz	r2, 80021d6 <HAL_I2C_EV_IRQHandler+0x636>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021d0:	f042 0204 	orr.w	r2, r2, #4
 80021d4:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021dc:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80021de:	f7fe ff45 	bl	800106c <HAL_DMA_GetState>
 80021e2:	2801      	cmp	r0, #1
 80021e4:	d008      	beq.n	80021f8 <HAL_I2C_EV_IRQHandler+0x658>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80021e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80021e8:	4b79      	ldr	r3, [pc, #484]	; (80023d0 <HAL_I2C_EV_IRQHandler+0x830>)
 80021ea:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80021ec:	f7fe ff2c 	bl	8001048 <HAL_DMA_Abort_IT>
 80021f0:	b110      	cbz	r0, 80021f8 <HAL_I2C_EV_IRQHandler+0x658>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80021f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80021f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80021f6:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80021f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	b313      	cbz	r3, 8002244 <HAL_I2C_EV_IRQHandler+0x6a4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	0756      	lsls	r6, r2, #29
 8002204:	d509      	bpl.n	800221a <HAL_I2C_EV_IRQHandler+0x67a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800220a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800220c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800220e:	3301      	adds	r3, #1
 8002210:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002212:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002214:	3b01      	subs	r3, #1
 8002216:	b29b      	uxth	r3, r3
 8002218:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	0650      	lsls	r0, r2, #25
 8002220:	d509      	bpl.n	8002236 <HAL_I2C_EV_IRQHandler+0x696>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002226:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800222a:	3301      	adds	r3, #1
 800222c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800222e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002230:	3b01      	subs	r3, #1
 8002232:	b29b      	uxth	r3, r3
 8002234:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8002236:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	b11b      	cbz	r3, 8002244 <HAL_I2C_EV_IRQHandler+0x6a4>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800223c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002244:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002246:	b313      	cbz	r3, 800228e <HAL_I2C_EV_IRQHandler+0x6ee>
    I2C_ITError(hi2c);
 8002248:	4620      	mov	r0, r4
}
 800224a:	b00c      	add	sp, #48	; 0x30
 800224c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 8002250:	f7ff bc04 	b.w	8001a5c <I2C_ITError>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002254:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002256:	6802      	ldr	r2, [r0, #0]
 8002258:	6852      	ldr	r2, [r2, #4]
 800225a:	b292      	uxth	r2, r2
 800225c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800225e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002260:	b292      	uxth	r2, r2
 8002262:	b11a      	cbz	r2, 800226c <HAL_I2C_EV_IRQHandler+0x6cc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002264:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002266:	f042 0204 	orr.w	r2, r2, #4
 800226a:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002272:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002274:	f7fe fefa 	bl	800106c <HAL_DMA_GetState>
 8002278:	2801      	cmp	r0, #1
 800227a:	d0bd      	beq.n	80021f8 <HAL_I2C_EV_IRQHandler+0x658>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800227c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800227e:	4b54      	ldr	r3, [pc, #336]	; (80023d0 <HAL_I2C_EV_IRQHandler+0x830>)
 8002280:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002282:	f7fe fee1 	bl	8001048 <HAL_DMA_Abort_IT>
 8002286:	2800      	cmp	r0, #0
 8002288:	d0b6      	beq.n	80021f8 <HAL_I2C_EV_IRQHandler+0x658>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800228a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800228c:	e7b2      	b.n	80021f4 <HAL_I2C_EV_IRQHandler+0x654>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800228e:	2d2a      	cmp	r5, #42	; 0x2a
 8002290:	d106      	bne.n	80022a0 <HAL_I2C_EV_IRQHandler+0x700>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002292:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002294:	2328      	movs	r3, #40	; 0x28
 8002296:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800229a:	4620      	mov	r0, r4
 800229c:	f7ff fb9b 	bl	80019d6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80022a0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80022a4:	2b28      	cmp	r3, #40	; 0x28
 80022a6:	d10c      	bne.n	80022c2 <HAL_I2C_EV_IRQHandler+0x722>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022a8:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <HAL_I2C_EV_IRQHandler+0x834>)
 80022aa:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 80022ac:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 80022b2:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80022bc:	f7ff fb8d 	bl	80019da <HAL_I2C_ListenCpltCallback>
 80022c0:	e489      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80022c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022c4:	2b22      	cmp	r3, #34	; 0x22
 80022c6:	d002      	beq.n	80022ce <HAL_I2C_EV_IRQHandler+0x72e>
 80022c8:	2d22      	cmp	r5, #34	; 0x22
 80022ca:	f47f ac84 	bne.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
        hi2c->PreviousState = I2C_STATE_NONE;
 80022ce:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80022d0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80022d2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80022d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80022dc:	4620      	mov	r0, r4
 80022de:	f7ff fb7a 	bl	80019d6 <HAL_I2C_SlaveRxCpltCallback>
 80022e2:	e478      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80022e4:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 80022e8:	2821      	cmp	r0, #33	; 0x21
 80022ea:	f3c1 0580 	ubfx	r5, r1, #2, #1
 80022ee:	d135      	bne.n	800235c <HAL_I2C_EV_IRQHandler+0x7bc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022f0:	0609      	lsls	r1, r1, #24
 80022f2:	d527      	bpl.n	8002344 <HAL_I2C_EV_IRQHandler+0x7a4>
 80022f4:	0556      	lsls	r6, r2, #21
 80022f6:	d525      	bpl.n	8002344 <HAL_I2C_EV_IRQHandler+0x7a4>
 80022f8:	bb3d      	cbnz	r5, 800234a <HAL_I2C_EV_IRQHandler+0x7aa>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022fa:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80022fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002300:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002302:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8002304:	2a00      	cmp	r2, #0
 8002306:	f43f ac66 	beq.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800230a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800230c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002310:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8002312:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002314:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002316:	3a01      	subs	r2, #1
 8002318:	b292      	uxth	r2, r2
 800231a:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800231c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800231e:	b292      	uxth	r2, r2
 8002320:	2a00      	cmp	r2, #0
 8002322:	f47f ac58 	bne.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
 8002326:	2929      	cmp	r1, #41	; 0x29
 8002328:	f47f ac55 	bne.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002332:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002334:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002336:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002338:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800233c:	4620      	mov	r0, r4
 800233e:	f7ff fb49 	bl	80019d4 <HAL_I2C_SlaveTxCpltCallback>
 8002342:	e448      	b.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002344:	2d00      	cmp	r5, #0
 8002346:	f43f ac46 	beq.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
 800234a:	0595      	lsls	r5, r2, #22
 800234c:	f57f ac43 	bpl.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
  if (hi2c->XferCount != 0U)
 8002350:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002352:	b292      	uxth	r2, r2
 8002354:	2a00      	cmp	r2, #0
 8002356:	f43f ac3e 	beq.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
 800235a:	e5e0      	b.n	8001f1e <HAL_I2C_EV_IRQHandler+0x37e>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800235c:	0648      	lsls	r0, r1, #25
 800235e:	d527      	bpl.n	80023b0 <HAL_I2C_EV_IRQHandler+0x810>
 8002360:	0551      	lsls	r1, r2, #21
 8002362:	d525      	bpl.n	80023b0 <HAL_I2C_EV_IRQHandler+0x810>
 8002364:	bb3d      	cbnz	r5, 80023b6 <HAL_I2C_EV_IRQHandler+0x816>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002366:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 800236a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800236c:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800236e:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8002370:	2900      	cmp	r1, #0
 8002372:	f43f ac30 	beq.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002376:	6919      	ldr	r1, [r3, #16]
 8002378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800237a:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 800237c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800237e:	3301      	adds	r3, #1
 8002380:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002382:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002384:	3b01      	subs	r3, #1
 8002386:	b29b      	uxth	r3, r3
 8002388:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800238a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	f47f ac21 	bne.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
 8002394:	2a2a      	cmp	r2, #42	; 0x2a
 8002396:	f47f ac1e 	bne.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800239a:	6822      	ldr	r2, [r4, #0]
 800239c:	6853      	ldr	r3, [r2, #4]
 800239e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023a2:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023a4:	2322      	movs	r3, #34	; 0x22
 80023a6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80023a8:	2328      	movs	r3, #40	; 0x28
 80023aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80023ae:	e795      	b.n	80022dc <HAL_I2C_EV_IRQHandler+0x73c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	f43f ac10 	beq.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
 80023b6:	0592      	lsls	r2, r2, #22
 80023b8:	f57f ac0d 	bpl.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
  if (hi2c->XferCount != 0U)
 80023bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80023be:	b292      	uxth	r2, r2
 80023c0:	2a00      	cmp	r2, #0
 80023c2:	f43f ac08 	beq.w	8001bd6 <HAL_I2C_EV_IRQHandler+0x36>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023ca:	701a      	strb	r2, [r3, #0]
 80023cc:	e64f      	b.n	800206e <HAL_I2C_EV_IRQHandler+0x4ce>
 80023ce:	bf00      	nop
 80023d0:	080019e5 	.word	0x080019e5
 80023d4:	ffff0000 	.word	0xffff0000

080023d8 <HAL_I2C_ER_IRQHandler>:
{
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80023da:	6803      	ldr	r3, [r0, #0]
 80023dc:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80023de:	685e      	ldr	r6, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023e0:	05fa      	lsls	r2, r7, #23
{
 80023e2:	4604      	mov	r4, r0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023e4:	f3c7 2500 	ubfx	r5, r7, #8, #1
 80023e8:	d508      	bpl.n	80023fc <HAL_I2C_ER_IRQHandler+0x24>
 80023ea:	05f0      	lsls	r0, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023ec:	bf48      	it	mi
 80023ee:	f46f 7280 	mvnmi.w	r2, #256	; 0x100
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023f2:	f3c6 2500 	ubfx	r5, r6, #8, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023f6:	bf44      	itt	mi
 80023f8:	615a      	strmi	r2, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 80023fa:	2501      	movmi	r5, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023fc:	05b9      	lsls	r1, r7, #22
 80023fe:	d506      	bpl.n	800240e <HAL_I2C_ER_IRQHandler+0x36>
 8002400:	05f2      	lsls	r2, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002402:	bf42      	ittt	mi
 8002404:	f46f 7200 	mvnmi.w	r2, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8002408:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800240c:	615a      	strmi	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800240e:	0578      	lsls	r0, r7, #21
 8002410:	d537      	bpl.n	8002482 <HAL_I2C_ER_IRQHandler+0xaa>
 8002412:	05f1      	lsls	r1, r6, #23
 8002414:	d535      	bpl.n	8002482 <HAL_I2C_ER_IRQHandler+0xaa>
    tmp1 = hi2c->Mode;
 8002416:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 800241a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 800241c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8002420:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002422:	f1bc 0f20 	cmp.w	ip, #32
    tmp2 = hi2c->XferCount;
 8002426:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 8002428:	b2d2      	uxtb	r2, r2
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800242a:	d15a      	bne.n	80024e2 <HAL_I2C_ER_IRQHandler+0x10a>
 800242c:	2900      	cmp	r1, #0
 800242e:	d158      	bne.n	80024e2 <HAL_I2C_ER_IRQHandler+0x10a>
 8002430:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 8002434:	2921      	cmp	r1, #33	; 0x21
 8002436:	d003      	beq.n	8002440 <HAL_I2C_ER_IRQHandler+0x68>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002438:	2a28      	cmp	r2, #40	; 0x28
 800243a:	d152      	bne.n	80024e2 <HAL_I2C_ER_IRQHandler+0x10a>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800243c:	2821      	cmp	r0, #33	; 0x21
 800243e:	d150      	bne.n	80024e2 <HAL_I2C_ER_IRQHandler+0x10a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002440:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002444:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002446:	2908      	cmp	r1, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002448:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800244a:	d001      	beq.n	8002450 <HAL_I2C_ER_IRQHandler+0x78>
 800244c:	2920      	cmp	r1, #32
 800244e:	d12a      	bne.n	80024a6 <HAL_I2C_ER_IRQHandler+0xce>
 8002450:	2a28      	cmp	r2, #40	; 0x28
 8002452:	d128      	bne.n	80024a6 <HAL_I2C_ER_IRQHandler+0xce>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002454:	4a2c      	ldr	r2, [pc, #176]	; (8002508 <HAL_I2C_ER_IRQHandler+0x130>)
 8002456:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800245e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002460:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002464:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800246c:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800246e:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002470:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002472:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002474:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8002476:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800247a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800247e:	f7ff faac 	bl	80019da <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002482:	053a      	lsls	r2, r7, #20
 8002484:	d53c      	bpl.n	8002500 <HAL_I2C_ER_IRQHandler+0x128>
 8002486:	05f3      	lsls	r3, r6, #23
 8002488:	d53a      	bpl.n	8002500 <HAL_I2C_ER_IRQHandler+0x128>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 8002490:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002494:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8002496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002498:	431d      	orrs	r5, r3
 800249a:	6425      	str	r5, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 800249c:	4620      	mov	r0, r4
}
 800249e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80024a2:	f7ff badb 	b.w	8001a5c <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80024a6:	2a21      	cmp	r2, #33	; 0x21
 80024a8:	d117      	bne.n	80024da <HAL_I2C_ER_IRQHandler+0x102>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80024aa:	4917      	ldr	r1, [pc, #92]	; (8002508 <HAL_I2C_ER_IRQHandler+0x130>)
 80024ac:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024ae:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80024b0:	2220      	movs	r2, #32
 80024b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80024b6:	2200      	movs	r2, #0
 80024b8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024c2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024c8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024d2:	4620      	mov	r0, r4
 80024d4:	f7ff fa7e 	bl	80019d4 <HAL_I2C_SlaveTxCpltCallback>
 80024d8:	e7d3      	b.n	8002482 <HAL_I2C_ER_IRQHandler+0xaa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024de:	615a      	str	r2, [r3, #20]
 80024e0:	e7cf      	b.n	8002482 <HAL_I2C_ER_IRQHandler+0xaa>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024e6:	615a      	str	r2, [r3, #20]
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 80024e8:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80024ec:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ee:	bf04      	itt	eq
 80024f0:	681a      	ldreq	r2, [r3, #0]
 80024f2:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
      error |= HAL_I2C_ERROR_AF;
 80024f6:	f045 0504 	orr.w	r5, r5, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fa:	bf08      	it	eq
 80024fc:	601a      	streq	r2, [r3, #0]
 80024fe:	e7c0      	b.n	8002482 <HAL_I2C_ER_IRQHandler+0xaa>
  if (error != HAL_I2C_ERROR_NONE)
 8002500:	2d00      	cmp	r5, #0
 8002502:	d1c8      	bne.n	8002496 <HAL_I2C_ER_IRQHandler+0xbe>
}
 8002504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002506:	bf00      	nop
 8002508:	ffff0000 	.word	0xffff0000

0800250c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002510:	4604      	mov	r4, r0
 8002512:	b918      	cbnz	r0, 800251c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002514:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002516:	b002      	add	sp, #8
 8002518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251c:	6803      	ldr	r3, [r0, #0]
 800251e:	07dd      	lsls	r5, r3, #31
 8002520:	d410      	bmi.n	8002544 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	0798      	lsls	r0, r3, #30
 8002526:	d45b      	bmi.n	80025e0 <HAL_RCC_OscConfig+0xd4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	071a      	lsls	r2, r3, #28
 800252c:	f100 809d 	bmi.w	800266a <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	075b      	lsls	r3, r3, #29
 8002534:	f100 80bb 	bmi.w	80026ae <HAL_RCC_OscConfig+0x1a2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002538:	69a2      	ldr	r2, [r4, #24]
 800253a:	2a00      	cmp	r2, #0
 800253c:	f040 811c 	bne.w	8002778 <HAL_RCC_OscConfig+0x26c>
  return HAL_OK;
 8002540:	2000      	movs	r0, #0
 8002542:	e7e8      	b.n	8002516 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002544:	4ba5      	ldr	r3, [pc, #660]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	f002 020c 	and.w	r2, r2, #12
 800254c:	2a04      	cmp	r2, #4
 800254e:	d007      	beq.n	8002560 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002556:	2a08      	cmp	r2, #8
 8002558:	d10a      	bne.n	8002570 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	0251      	lsls	r1, r2, #9
 800255e:	d507      	bpl.n	8002570 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002560:	4b9e      	ldr	r3, [pc, #632]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	039a      	lsls	r2, r3, #14
 8002566:	d5dc      	bpl.n	8002522 <HAL_RCC_OscConfig+0x16>
 8002568:	6863      	ldr	r3, [r4, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1d9      	bne.n	8002522 <HAL_RCC_OscConfig+0x16>
 800256e:	e7d1      	b.n	8002514 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002570:	6862      	ldr	r2, [r4, #4]
 8002572:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002576:	d111      	bne.n	800259c <HAL_RCC_OscConfig+0x90>
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800257e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002580:	f7fe fce0 	bl	8000f44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002584:	4e95      	ldr	r6, [pc, #596]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 8002586:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002588:	6833      	ldr	r3, [r6, #0]
 800258a:	039b      	lsls	r3, r3, #14
 800258c:	d4c9      	bmi.n	8002522 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258e:	f7fe fcd9 	bl	8000f44 <HAL_GetTick>
 8002592:	1b40      	subs	r0, r0, r5
 8002594:	2864      	cmp	r0, #100	; 0x64
 8002596:	d9f7      	bls.n	8002588 <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 8002598:	2003      	movs	r0, #3
 800259a:	e7bc      	b.n	8002516 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259c:	4d8f      	ldr	r5, [pc, #572]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)
 800259e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80025a2:	682b      	ldr	r3, [r5, #0]
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_OscConfig+0xaa>
 80025a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025aa:	602b      	str	r3, [r5, #0]
 80025ac:	682b      	ldr	r3, [r5, #0]
 80025ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b2:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025b4:	e7e4      	b.n	8002580 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ba:	602b      	str	r3, [r5, #0]
 80025bc:	682b      	ldr	r3, [r5, #0]
 80025be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c2:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025c4:	2a00      	cmp	r2, #0
 80025c6:	d1db      	bne.n	8002580 <HAL_RCC_OscConfig+0x74>
        tickstart = HAL_GetTick();
 80025c8:	f7fe fcbc 	bl	8000f44 <HAL_GetTick>
 80025cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ce:	682b      	ldr	r3, [r5, #0]
 80025d0:	039f      	lsls	r7, r3, #14
 80025d2:	d5a6      	bpl.n	8002522 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d4:	f7fe fcb6 	bl	8000f44 <HAL_GetTick>
 80025d8:	1b80      	subs	r0, r0, r6
 80025da:	2864      	cmp	r0, #100	; 0x64
 80025dc:	d9f7      	bls.n	80025ce <HAL_RCC_OscConfig+0xc2>
 80025de:	e7db      	b.n	8002598 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025e0:	4b7e      	ldr	r3, [pc, #504]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	f012 0f0c 	tst.w	r2, #12
 80025e8:	d007      	beq.n	80025fa <HAL_RCC_OscConfig+0xee>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f0:	2a08      	cmp	r2, #8
 80025f2:	d111      	bne.n	8002618 <HAL_RCC_OscConfig+0x10c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	025e      	lsls	r6, r3, #9
 80025f8:	d40e      	bmi.n	8002618 <HAL_RCC_OscConfig+0x10c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	4b78      	ldr	r3, [pc, #480]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	0795      	lsls	r5, r2, #30
 8002600:	d502      	bpl.n	8002608 <HAL_RCC_OscConfig+0xfc>
 8002602:	68e2      	ldr	r2, [r4, #12]
 8002604:	2a01      	cmp	r2, #1
 8002606:	d185      	bne.n	8002514 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	6921      	ldr	r1, [r4, #16]
 800260c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002610:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002614:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	e787      	b.n	8002528 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002618:	68e2      	ldr	r2, [r4, #12]
 800261a:	4b71      	ldr	r3, [pc, #452]	; (80027e0 <HAL_RCC_OscConfig+0x2d4>)
 800261c:	b1b2      	cbz	r2, 800264c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_ENABLE();
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002622:	f7fe fc8f 	bl	8000f44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	4d6d      	ldr	r5, [pc, #436]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 8002628:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	682b      	ldr	r3, [r5, #0]
 800262c:	0798      	lsls	r0, r3, #30
 800262e:	d507      	bpl.n	8002640 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	682b      	ldr	r3, [r5, #0]
 8002632:	6922      	ldr	r2, [r4, #16]
 8002634:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002638:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800263c:	602b      	str	r3, [r5, #0]
 800263e:	e773      	b.n	8002528 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002640:	f7fe fc80 	bl	8000f44 <HAL_GetTick>
 8002644:	1b80      	subs	r0, r0, r6
 8002646:	2802      	cmp	r0, #2
 8002648:	d9ef      	bls.n	800262a <HAL_RCC_OscConfig+0x11e>
 800264a:	e7a5      	b.n	8002598 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 800264c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800264e:	f7fe fc79 	bl	8000f44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	4e62      	ldr	r6, [pc, #392]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 8002654:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	6833      	ldr	r3, [r6, #0]
 8002658:	0799      	lsls	r1, r3, #30
 800265a:	f57f af65 	bpl.w	8002528 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265e:	f7fe fc71 	bl	8000f44 <HAL_GetTick>
 8002662:	1b40      	subs	r0, r0, r5
 8002664:	2802      	cmp	r0, #2
 8002666:	d9f6      	bls.n	8002656 <HAL_RCC_OscConfig+0x14a>
 8002668:	e796      	b.n	8002598 <HAL_RCC_OscConfig+0x8c>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800266a:	6962      	ldr	r2, [r4, #20]
 800266c:	4b5d      	ldr	r3, [pc, #372]	; (80027e4 <HAL_RCC_OscConfig+0x2d8>)
 800266e:	b17a      	cbz	r2, 8002690 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8002670:	2201      	movs	r2, #1
 8002672:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002674:	f7fe fc66 	bl	8000f44 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002678:	4e58      	ldr	r6, [pc, #352]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)
      tickstart = HAL_GetTick();
 800267a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800267e:	079f      	lsls	r7, r3, #30
 8002680:	f53f af56 	bmi.w	8002530 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002684:	f7fe fc5e 	bl	8000f44 <HAL_GetTick>
 8002688:	1b40      	subs	r0, r0, r5
 800268a:	2802      	cmp	r0, #2
 800268c:	d9f6      	bls.n	800267c <HAL_RCC_OscConfig+0x170>
 800268e:	e783      	b.n	8002598 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 8002690:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002692:	f7fe fc57 	bl	8000f44 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002696:	4e51      	ldr	r6, [pc, #324]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)
      tickstart = HAL_GetTick();
 8002698:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800269c:	0798      	lsls	r0, r3, #30
 800269e:	f57f af47 	bpl.w	8002530 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a2:	f7fe fc4f 	bl	8000f44 <HAL_GetTick>
 80026a6:	1b40      	subs	r0, r0, r5
 80026a8:	2802      	cmp	r0, #2
 80026aa:	d9f6      	bls.n	800269a <HAL_RCC_OscConfig+0x18e>
 80026ac:	e774      	b.n	8002598 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ae:	4b4b      	ldr	r3, [pc, #300]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)
 80026b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026b2:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80026b6:	d128      	bne.n	800270a <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80026cc:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ce:	4d46      	ldr	r5, [pc, #280]	; (80027e8 <HAL_RCC_OscConfig+0x2dc>)
 80026d0:	682b      	ldr	r3, [r5, #0]
 80026d2:	05d9      	lsls	r1, r3, #23
 80026d4:	d51b      	bpl.n	800270e <HAL_RCC_OscConfig+0x202>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d6:	68a3      	ldr	r3, [r4, #8]
 80026d8:	4d40      	ldr	r5, [pc, #256]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d127      	bne.n	800272e <HAL_RCC_OscConfig+0x222>
 80026de:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80026e6:	f7fe fc2d 	bl	8000f44 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ea:	4e3c      	ldr	r6, [pc, #240]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)
      tickstart = HAL_GetTick();
 80026ec:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ee:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80026f4:	079b      	lsls	r3, r3, #30
 80026f6:	d539      	bpl.n	800276c <HAL_RCC_OscConfig+0x260>
    if(pwrclkchanged == SET)
 80026f8:	2f00      	cmp	r7, #0
 80026fa:	f43f af1d 	beq.w	8002538 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fe:	4a37      	ldr	r2, [pc, #220]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)
 8002700:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002706:	6413      	str	r3, [r2, #64]	; 0x40
 8002708:	e716      	b.n	8002538 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800270a:	2700      	movs	r7, #0
 800270c:	e7df      	b.n	80026ce <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270e:	682b      	ldr	r3, [r5, #0]
 8002710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002714:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002716:	f7fe fc15 	bl	8000f44 <HAL_GetTick>
 800271a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	682b      	ldr	r3, [r5, #0]
 800271e:	05da      	lsls	r2, r3, #23
 8002720:	d4d9      	bmi.n	80026d6 <HAL_RCC_OscConfig+0x1ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002722:	f7fe fc0f 	bl	8000f44 <HAL_GetTick>
 8002726:	1b80      	subs	r0, r0, r6
 8002728:	2802      	cmp	r0, #2
 800272a:	d9f7      	bls.n	800271c <HAL_RCC_OscConfig+0x210>
 800272c:	e734      	b.n	8002598 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800272e:	2b05      	cmp	r3, #5
 8002730:	d104      	bne.n	800273c <HAL_RCC_OscConfig+0x230>
 8002732:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	672b      	str	r3, [r5, #112]	; 0x70
 800273a:	e7d0      	b.n	80026de <HAL_RCC_OscConfig+0x1d2>
 800273c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	672a      	str	r2, [r5, #112]	; 0x70
 8002744:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002746:	f022 0204 	bic.w	r2, r2, #4
 800274a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1ca      	bne.n	80026e6 <HAL_RCC_OscConfig+0x1da>
      tickstart = HAL_GetTick();
 8002750:	f7fe fbf8 	bl	8000f44 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002758:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800275c:	0798      	lsls	r0, r3, #30
 800275e:	d5cb      	bpl.n	80026f8 <HAL_RCC_OscConfig+0x1ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002760:	f7fe fbf0 	bl	8000f44 <HAL_GetTick>
 8002764:	1b80      	subs	r0, r0, r6
 8002766:	4540      	cmp	r0, r8
 8002768:	d9f7      	bls.n	800275a <HAL_RCC_OscConfig+0x24e>
 800276a:	e715      	b.n	8002598 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276c:	f7fe fbea 	bl	8000f44 <HAL_GetTick>
 8002770:	1b40      	subs	r0, r0, r5
 8002772:	4540      	cmp	r0, r8
 8002774:	d9bd      	bls.n	80026f2 <HAL_RCC_OscConfig+0x1e6>
 8002776:	e70f      	b.n	8002598 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002778:	4d18      	ldr	r5, [pc, #96]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)
 800277a:	68ab      	ldr	r3, [r5, #8]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b08      	cmp	r3, #8
 8002782:	f43f aec7 	beq.w	8002514 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002786:	4e19      	ldr	r6, [pc, #100]	; (80027ec <HAL_RCC_OscConfig+0x2e0>)
 8002788:	2300      	movs	r3, #0
 800278a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800278c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800278e:	d135      	bne.n	80027fc <HAL_RCC_OscConfig+0x2f0>
        tickstart = HAL_GetTick();
 8002790:	f7fe fbd8 	bl	8000f44 <HAL_GetTick>
 8002794:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002796:	682b      	ldr	r3, [r5, #0]
 8002798:	0199      	lsls	r1, r3, #6
 800279a:	d429      	bmi.n	80027f0 <HAL_RCC_OscConfig+0x2e4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800279c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027a4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80027a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80027aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80027ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027b0:	0852      	lsrs	r2, r2, #1
 80027b2:	3a01      	subs	r2, #1
 80027b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80027b8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80027ba:	2301      	movs	r3, #1
 80027bc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80027be:	f7fe fbc1 	bl	8000f44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c2:	4d06      	ldr	r5, [pc, #24]	; (80027dc <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 80027c4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c6:	682b      	ldr	r3, [r5, #0]
 80027c8:	019a      	lsls	r2, r3, #6
 80027ca:	f53f aeb9 	bmi.w	8002540 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ce:	f7fe fbb9 	bl	8000f44 <HAL_GetTick>
 80027d2:	1b00      	subs	r0, r0, r4
 80027d4:	2802      	cmp	r0, #2
 80027d6:	d9f6      	bls.n	80027c6 <HAL_RCC_OscConfig+0x2ba>
 80027d8:	e6de      	b.n	8002598 <HAL_RCC_OscConfig+0x8c>
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800
 80027e0:	42470000 	.word	0x42470000
 80027e4:	42470e80 	.word	0x42470e80
 80027e8:	40007000 	.word	0x40007000
 80027ec:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fba8 	bl	8000f44 <HAL_GetTick>
 80027f4:	1bc0      	subs	r0, r0, r7
 80027f6:	2802      	cmp	r0, #2
 80027f8:	d9cd      	bls.n	8002796 <HAL_RCC_OscConfig+0x28a>
 80027fa:	e6cd      	b.n	8002598 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 80027fc:	f7fe fba2 	bl	8000f44 <HAL_GetTick>
 8002800:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002802:	682b      	ldr	r3, [r5, #0]
 8002804:	019b      	lsls	r3, r3, #6
 8002806:	f57f ae9b 	bpl.w	8002540 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280a:	f7fe fb9b 	bl	8000f44 <HAL_GetTick>
 800280e:	1b00      	subs	r0, r0, r4
 8002810:	2802      	cmp	r0, #2
 8002812:	d9f6      	bls.n	8002802 <HAL_RCC_OscConfig+0x2f6>
 8002814:	e6c0      	b.n	8002598 <HAL_RCC_OscConfig+0x8c>
 8002816:	bf00      	nop

08002818 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002818:	4913      	ldr	r1, [pc, #76]	; (8002868 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800281a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800281c:	688b      	ldr	r3, [r1, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b04      	cmp	r3, #4
 8002824:	d01c      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x48>
 8002826:	2b08      	cmp	r3, #8
 8002828:	d11c      	bne.n	8002864 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800282a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800282c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002830:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002834:	bf14      	ite	ne
 8002836:	480d      	ldrne	r0, [pc, #52]	; (800286c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002838:	480d      	ldreq	r0, [pc, #52]	; (8002870 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800283e:	bf18      	it	ne
 8002840:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002842:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002846:	fba1 0100 	umull	r0, r1, r1, r0
 800284a:	f7fe f9b5 	bl	8000bb8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_RCC_GetSysClockFreq+0x50>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002856:	3301      	adds	r3, #1
 8002858:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800285a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800285e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <HAL_RCC_GetSysClockFreq+0x54>)
 8002862:	e7fc      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002866:	e7fa      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x46>
 8002868:	40023800 	.word	0x40023800
 800286c:	007a1200 	.word	0x007a1200
 8002870:	00f42400 	.word	0x00f42400

08002874 <HAL_RCC_ClockConfig>:
{
 8002874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002878:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800287a:	4604      	mov	r4, r0
 800287c:	b910      	cbnz	r0, 8002884 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800287e:	2001      	movs	r0, #1
}
 8002880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002884:	4b43      	ldr	r3, [pc, #268]	; (8002994 <HAL_RCC_ClockConfig+0x120>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	f002 020f 	and.w	r2, r2, #15
 800288c:	428a      	cmp	r2, r1
 800288e:	d327      	bcc.n	80028e0 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002890:	6822      	ldr	r2, [r4, #0]
 8002892:	0797      	lsls	r7, r2, #30
 8002894:	d42c      	bmi.n	80028f0 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002896:	07d0      	lsls	r0, r2, #31
 8002898:	d440      	bmi.n	800291c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800289a:	4b3e      	ldr	r3, [pc, #248]	; (8002994 <HAL_RCC_ClockConfig+0x120>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	f002 020f 	and.w	r2, r2, #15
 80028a2:	42aa      	cmp	r2, r5
 80028a4:	d865      	bhi.n	8002972 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a6:	6822      	ldr	r2, [r4, #0]
 80028a8:	0751      	lsls	r1, r2, #29
 80028aa:	d46b      	bmi.n	8002984 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ac:	0713      	lsls	r3, r2, #28
 80028ae:	d507      	bpl.n	80028c0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b0:	4a39      	ldr	r2, [pc, #228]	; (8002998 <HAL_RCC_ClockConfig+0x124>)
 80028b2:	6921      	ldr	r1, [r4, #16]
 80028b4:	6893      	ldr	r3, [r2, #8]
 80028b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80028ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80028be:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028c0:	f7ff ffaa 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 80028c4:	4b34      	ldr	r3, [pc, #208]	; (8002998 <HAL_RCC_ClockConfig+0x124>)
 80028c6:	4a35      	ldr	r2, [pc, #212]	; (800299c <HAL_RCC_ClockConfig+0x128>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80028ce:	5cd3      	ldrb	r3, [r2, r3]
 80028d0:	40d8      	lsrs	r0, r3
 80028d2:	4b33      	ldr	r3, [pc, #204]	; (80029a0 <HAL_RCC_ClockConfig+0x12c>)
 80028d4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7fe faea 	bl	8000eb0 <HAL_InitTick>
  return HAL_OK;
 80028dc:	2000      	movs	r0, #0
 80028de:	e7cf      	b.n	8002880 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e0:	b2ca      	uxtb	r2, r1
 80028e2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	428b      	cmp	r3, r1
 80028ec:	d1c7      	bne.n	800287e <HAL_RCC_ClockConfig+0xa>
 80028ee:	e7cf      	b.n	8002890 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f0:	4b29      	ldr	r3, [pc, #164]	; (8002998 <HAL_RCC_ClockConfig+0x124>)
 80028f2:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f6:	bf1e      	ittt	ne
 80028f8:	6899      	ldrne	r1, [r3, #8]
 80028fa:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80028fe:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002900:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002902:	bf42      	ittt	mi
 8002904:	6899      	ldrmi	r1, [r3, #8]
 8002906:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 800290a:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290c:	4922      	ldr	r1, [pc, #136]	; (8002998 <HAL_RCC_ClockConfig+0x124>)
 800290e:	68a0      	ldr	r0, [r4, #8]
 8002910:	688b      	ldr	r3, [r1, #8]
 8002912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002916:	4303      	orrs	r3, r0
 8002918:	608b      	str	r3, [r1, #8]
 800291a:	e7bc      	b.n	8002896 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291c:	6862      	ldr	r2, [r4, #4]
 800291e:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <HAL_RCC_ClockConfig+0x124>)
 8002920:	2a01      	cmp	r2, #1
 8002922:	d11c      	bne.n	800295e <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	d0a8      	beq.n	800287e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292c:	4e1a      	ldr	r6, [pc, #104]	; (8002998 <HAL_RCC_ClockConfig+0x124>)
 800292e:	68b3      	ldr	r3, [r6, #8]
 8002930:	f023 0303 	bic.w	r3, r3, #3
 8002934:	4313      	orrs	r3, r2
 8002936:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002938:	f7fe fb04 	bl	8000f44 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002940:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002942:	68b3      	ldr	r3, [r6, #8]
 8002944:	6862      	ldr	r2, [r4, #4]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800294e:	d0a4      	beq.n	800289a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002950:	f7fe faf8 	bl	8000f44 <HAL_GetTick>
 8002954:	1bc0      	subs	r0, r0, r7
 8002956:	4540      	cmp	r0, r8
 8002958:	d9f3      	bls.n	8002942 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800295a:	2003      	movs	r0, #3
 800295c:	e790      	b.n	8002880 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800295e:	1e91      	subs	r1, r2, #2
 8002960:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002962:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002964:	d802      	bhi.n	800296c <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002966:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800296a:	e7de      	b.n	800292a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	f013 0f02 	tst.w	r3, #2
 8002970:	e7db      	b.n	800292a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	b2ea      	uxtb	r2, r5
 8002974:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	42ab      	cmp	r3, r5
 800297e:	f47f af7e 	bne.w	800287e <HAL_RCC_ClockConfig+0xa>
 8002982:	e790      	b.n	80028a6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002984:	4904      	ldr	r1, [pc, #16]	; (8002998 <HAL_RCC_ClockConfig+0x124>)
 8002986:	68e0      	ldr	r0, [r4, #12]
 8002988:	688b      	ldr	r3, [r1, #8]
 800298a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800298e:	4303      	orrs	r3, r0
 8002990:	608b      	str	r3, [r1, #8]
 8002992:	e78b      	b.n	80028ac <HAL_RCC_ClockConfig+0x38>
 8002994:	40023c00 	.word	0x40023c00
 8002998:	40023800 	.word	0x40023800
 800299c:	08006315 	.word	0x08006315
 80029a0:	20000008 	.word	0x20000008

080029a4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80029a6:	4a05      	ldr	r2, [pc, #20]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80029ae:	5cd3      	ldrb	r3, [r2, r3]
 80029b0:	4a03      	ldr	r2, [pc, #12]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80029b2:	6810      	ldr	r0, [r2, #0]
}
 80029b4:	40d8      	lsrs	r0, r3
 80029b6:	4770      	bx	lr
 80029b8:	40023800 	.word	0x40023800
 80029bc:	08006325 	.word	0x08006325
 80029c0:	20000008 	.word	0x20000008

080029c4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80029c6:	4a05      	ldr	r2, [pc, #20]	; (80029dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80029ce:	5cd3      	ldrb	r3, [r2, r3]
 80029d0:	4a03      	ldr	r2, [pc, #12]	; (80029e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80029d2:	6810      	ldr	r0, [r2, #0]
}
 80029d4:	40d8      	lsrs	r0, r3
 80029d6:	4770      	bx	lr
 80029d8:	40023800 	.word	0x40023800
 80029dc:	08006325 	.word	0x08006325
 80029e0:	20000008 	.word	0x20000008

080029e4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029e4:	6803      	ldr	r3, [r0, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80029ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	f022 0201 	bic.w	r2, r2, #1
 80029f4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029f6:	2320      	movs	r3, #32
 80029f8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80029fc:	4770      	bx	lr
	...

08002a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a04:	6803      	ldr	r3, [r0, #0]
 8002a06:	68c1      	ldr	r1, [r0, #12]
 8002a08:	691a      	ldr	r2, [r3, #16]
{
 8002a0a:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a0c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002a10:	430a      	orrs	r2, r1
 8002a12:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a14:	6925      	ldr	r5, [r4, #16]
 8002a16:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a18:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a1a:	69c0      	ldr	r0, [r0, #28]
 8002a1c:	432a      	orrs	r2, r5
 8002a1e:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002a20:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a24:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8002a26:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a2a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	69a1      	ldr	r1, [r4, #24]
 8002a34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a38:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a3a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a3e:	615a      	str	r2, [r3, #20]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a40:	4a77      	ldr	r2, [pc, #476]	; (8002c20 <UART_SetConfig+0x220>)
 8002a42:	d179      	bne.n	8002b38 <UART_SetConfig+0x138>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d003      	beq.n	8002a50 <UART_SetConfig+0x50>
 8002a48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d143      	bne.n	8002ad8 <UART_SetConfig+0xd8>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002a50:	f7ff ffb8 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8002a54:	6863      	ldr	r3, [r4, #4]
 8002a56:	2519      	movs	r5, #25
 8002a58:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002a5c:	4368      	muls	r0, r5
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a64:	fbb3 f3f8 	udiv	r3, r3, r8
 8002a68:	011f      	lsls	r7, r3, #4
 8002a6a:	f7ff ffab 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8002a6e:	6863      	ldr	r3, [r4, #4]
 8002a70:	4368      	muls	r0, r5
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fbb0 f6f3 	udiv	r6, r0, r3
 8002a78:	f7ff ffa4 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8002a7c:	6863      	ldr	r3, [r4, #4]
 8002a7e:	4368      	muls	r0, r5
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a86:	fbb3 f3f8 	udiv	r3, r3, r8
 8002a8a:	fb08 6313 	mls	r3, r8, r3, r6
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	3332      	adds	r3, #50	; 0x32
 8002a92:	fbb3 f3f8 	udiv	r3, r3, r8
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8002a9c:	f7ff ff92 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8002aa0:	6862      	ldr	r2, [r4, #4]
 8002aa2:	4368      	muls	r0, r5
 8002aa4:	0052      	lsls	r2, r2, #1
 8002aa6:	fbb0 f9f2 	udiv	r9, r0, r2
 8002aaa:	f7ff ff8b 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002aae:	6863      	ldr	r3, [r4, #4]
 8002ab0:	6822      	ldr	r2, [r4, #0]
 8002ab2:	4368      	muls	r0, r5
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aba:	fbb3 f3f8 	udiv	r3, r3, r8
 8002abe:	fb08 9313 	mls	r3, r8, r3, r9
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	3332      	adds	r3, #50	; 0x32
 8002ac6:	fbb3 f3f8 	udiv	r3, r3, r8
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	443b      	add	r3, r7
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002ad0:	4433      	add	r3, r6
 8002ad2:	6093      	str	r3, [r2, #8]
    }
  }
}
 8002ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002ad8:	f7ff ff64 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 8002adc:	6863      	ldr	r3, [r4, #4]
 8002ade:	2519      	movs	r5, #25
 8002ae0:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002ae4:	4368      	muls	r0, r5
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aec:	fbb3 f3f8 	udiv	r3, r3, r8
 8002af0:	011f      	lsls	r7, r3, #4
 8002af2:	f7ff ff57 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 8002af6:	6863      	ldr	r3, [r4, #4]
 8002af8:	4368      	muls	r0, r5
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fbb0 f6f3 	udiv	r6, r0, r3
 8002b00:	f7ff ff50 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 8002b04:	6863      	ldr	r3, [r4, #4]
 8002b06:	4368      	muls	r0, r5
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b12:	fb08 6313 	mls	r3, r8, r3, r6
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	3332      	adds	r3, #50	; 0x32
 8002b1a:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8002b24:	f7ff ff3e 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 8002b28:	6862      	ldr	r2, [r4, #4]
 8002b2a:	4368      	muls	r0, r5
 8002b2c:	0052      	lsls	r2, r2, #1
 8002b2e:	fbb0 f9f2 	udiv	r9, r0, r2
 8002b32:	f7ff ff37 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 8002b36:	e7ba      	b.n	8002aae <UART_SetConfig+0xae>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d002      	beq.n	8002b42 <UART_SetConfig+0x142>
 8002b3c:	4a39      	ldr	r2, [pc, #228]	; (8002c24 <UART_SetConfig+0x224>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d13f      	bne.n	8002bc2 <UART_SetConfig+0x1c2>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002b42:	f7ff ff3f 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8002b46:	6863      	ldr	r3, [r4, #4]
 8002b48:	2519      	movs	r5, #25
 8002b4a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002b4e:	4368      	muls	r0, r5
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b56:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b5a:	011e      	lsls	r6, r3, #4
 8002b5c:	f7ff ff32 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8002b60:	6863      	ldr	r3, [r4, #4]
 8002b62:	4368      	muls	r0, r5
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	fbb0 f7f3 	udiv	r7, r0, r3
 8002b6a:	f7ff ff2b 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8002b6e:	6863      	ldr	r3, [r4, #4]
 8002b70:	4368      	muls	r0, r5
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b78:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b7c:	fb08 7313 	mls	r3, r8, r3, r7
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	3332      	adds	r3, #50	; 0x32
 8002b84:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b88:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002b8c:	f7ff ff1a 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8002b90:	6862      	ldr	r2, [r4, #4]
 8002b92:	4368      	muls	r0, r5
 8002b94:	0092      	lsls	r2, r2, #2
 8002b96:	fbb0 f9f2 	udiv	r9, r0, r2
 8002b9a:	f7ff ff13 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b9e:	6863      	ldr	r3, [r4, #4]
 8002ba0:	6822      	ldr	r2, [r4, #0]
 8002ba2:	4368      	muls	r0, r5
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002baa:	fbb3 f3f8 	udiv	r3, r3, r8
 8002bae:	fb08 9313 	mls	r3, r8, r3, r9
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	3332      	adds	r3, #50	; 0x32
 8002bb6:	fbb3 f3f8 	udiv	r3, r3, r8
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	433b      	orrs	r3, r7
 8002bc0:	e786      	b.n	8002ad0 <UART_SetConfig+0xd0>
 8002bc2:	f7ff feef 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 8002bc6:	6863      	ldr	r3, [r4, #4]
 8002bc8:	2519      	movs	r5, #25
 8002bca:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002bce:	4368      	muls	r0, r5
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd6:	fbb3 f3f8 	udiv	r3, r3, r8
 8002bda:	011e      	lsls	r6, r3, #4
 8002bdc:	f7ff fee2 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 8002be0:	6863      	ldr	r3, [r4, #4]
 8002be2:	4368      	muls	r0, r5
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	fbb0 f7f3 	udiv	r7, r0, r3
 8002bea:	f7ff fedb 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 8002bee:	6863      	ldr	r3, [r4, #4]
 8002bf0:	4368      	muls	r0, r5
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf8:	fbb3 f3f8 	udiv	r3, r3, r8
 8002bfc:	fb08 7313 	mls	r3, r8, r3, r7
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	3332      	adds	r3, #50	; 0x32
 8002c04:	fbb3 f3f8 	udiv	r3, r3, r8
 8002c08:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002c0c:	f7ff feca 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 8002c10:	6862      	ldr	r2, [r4, #4]
 8002c12:	4368      	muls	r0, r5
 8002c14:	0092      	lsls	r2, r2, #2
 8002c16:	fbb0 f9f2 	udiv	r9, r0, r2
 8002c1a:	f7ff fec3 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 8002c1e:	e7be      	b.n	8002b9e <UART_SetConfig+0x19e>
 8002c20:	40011000 	.word	0x40011000
 8002c24:	40011400 	.word	0x40011400

08002c28 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	460e      	mov	r6, r1
 8002c2e:	4617      	mov	r7, r2
 8002c30:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c32:	6822      	ldr	r2, [r4, #0]
 8002c34:	6813      	ldr	r3, [r2, #0]
 8002c36:	ea36 0303 	bics.w	r3, r6, r3
 8002c3a:	d101      	bne.n	8002c40 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	e014      	b.n	8002c6a <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8002c40:	1c6b      	adds	r3, r5, #1
 8002c42:	d0f7      	beq.n	8002c34 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c44:	b995      	cbnz	r5, 8002c6c <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002c58:	2320      	movs	r3, #32
 8002c5a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c5e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002c62:	2300      	movs	r3, #0
 8002c64:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002c68:	2003      	movs	r0, #3
}
 8002c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c6c:	f7fe f96a 	bl	8000f44 <HAL_GetTick>
 8002c70:	1bc0      	subs	r0, r0, r7
 8002c72:	4285      	cmp	r5, r0
 8002c74:	d2dd      	bcs.n	8002c32 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8002c76:	e7e6      	b.n	8002c46 <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

08002c78 <HAL_UART_Init>:
{
 8002c78:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	b340      	cbz	r0, 8002cd0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c7e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002c82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c86:	b91b      	cbnz	r3, 8002c90 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002c88:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002c8c:	f000 fb48 	bl	8003320 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002c90:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c92:	2324      	movs	r3, #36	; 0x24
 8002c94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002c98:	68d3      	ldr	r3, [r2, #12]
 8002c9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c9e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f7ff fead 	bl	8002a00 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cb6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cbe:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002cc2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002cc6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002cca:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002cce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	e7fc      	b.n	8002cce <HAL_UART_Init+0x56>

08002cd4 <HAL_UART_Transmit>:
{
 8002cd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002cd6:	4616      	mov	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002cd8:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
{
 8002cdc:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8002cde:	2a20      	cmp	r2, #32
{
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	460d      	mov	r5, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002ce4:	d150      	bne.n	8002d88 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8002ce6:	2900      	cmp	r1, #0
 8002ce8:	d04c      	beq.n	8002d84 <HAL_UART_Transmit+0xb0>
 8002cea:	2e00      	cmp	r6, #0
 8002cec:	d04a      	beq.n	8002d84 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8002cee:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8002cf2:	2a01      	cmp	r2, #1
 8002cf4:	d048      	beq.n	8002d88 <HAL_UART_Transmit+0xb4>
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d00:	2221      	movs	r2, #33	; 0x21
 8002d02:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002d06:	f7fe f91d 	bl	8000f44 <HAL_GetTick>
    while (huart->TxXferCount > 0U)
 8002d0a:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8002d0c:	84a6      	strh	r6, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002d0e:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8002d10:	84e6      	strh	r6, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d12:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002d14:	b289      	uxth	r1, r1
 8002d16:	b951      	cbnz	r1, 8002d2e <HAL_UART_Transmit+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d18:	2140      	movs	r1, #64	; 0x40
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f7ff ff84 	bl	8002c28 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002d20:	b9b8      	cbnz	r0, 8002d52 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8002d22:	2320      	movs	r3, #32
 8002d24:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002d28:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002d2c:	e012      	b.n	8002d54 <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 8002d2e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002d30:	3901      	subs	r1, #1
 8002d32:	b289      	uxth	r1, r1
 8002d34:	84e1      	strh	r1, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d36:	68a1      	ldr	r1, [r4, #8]
 8002d38:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d3c:	e9cd 2300 	strd	r2, r3, [sp]
 8002d40:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002d44:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d46:	d112      	bne.n	8002d6e <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d48:	f7ff ff6e 	bl	8002c28 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002d4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d50:	b110      	cbz	r0, 8002d58 <HAL_UART_Transmit+0x84>
          return HAL_TIMEOUT;
 8002d52:	2003      	movs	r0, #3
}
 8002d54:	b002      	add	sp, #8
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002d58:	8829      	ldrh	r1, [r5, #0]
 8002d5a:	6820      	ldr	r0, [r4, #0]
 8002d5c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002d60:	6041      	str	r1, [r0, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002d62:	6921      	ldr	r1, [r4, #16]
 8002d64:	b909      	cbnz	r1, 8002d6a <HAL_UART_Transmit+0x96>
          pData += 2U;
 8002d66:	3502      	adds	r5, #2
 8002d68:	e7d3      	b.n	8002d12 <HAL_UART_Transmit+0x3e>
          pData += 1U;
 8002d6a:	3501      	adds	r5, #1
 8002d6c:	e7d1      	b.n	8002d12 <HAL_UART_Transmit+0x3e>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d6e:	f7ff ff5b 	bl	8002c28 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002d72:	2800      	cmp	r0, #0
 8002d74:	d1ed      	bne.n	8002d52 <HAL_UART_Transmit+0x7e>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002d76:	6821      	ldr	r1, [r4, #0]
 8002d78:	f815 0b01 	ldrb.w	r0, [r5], #1
 8002d7c:	6048      	str	r0, [r1, #4]
 8002d7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d82:	e7c6      	b.n	8002d12 <HAL_UART_Transmit+0x3e>
      return  HAL_ERROR;
 8002d84:	2001      	movs	r0, #1
 8002d86:	e7e5      	b.n	8002d54 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8002d88:	2002      	movs	r0, #2
 8002d8a:	e7e3      	b.n	8002d54 <HAL_UART_Transmit+0x80>

08002d8c <HAL_UART_TxCpltCallback>:
 8002d8c:	4770      	bx	lr

08002d8e <HAL_UART_RxCpltCallback>:
 8002d8e:	4770      	bx	lr

08002d90 <UART_Receive_IT>:
{
 8002d90:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d92:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002d96:	2b22      	cmp	r3, #34	; 0x22
 8002d98:	d133      	bne.n	8002e02 <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d9a:	6881      	ldr	r1, [r0, #8]
 8002d9c:	6904      	ldr	r4, [r0, #16]
 8002d9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002da0:	6802      	ldr	r2, [r0, #0]
 8002da2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002da6:	d123      	bne.n	8002df0 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002da8:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002daa:	b9ec      	cbnz	r4, 8002de8 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db0:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002db4:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002db6:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002db8:	3c01      	subs	r4, #1
 8002dba:	b2a4      	uxth	r4, r4
 8002dbc:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002dbe:	b98c      	cbnz	r4, 8002de4 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002dc0:	6803      	ldr	r3, [r0, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	f022 0220 	bic.w	r2, r2, #32
 8002dc8:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd0:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	f022 0201 	bic.w	r2, r2, #1
 8002dd8:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002dda:	2320      	movs	r3, #32
 8002ddc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002de0:	f7ff ffd5 	bl	8002d8e <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002de4:	2000      	movs	r0, #0
 8002de6:	e00d      	b.n	8002e04 <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	f823 2b01 	strh.w	r2, [r3], #1
 8002dee:	e7e1      	b.n	8002db4 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002df0:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002df2:	6852      	ldr	r2, [r2, #4]
 8002df4:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002df6:	b90c      	cbnz	r4, 8002dfc <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e7dc      	b.n	8002db6 <UART_Receive_IT+0x26>
 8002dfc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e00:	e7fa      	b.n	8002df8 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002e02:	2002      	movs	r0, #2
}
 8002e04:	bd10      	pop	{r4, pc}

08002e06 <HAL_UART_ErrorCallback>:
 8002e06:	4770      	bx	lr

08002e08 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e08:	6803      	ldr	r3, [r0, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e0c:	68d9      	ldr	r1, [r3, #12]
{
 8002e0e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002e10:	0716      	lsls	r6, r2, #28
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e12:	695d      	ldr	r5, [r3, #20]
{
 8002e14:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002e16:	d107      	bne.n	8002e28 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e18:	0696      	lsls	r6, r2, #26
 8002e1a:	d559      	bpl.n	8002ed0 <HAL_UART_IRQHandler+0xc8>
 8002e1c:	068d      	lsls	r5, r1, #26
 8002e1e:	d557      	bpl.n	8002ed0 <HAL_UART_IRQHandler+0xc8>
}
 8002e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002e24:	f7ff bfb4 	b.w	8002d90 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e28:	f005 0001 	and.w	r0, r5, #1
 8002e2c:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8002e30:	4305      	orrs	r5, r0
 8002e32:	d04d      	beq.n	8002ed0 <HAL_UART_IRQHandler+0xc8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e34:	07d6      	lsls	r6, r2, #31
 8002e36:	d505      	bpl.n	8002e44 <HAL_UART_IRQHandler+0x3c>
 8002e38:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e3a:	bf42      	ittt	mi
 8002e3c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002e3e:	f043 0301 	orrmi.w	r3, r3, #1
 8002e42:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e44:	0753      	lsls	r3, r2, #29
 8002e46:	d504      	bpl.n	8002e52 <HAL_UART_IRQHandler+0x4a>
 8002e48:	b118      	cbz	r0, 8002e52 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e4c:	f043 0302 	orr.w	r3, r3, #2
 8002e50:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e52:	0796      	lsls	r6, r2, #30
 8002e54:	d504      	bpl.n	8002e60 <HAL_UART_IRQHandler+0x58>
 8002e56:	b118      	cbz	r0, 8002e60 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e60:	0715      	lsls	r5, r2, #28
 8002e62:	d504      	bpl.n	8002e6e <HAL_UART_IRQHandler+0x66>
 8002e64:	b118      	cbz	r0, 8002e6e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e68:	f043 0308 	orr.w	r3, r3, #8
 8002e6c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e70:	b34b      	cbz	r3, 8002ec6 <HAL_UART_IRQHandler+0xbe>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e72:	0690      	lsls	r0, r2, #26
 8002e74:	d504      	bpl.n	8002e80 <HAL_UART_IRQHandler+0x78>
 8002e76:	0689      	lsls	r1, r1, #26
 8002e78:	d502      	bpl.n	8002e80 <HAL_UART_IRQHandler+0x78>
        UART_Receive_IT(huart);
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f7ff ff88 	bl	8002d90 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e84:	6be5      	ldr	r5, [r4, #60]	; 0x3c
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e8a:	f005 0508 	and.w	r5, r5, #8
 8002e8e:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8002e90:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e92:	d019      	beq.n	8002ec8 <HAL_UART_IRQHandler+0xc0>
        UART_EndRxTransfer(huart);
 8002e94:	f7ff fda6 	bl	80029e4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	0652      	lsls	r2, r2, #25
 8002e9e:	d50f      	bpl.n	8002ec0 <HAL_UART_IRQHandler+0xb8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ea0:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002ea2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ea8:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002eaa:	b148      	cbz	r0, 8002ec0 <HAL_UART_IRQHandler+0xb8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002eac:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <HAL_UART_IRQHandler+0x13c>)
 8002eae:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eb0:	f7fe f8ca 	bl	8001048 <HAL_DMA_Abort_IT>
 8002eb4:	b138      	cbz	r0, 8002ec6 <HAL_UART_IRQHandler+0xbe>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eb6:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ebc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002ebe:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f7ff ffa0 	bl	8002e06 <HAL_UART_ErrorCallback>
}
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002ec8:	f7ff ff9d 	bl	8002e06 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002ece:	e7fa      	b.n	8002ec6 <HAL_UART_IRQHandler+0xbe>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ed0:	0616      	lsls	r6, r2, #24
 8002ed2:	d528      	bpl.n	8002f26 <HAL_UART_IRQHandler+0x11e>
 8002ed4:	060d      	lsls	r5, r1, #24
 8002ed6:	d526      	bpl.n	8002f26 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ed8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002edc:	2a21      	cmp	r2, #33	; 0x21
 8002ede:	d1f2      	bne.n	8002ec6 <HAL_UART_IRQHandler+0xbe>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ee0:	68a1      	ldr	r1, [r4, #8]
 8002ee2:	6a22      	ldr	r2, [r4, #32]
 8002ee4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002ee8:	d118      	bne.n	8002f1c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002eea:	8811      	ldrh	r1, [r2, #0]
 8002eec:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002ef0:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ef2:	6921      	ldr	r1, [r4, #16]
 8002ef4:	b981      	cbnz	r1, 8002f18 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002ef6:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002ef8:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002efa:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002efc:	3a01      	subs	r2, #1
 8002efe:	b292      	uxth	r2, r2
 8002f00:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002f02:	2a00      	cmp	r2, #0
 8002f04:	d1df      	bne.n	8002ec6 <HAL_UART_IRQHandler+0xbe>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f0c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	e7d6      	b.n	8002ec6 <HAL_UART_IRQHandler+0xbe>
        huart->pTxBuffPtr += 1U;
 8002f18:	3201      	adds	r2, #1
 8002f1a:	e7ed      	b.n	8002ef8 <HAL_UART_IRQHandler+0xf0>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f1c:	1c51      	adds	r1, r2, #1
 8002f1e:	6221      	str	r1, [r4, #32]
 8002f20:	7812      	ldrb	r2, [r2, #0]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	e7e9      	b.n	8002efa <HAL_UART_IRQHandler+0xf2>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f26:	0650      	lsls	r0, r2, #25
 8002f28:	d5cd      	bpl.n	8002ec6 <HAL_UART_IRQHandler+0xbe>
 8002f2a:	064a      	lsls	r2, r1, #25
 8002f2c:	d5cb      	bpl.n	8002ec6 <HAL_UART_IRQHandler+0xbe>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f34:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002f36:	2320      	movs	r3, #32
 8002f38:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	f7ff ff25 	bl	8002d8c <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8002f42:	e7c0      	b.n	8002ec6 <HAL_UART_IRQHandler+0xbe>
 8002f44:	08002f49 	.word	0x08002f49

08002f48 <UART_DMAAbortOnError>:
{
 8002f48:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f4a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f50:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002f52:	f7ff ff58 	bl	8002e06 <HAL_UART_ErrorCallback>
}
 8002f56:	bd08      	pop	{r3, pc}

08002f58 <am2320_Init>:

Am2320_HandleTypeDef am2320_Init(I2C_HandleTypeDef* i2c_handle,uint8_t device_address) {
	Am2320_HandleTypeDef AM2320_;
	AM2320_.i2c_handle = i2c_handle;
	AM2320_.device_address = device_address;
	return AM2320_;
 8002f58:	6001      	str	r1, [r0, #0]
 8002f5a:	7102      	strb	r2, [r0, #4]
}
 8002f5c:	4770      	bx	lr
	...

08002f60 <am2320_ReadValue>:

uint8_t am2320_ReadValue(Am2320_HandleTypeDef *am2320) {
 8002f60:	b530      	push	{r4, r5, lr}
	uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8002f62:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <am2320_ReadValue+0x6c>)
uint8_t am2320_ReadValue(Am2320_HandleTypeDef *am2320) {
 8002f64:	b085      	sub	sp, #20
	uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8002f66:	881a      	ldrh	r2, [r3, #0]
 8002f68:	789b      	ldrb	r3, [r3, #2]
 8002f6a:	f88d 300e 	strb.w	r3, [sp, #14]
	HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address, 0x00, 0,
 8002f6e:	f04f 35ff 	mov.w	r5, #4294967295
 8002f72:	2300      	movs	r3, #0
 8002f74:	9500      	str	r5, [sp, #0]
 8002f76:	7901      	ldrb	r1, [r0, #4]
	uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8002f78:	f8ad 200c 	strh.w	r2, [sp, #12]
uint8_t am2320_ReadValue(Am2320_HandleTypeDef *am2320) {
 8002f7c:	4604      	mov	r4, r0
	HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address, 0x00, 0,
 8002f7e:	461a      	mov	r2, r3
 8002f80:	6800      	ldr	r0, [r0, #0]
 8002f82:	f7fe fae9 	bl	8001558 <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	HAL_Delay(1);
 8002f86:	2001      	movs	r0, #1
 8002f88:	f7fd ffe2 	bl	8000f50 <HAL_Delay>
	if (HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address,registers, 3, HAL_MAX_DELAY) != HAL_OK) {
 8002f8c:	7921      	ldrb	r1, [r4, #4]
 8002f8e:	6820      	ldr	r0, [r4, #0]
 8002f90:	9500      	str	r5, [sp, #0]
 8002f92:	2303      	movs	r3, #3
 8002f94:	aa03      	add	r2, sp, #12
 8002f96:	f7fe fadf 	bl	8001558 <HAL_I2C_Master_Transmit>
 8002f9a:	b998      	cbnz	r0, 8002fc4 <am2320_ReadValue+0x64>
		return 1;
	}
	HAL_Delay(2);
 8002f9c:	2002      	movs	r0, #2
 8002f9e:	f7fd ffd7 	bl	8000f50 <HAL_Delay>
	if (HAL_I2C_Master_Receive(am2320->i2c_handle, am2320->device_address,am2320->data, 8, HAL_MAX_DELAY) != HAL_OK) {
 8002fa2:	7921      	ldrb	r1, [r4, #4]
 8002fa4:	6820      	ldr	r0, [r4, #0]
 8002fa6:	9500      	str	r5, [sp, #0]
 8002fa8:	2308      	movs	r3, #8
 8002faa:	1d62      	adds	r2, r4, #5
 8002fac:	f7fe fba6 	bl	80016fc <HAL_I2C_Master_Receive>
 8002fb0:	b950      	cbnz	r0, 8002fc8 <am2320_ReadValue+0x68>
		return 2;
	}
	if (am2320->data[1] != 0x04 && am2320->data[0] != 0x03) {
 8002fb2:	79a3      	ldrb	r3, [r4, #6]
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d003      	beq.n	8002fc0 <am2320_ReadValue+0x60>
 8002fb8:	7963      	ldrb	r3, [r4, #5]
		return 3;
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	bf18      	it	ne
 8002fbe:	2003      	movne	r0, #3
	}
	return 0;
}
 8002fc0:	b005      	add	sp, #20
 8002fc2:	bd30      	pop	{r4, r5, pc}
		return 1;
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	e7fb      	b.n	8002fc0 <am2320_ReadValue+0x60>
		return 2;
 8002fc8:	2002      	movs	r0, #2
 8002fca:	e7f9      	b.n	8002fc0 <am2320_ReadValue+0x60>
 8002fcc:	080062c0 	.word	0x080062c0

08002fd0 <am2320_GetTemperatureAndHumidity>:

void am2320_GetTemperatureAndHumidity(Am2320_HandleTypeDef *am2320, float *temperature,float *humidity) {
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	4615      	mov	r5, r2
 8002fd6:	460e      	mov	r6, r1
	int read = am2320_ReadValue(am2320);
 8002fd8:	f7ff ffc2 	bl	8002f60 <am2320_ReadValue>
	if (read) {
		// Simple exception handling
	}
	uint16_t temp_temperature = (am2320->data[5] | am2320->data[4] << 8);
 8002fdc:	7a62      	ldrb	r2, [r4, #9]
 8002fde:	7aa3      	ldrb	r3, [r4, #10]
 8002fe0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (temp_temperature & 0x8000) {
 8002fe4:	041a      	lsls	r2, r3, #16
		temp_temperature = -(int16_t) (temp_temperature & 0x7fff);
 8002fe6:	bf42      	ittt	mi
 8002fe8:	f3c3 030e 	ubfxmi	r3, r3, #0, #15
 8002fec:	425b      	negmi	r3, r3
 8002fee:	b29b      	uxthmi	r3, r3
	} else {
		temp_temperature = (int16_t) temp_temperature;
	}
	*temperature = (float) temp_temperature / 10.0;
 8002ff0:	ee07 3a90 	vmov	s15, r3
 8002ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ffc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003000:	edc6 6a00 	vstr	s13, [r6]
	*humidity = (float) (am2320->data[3] | am2320->data[2] << 8) / 10.0;
 8003004:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 8003008:	ba5b      	rev16	r3, r3
 800300a:	b29b      	uxth	r3, r3
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003014:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003018:	edc5 6a00 	vstr	s13, [r5]
}
 800301c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003020 <vprint>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vprint(const char *fmt, va_list argp) {
 8003020:	b500      	push	{lr}
 8003022:	b0b3      	sub	sp, #204	; 0xcc
 8003024:	460a      	mov	r2, r1
	char string[200];
	if (0 < vsprintf(string, fmt, argp)) // build string
 8003026:	4601      	mov	r1, r0
 8003028:	4668      	mov	r0, sp
 800302a:	f000 ff25 	bl	8003e78 <vsiprintf>
 800302e:	2800      	cmp	r0, #0
 8003030:	dd09      	ble.n	8003046 <vprint+0x26>
			{
		HAL_UART_Transmit(&huart2, (uint8_t*) string, strlen(string), 0xffffff); // send message via UART
 8003032:	4668      	mov	r0, sp
 8003034:	f7fd f8d4 	bl	80001e0 <strlen>
 8003038:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800303c:	b282      	uxth	r2, r0
 800303e:	4669      	mov	r1, sp
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <vprint+0x2c>)
 8003042:	f7ff fe47 	bl	8002cd4 <HAL_UART_Transmit>
	}
}
 8003046:	b033      	add	sp, #204	; 0xcc
 8003048:	f85d fb04 	ldr.w	pc, [sp], #4
 800304c:	2000025c 	.word	0x2000025c

08003050 <my_printf>:

void my_printf(const char *fmt, ...) // custom printf() function
{
 8003050:	b40f      	push	{r0, r1, r2, r3}
 8003052:	b507      	push	{r0, r1, r2, lr}
 8003054:	a904      	add	r1, sp, #16
 8003056:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list argp;
	va_start(argp, fmt);
 800305a:	9101      	str	r1, [sp, #4]
	vprint(fmt, argp);
 800305c:	f7ff ffe0 	bl	8003020 <vprint>
	va_end(argp);
}
 8003060:	b003      	add	sp, #12
 8003062:	f85d eb04 	ldr.w	lr, [sp], #4
 8003066:	b004      	add	sp, #16
 8003068:	4770      	bx	lr
	...

0800306c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800306c:	b530      	push	{r4, r5, lr}
 800306e:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003070:	2214      	movs	r2, #20
 8003072:	2100      	movs	r1, #0
 8003074:	a809      	add	r0, sp, #36	; 0x24
 8003076:	f000 fa77 	bl	8003568 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800307a:	2214      	movs	r2, #20
 800307c:	2100      	movs	r1, #0
 800307e:	a803      	add	r0, sp, #12
 8003080:	f000 fa72 	bl	8003568 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8003084:	2400      	movs	r4, #0
 8003086:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <SystemClock_Config+0x8c>)
 8003088:	9401      	str	r4, [sp, #4]
 800308a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800308c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003094:	4a19      	ldr	r2, [pc, #100]	; (80030fc <SystemClock_Config+0x90>)
	__HAL_RCC_PWR_CLK_ENABLE()
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800309e:	9402      	str	r4, [sp, #8]
 80030a0:	6813      	ldr	r3, [r2, #0]
 80030a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80030a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	6813      	ldr	r3, [r2, #0]
 80030ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030b2:	9302      	str	r3, [sp, #8]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030b4:	2201      	movs	r2, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80030b6:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030b8:	2310      	movs	r3, #16
 80030ba:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 16;
 80030be:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80030c0:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80030c4:	2304      	movs	r3, #4
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030c6:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80030c8:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80030cc:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80030ce:	2307      	movs	r3, #7
 80030d0:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030d2:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030d6:	9508      	str	r5, [sp, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80030d8:	f7ff fa18 	bl	800250c <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80030dc:	230f      	movs	r3, #15
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030de:	e9cd 3503 	strd	r3, r5, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80030e2:	4629      	mov	r1, r5
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80030e8:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030ea:	e9cd 3406 	strd	r3, r4, [sp, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030ee:	9405      	str	r4, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80030f0:	f7ff fbc0 	bl	8002874 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
}
 80030f4:	b015      	add	sp, #84	; 0x54
 80030f6:	bd30      	pop	{r4, r5, pc}
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40007000 	.word	0x40007000

08003100 <main>:
int main(void) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b08e      	sub	sp, #56	; 0x38
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003104:	ae09      	add	r6, sp, #36	; 0x24
	HAL_Init();
 8003106:	f7fd fef7 	bl	8000ef8 <HAL_Init>
	SystemClock_Config();
 800310a:	f7ff ffaf 	bl	800306c <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800310e:	2214      	movs	r2, #20
 8003110:	2100      	movs	r1, #0
 8003112:	4630      	mov	r0, r6
 8003114:	f000 fa28 	bl	8003568 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003118:	2400      	movs	r4, #0
 800311a:	4b41      	ldr	r3, [pc, #260]	; (8003220 <main+0x120>)
 800311c:	9406      	str	r4, [sp, #24]
 800311e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003120:	4840      	ldr	r0, [pc, #256]	; (8003224 <main+0x124>)
	hi2c1.Instance = I2C1;
 8003122:	4d41      	ldr	r5, [pc, #260]	; (8003228 <main+0x128>)
	huart2.Init.BaudRate = 115200;
 8003124:	4f41      	ldr	r7, [pc, #260]	; (800322c <main+0x12c>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003126:	f042 0204 	orr.w	r2, r2, #4
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
 800312c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312e:	f002 0204 	and.w	r2, r2, #4
 8003132:	9206      	str	r2, [sp, #24]
 8003134:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8003136:	9407      	str	r4, [sp, #28]
 8003138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
 8003140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003142:	f002 0201 	and.w	r2, r2, #1
 8003146:	9207      	str	r2, [sp, #28]
 8003148:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800314a:	9408      	str	r4, [sp, #32]
 800314c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314e:	f042 0202 	orr.w	r2, r2, #2
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f003 0302 	and.w	r3, r3, #2
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800315a:	4622      	mov	r2, r4
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800315c:	9308      	str	r3, [sp, #32]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800315e:	2120      	movs	r1, #32
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003160:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003162:	f7fe f851 	bl	8001208 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003166:	4b32      	ldr	r3, [pc, #200]	; (8003230 <main+0x130>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003168:	4832      	ldr	r0, [pc, #200]	; (8003234 <main+0x134>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316a:	940b      	str	r4, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800316c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003170:	4631      	mov	r1, r6
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003172:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003176:	f7fd ff7d 	bl	8001074 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800317a:	2301      	movs	r3, #1
 800317c:	2120      	movs	r1, #32
 800317e:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003182:	4828      	ldr	r0, [pc, #160]	; (8003224 <main+0x124>)
 8003184:	4631      	mov	r1, r6
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800318a:	f7fd ff73 	bl	8001074 <HAL_GPIO_Init>
	hi2c1.Init.ClockSpeed = 100000;
 800318e:	482a      	ldr	r0, [pc, #168]	; (8003238 <main+0x138>)
 8003190:	4b2a      	ldr	r3, [pc, #168]	; (800323c <main+0x13c>)
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003192:	622c      	str	r4, [r5, #32]
	hi2c1.Init.ClockSpeed = 100000;
 8003194:	e9c5 0300 	strd	r0, r3, [r5]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003198:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800319c:	4628      	mov	r0, r5
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800319e:	e9c5 3404 	strd	r3, r4, [r5, #16]
	hi2c1.Init.OwnAddress1 = 0;
 80031a2:	e9c5 4402 	strd	r4, r4, [r5, #8]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031a6:	e9c5 4406 	strd	r4, r4, [r5, #24]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80031aa:	f7fe f935 	bl	8001418 <HAL_I2C_Init>
	huart2.Instance = USART2;
 80031ae:	4824      	ldr	r0, [pc, #144]	; (8003240 <main+0x140>)
	huart2.Init.BaudRate = 115200;
 80031b0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80031b4:	e9c0 7300 	strd	r7, r3, [r0]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80031b8:	230c      	movs	r3, #12
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ba:	e9c0 3405 	strd	r3, r4, [r0, #20]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80031be:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart2.Init.Parity = UART_PARITY_NONE;
 80031c2:	6104      	str	r4, [r0, #16]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031c4:	61c4      	str	r4, [r0, #28]
	Am2320_ = am2320_Init(&hi2c1, AM2320_ADDRESS);
 80031c6:	466c      	mov	r4, sp
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80031c8:	f7ff fd56 	bl	8002c78 <HAL_UART_Init>
	Am2320_ = am2320_Init(&hi2c1, AM2320_ADDRESS);
 80031cc:	4629      	mov	r1, r5
 80031ce:	4620      	mov	r0, r4
 80031d0:	22b8      	movs	r2, #184	; 0xb8
 80031d2:	f7ff fec1 	bl	8002f58 <am2320_Init>
 80031d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031da:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		my_printf("=====================================\r\n");
 80031de:	4f19      	ldr	r7, [pc, #100]	; (8003244 <main+0x144>)
		my_printf("Temperature: %.1fºC\r\n", temperature);
 80031e0:	4d19      	ldr	r5, [pc, #100]	; (8003248 <main+0x148>)
		my_printf("Humidity: %.1f%%\r\n", humidity);
 80031e2:	4c1a      	ldr	r4, [pc, #104]	; (800324c <main+0x14c>)
		am2320_GetTemperatureAndHumidity(&Am2320_, &temperature, &humidity);
 80031e4:	aa05      	add	r2, sp, #20
 80031e6:	a904      	add	r1, sp, #16
 80031e8:	4630      	mov	r0, r6
 80031ea:	f7ff fef1 	bl	8002fd0 <am2320_GetTemperatureAndHumidity>
		my_printf("=====================================\r\n");
 80031ee:	4638      	mov	r0, r7
 80031f0:	f7ff ff2e 	bl	8003050 <my_printf>
		my_printf("Temperature: %.1fºC\r\n", temperature);
 80031f4:	9804      	ldr	r0, [sp, #16]
 80031f6:	f7fd f9af 	bl	8000558 <__aeabi_f2d>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4628      	mov	r0, r5
 8003200:	f7ff ff26 	bl	8003050 <my_printf>
		my_printf("Humidity: %.1f%%\r\n", humidity);
 8003204:	9805      	ldr	r0, [sp, #20]
 8003206:	f7fd f9a7 	bl	8000558 <__aeabi_f2d>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4620      	mov	r0, r4
 8003210:	f7ff ff1e 	bl	8003050 <my_printf>
		HAL_Delay(3000);
 8003214:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003218:	f7fd fe9a 	bl	8000f50 <HAL_Delay>
	while (1) {
 800321c:	e7e2      	b.n	80031e4 <main+0xe4>
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	40020000 	.word	0x40020000
 8003228:	20000208 	.word	0x20000208
 800322c:	40004400 	.word	0x40004400
 8003230:	10210000 	.word	0x10210000
 8003234:	40020800 	.word	0x40020800
 8003238:	40005400 	.word	0x40005400
 800323c:	000186a0 	.word	0x000186a0
 8003240:	2000025c 	.word	0x2000025c
 8003244:	080062c3 	.word	0x080062c3
 8003248:	080062eb 	.word	0x080062eb
 800324c:	08006302 	.word	0x08006302

08003250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003250:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003252:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <HAL_MspInit+0x38>)
 8003254:	2100      	movs	r1, #0
 8003256:	9100      	str	r1, [sp, #0]
 8003258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800325a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800325e:	645a      	str	r2, [r3, #68]	; 0x44
 8003260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003262:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003266:	9200      	str	r2, [sp, #0]
 8003268:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	9101      	str	r1, [sp, #4]
 800326c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800326e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003272:	641a      	str	r2, [r3, #64]	; 0x40
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800327e:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003280:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003282:	f7fd be79 	b.w	8000f78 <HAL_NVIC_SetPriorityGrouping>
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800

0800328c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800328c:	b510      	push	{r4, lr}
 800328e:	4604      	mov	r4, r0
 8003290:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003292:	2214      	movs	r2, #20
 8003294:	2100      	movs	r1, #0
 8003296:	a803      	add	r0, sp, #12
 8003298:	f000 f966 	bl	8003568 <memset>
  if(hi2c->Instance==I2C1)
 800329c:	6822      	ldr	r2, [r4, #0]
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <HAL_I2C_MspInit+0x88>)
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d134      	bne.n	800330e <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a4:	4c1c      	ldr	r4, [pc, #112]	; (8003318 <HAL_I2C_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a6:	481d      	ldr	r0, [pc, #116]	; (800331c <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a8:	2200      	movs	r2, #0
 80032aa:	9201      	str	r2, [sp, #4]
 80032ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032ae:	f043 0302 	orr.w	r3, r3, #2
 80032b2:	6323      	str	r3, [r4, #48]	; 0x30
 80032b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032bc:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032c2:	2312      	movs	r3, #18
 80032c4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c8:	2101      	movs	r1, #1
 80032ca:	2303      	movs	r3, #3
 80032cc:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032d0:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032d4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d6:	f7fd fecd 	bl	8001074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032da:	2200      	movs	r2, #0
 80032dc:	9202      	str	r2, [sp, #8]
 80032de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032e4:	6423      	str	r3, [r4, #64]	; 0x40
 80032e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80032ec:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032ee:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80032f0:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032f2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80032f4:	f7fd fe52 	bl	8000f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80032f8:	201f      	movs	r0, #31
 80032fa:	f7fd fe81 	bl	8001000 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80032fe:	2200      	movs	r2, #0
 8003300:	2020      	movs	r0, #32
 8003302:	4611      	mov	r1, r2
 8003304:	f7fd fe4a 	bl	8000f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003308:	2020      	movs	r0, #32
 800330a:	f7fd fe79 	bl	8001000 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800330e:	b008      	add	sp, #32
 8003310:	bd10      	pop	{r4, pc}
 8003312:	bf00      	nop
 8003314:	40005400 	.word	0x40005400
 8003318:	40023800 	.word	0x40023800
 800331c:	40020400 	.word	0x40020400

08003320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003320:	b510      	push	{r4, lr}
 8003322:	4604      	mov	r4, r0
 8003324:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003326:	2214      	movs	r2, #20
 8003328:	2100      	movs	r1, #0
 800332a:	a803      	add	r0, sp, #12
 800332c:	f000 f91c 	bl	8003568 <memset>
  if(huart->Instance==USART2)
 8003330:	6822      	ldr	r2, [r4, #0]
 8003332:	4b18      	ldr	r3, [pc, #96]	; (8003394 <HAL_UART_MspInit+0x74>)
 8003334:	429a      	cmp	r2, r3
 8003336:	d12a      	bne.n	800338e <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003338:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800333c:	2400      	movs	r4, #0
 800333e:	9401      	str	r4, [sp, #4]
 8003340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003342:	4815      	ldr	r0, [pc, #84]	; (8003398 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003344:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003348:	641a      	str	r2, [r3, #64]	; 0x40
 800334a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800334c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003350:	9201      	str	r2, [sp, #4]
 8003352:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003354:	9402      	str	r4, [sp, #8]
 8003356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003358:	f042 0201 	orr.w	r2, r2, #1
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003366:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003368:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336a:	2302      	movs	r3, #2
 800336c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003370:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003372:	2307      	movs	r3, #7
 8003374:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003376:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337a:	f7fd fe7b 	bl	8001074 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800337e:	2026      	movs	r0, #38	; 0x26
 8003380:	4622      	mov	r2, r4
 8003382:	4621      	mov	r1, r4
 8003384:	f7fd fe0a 	bl	8000f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003388:	2026      	movs	r0, #38	; 0x26
 800338a:	f7fd fe39 	bl	8001000 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800338e:	b008      	add	sp, #32
 8003390:	bd10      	pop	{r4, pc}
 8003392:	bf00      	nop
 8003394:	40004400 	.word	0x40004400
 8003398:	40020000 	.word	0x40020000

0800339c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800339c:	4770      	bx	lr

0800339e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800339e:	e7fe      	b.n	800339e <HardFault_Handler>

080033a0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a0:	e7fe      	b.n	80033a0 <MemManage_Handler>

080033a2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033a2:	e7fe      	b.n	80033a2 <BusFault_Handler>

080033a4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033a4:	e7fe      	b.n	80033a4 <UsageFault_Handler>

080033a6 <SVC_Handler>:
 80033a6:	4770      	bx	lr

080033a8 <DebugMon_Handler>:
 80033a8:	4770      	bx	lr

080033aa <PendSV_Handler>:
 80033aa:	4770      	bx	lr

080033ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ac:	f7fd bdbe 	b.w	8000f2c <HAL_IncTick>

080033b0 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80033b0:	4801      	ldr	r0, [pc, #4]	; (80033b8 <I2C1_EV_IRQHandler+0x8>)
 80033b2:	f7fe bbf5 	b.w	8001ba0 <HAL_I2C_EV_IRQHandler>
 80033b6:	bf00      	nop
 80033b8:	20000208 	.word	0x20000208

080033bc <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80033bc:	4801      	ldr	r0, [pc, #4]	; (80033c4 <I2C1_ER_IRQHandler+0x8>)
 80033be:	f7ff b80b 	b.w	80023d8 <HAL_I2C_ER_IRQHandler>
 80033c2:	bf00      	nop
 80033c4:	20000208 	.word	0x20000208

080033c8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033c8:	4801      	ldr	r0, [pc, #4]	; (80033d0 <USART2_IRQHandler+0x8>)
 80033ca:	f7ff bd1d 	b.w	8002e08 <HAL_UART_IRQHandler>
 80033ce:	bf00      	nop
 80033d0:	2000025c 	.word	0x2000025c

080033d4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80033d4:	2001      	movs	r0, #1
 80033d6:	4770      	bx	lr

080033d8 <_kill>:

int _kill(int pid, int sig)
{
 80033d8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80033da:	f000 f89b 	bl	8003514 <__errno>
 80033de:	2316      	movs	r3, #22
 80033e0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80033e2:	f04f 30ff 	mov.w	r0, #4294967295
 80033e6:	bd08      	pop	{r3, pc}

080033e8 <_exit>:

void _exit (int status)
{
 80033e8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80033ea:	f000 f893 	bl	8003514 <__errno>
 80033ee:	2316      	movs	r3, #22
 80033f0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80033f2:	e7fe      	b.n	80033f2 <_exit+0xa>

080033f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	460e      	mov	r6, r1
 80033f8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033fa:	2500      	movs	r5, #0
 80033fc:	42a5      	cmp	r5, r4
 80033fe:	db01      	blt.n	8003404 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8003400:	4620      	mov	r0, r4
 8003402:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8003404:	f3af 8000 	nop.w
 8003408:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800340a:	3501      	adds	r5, #1
 800340c:	e7f6      	b.n	80033fc <_read+0x8>

0800340e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800340e:	b570      	push	{r4, r5, r6, lr}
 8003410:	460e      	mov	r6, r1
 8003412:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003414:	2500      	movs	r5, #0
 8003416:	42a5      	cmp	r5, r4
 8003418:	db01      	blt.n	800341e <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800341a:	4620      	mov	r0, r4
 800341c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800341e:	5d70      	ldrb	r0, [r6, r5]
 8003420:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003424:	3501      	adds	r5, #1
 8003426:	e7f6      	b.n	8003416 <_write+0x8>

08003428 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8003428:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <_sbrk+0x2c>)
 800342c:	6819      	ldr	r1, [r3, #0]
{
 800342e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003430:	b909      	cbnz	r1, 8003436 <_sbrk+0xe>
		heap_end = &end;
 8003432:	4909      	ldr	r1, [pc, #36]	; (8003458 <_sbrk+0x30>)
 8003434:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8003436:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003438:	4669      	mov	r1, sp
 800343a:	4402      	add	r2, r0
 800343c:	428a      	cmp	r2, r1
 800343e:	d906      	bls.n	800344e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003440:	f000 f868 	bl	8003514 <__errno>
 8003444:	230c      	movs	r3, #12
 8003446:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800344c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800344e:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8003450:	e7fc      	b.n	800344c <_sbrk+0x24>
 8003452:	bf00      	nop
 8003454:	200001f8 	.word	0x200001f8
 8003458:	200002ac 	.word	0x200002ac

0800345c <_close>:

int _close(int file)
{
	return -1;
}
 800345c:	f04f 30ff 	mov.w	r0, #4294967295
 8003460:	4770      	bx	lr

08003462 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003466:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003468:	2000      	movs	r0, #0
 800346a:	4770      	bx	lr

0800346c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800346c:	2001      	movs	r0, #1
 800346e:	4770      	bx	lr

08003470 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003470:	2000      	movs	r0, #0
 8003472:	4770      	bx	lr

08003474 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003474:	490f      	ldr	r1, [pc, #60]	; (80034b4 <SystemInit+0x40>)
 8003476:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800347a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <SystemInit+0x44>)
 8003484:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003486:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800348e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003496:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800349a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800349c:	4a07      	ldr	r2, [pc, #28]	; (80034bc <SystemInit+0x48>)
 800349e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034a6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80034a8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034ae:	608b      	str	r3, [r1, #8]
#endif
}
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	e000ed00 	.word	0xe000ed00
 80034b8:	40023800 	.word	0x40023800
 80034bc:	24003010 	.word	0x24003010

080034c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034c6:	e003      	b.n	80034d0 <LoopCopyDataInit>

080034c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034c8:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034ce:	3104      	adds	r1, #4

080034d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034d0:	480b      	ldr	r0, [pc, #44]	; (8003500 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034d8:	d3f6      	bcc.n	80034c8 <CopyDataInit>
  ldr  r2, =_sbss
 80034da:	4a0b      	ldr	r2, [pc, #44]	; (8003508 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034dc:	e002      	b.n	80034e4 <LoopFillZerobss>

080034de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034e0:	f842 3b04 	str.w	r3, [r2], #4

080034e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034e4:	4b09      	ldr	r3, [pc, #36]	; (800350c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034e8:	d3f9      	bcc.n	80034de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034ea:	f7ff ffc3 	bl	8003474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034ee:	f000 f817 	bl	8003520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034f2:	f7ff fe05 	bl	8003100 <main>
  bx  lr    
 80034f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034f8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80034fc:	08006724 	.word	0x08006724
  ldr  r0, =_sdata
 8003500:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003504:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8003508:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800350c:	200002ac 	.word	0x200002ac

08003510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003510:	e7fe      	b.n	8003510 <ADC_IRQHandler>
	...

08003514 <__errno>:
 8003514:	4b01      	ldr	r3, [pc, #4]	; (800351c <__errno+0x8>)
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	2000000c 	.word	0x2000000c

08003520 <__libc_init_array>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	4d0d      	ldr	r5, [pc, #52]	; (8003558 <__libc_init_array+0x38>)
 8003524:	4c0d      	ldr	r4, [pc, #52]	; (800355c <__libc_init_array+0x3c>)
 8003526:	1b64      	subs	r4, r4, r5
 8003528:	10a4      	asrs	r4, r4, #2
 800352a:	2600      	movs	r6, #0
 800352c:	42a6      	cmp	r6, r4
 800352e:	d109      	bne.n	8003544 <__libc_init_array+0x24>
 8003530:	4d0b      	ldr	r5, [pc, #44]	; (8003560 <__libc_init_array+0x40>)
 8003532:	4c0c      	ldr	r4, [pc, #48]	; (8003564 <__libc_init_array+0x44>)
 8003534:	f002 feb6 	bl	80062a4 <_init>
 8003538:	1b64      	subs	r4, r4, r5
 800353a:	10a4      	asrs	r4, r4, #2
 800353c:	2600      	movs	r6, #0
 800353e:	42a6      	cmp	r6, r4
 8003540:	d105      	bne.n	800354e <__libc_init_array+0x2e>
 8003542:	bd70      	pop	{r4, r5, r6, pc}
 8003544:	f855 3b04 	ldr.w	r3, [r5], #4
 8003548:	4798      	blx	r3
 800354a:	3601      	adds	r6, #1
 800354c:	e7ee      	b.n	800352c <__libc_init_array+0xc>
 800354e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003552:	4798      	blx	r3
 8003554:	3601      	adds	r6, #1
 8003556:	e7f2      	b.n	800353e <__libc_init_array+0x1e>
 8003558:	0800671c 	.word	0x0800671c
 800355c:	0800671c 	.word	0x0800671c
 8003560:	0800671c 	.word	0x0800671c
 8003564:	08006720 	.word	0x08006720

08003568 <memset>:
 8003568:	4402      	add	r2, r0
 800356a:	4603      	mov	r3, r0
 800356c:	4293      	cmp	r3, r2
 800356e:	d100      	bne.n	8003572 <memset+0xa>
 8003570:	4770      	bx	lr
 8003572:	f803 1b01 	strb.w	r1, [r3], #1
 8003576:	e7f9      	b.n	800356c <memset+0x4>

08003578 <__cvt>:
 8003578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800357c:	ec55 4b10 	vmov	r4, r5, d0
 8003580:	2d00      	cmp	r5, #0
 8003582:	460e      	mov	r6, r1
 8003584:	4619      	mov	r1, r3
 8003586:	462b      	mov	r3, r5
 8003588:	bfbb      	ittet	lt
 800358a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800358e:	461d      	movlt	r5, r3
 8003590:	2300      	movge	r3, #0
 8003592:	232d      	movlt	r3, #45	; 0x2d
 8003594:	700b      	strb	r3, [r1, #0]
 8003596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003598:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800359c:	4691      	mov	r9, r2
 800359e:	f023 0820 	bic.w	r8, r3, #32
 80035a2:	bfbc      	itt	lt
 80035a4:	4622      	movlt	r2, r4
 80035a6:	4614      	movlt	r4, r2
 80035a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80035ac:	d005      	beq.n	80035ba <__cvt+0x42>
 80035ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80035b2:	d100      	bne.n	80035b6 <__cvt+0x3e>
 80035b4:	3601      	adds	r6, #1
 80035b6:	2102      	movs	r1, #2
 80035b8:	e000      	b.n	80035bc <__cvt+0x44>
 80035ba:	2103      	movs	r1, #3
 80035bc:	ab03      	add	r3, sp, #12
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	ab02      	add	r3, sp, #8
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	ec45 4b10 	vmov	d0, r4, r5
 80035c8:	4653      	mov	r3, sl
 80035ca:	4632      	mov	r2, r6
 80035cc:	f000 fcec 	bl	8003fa8 <_dtoa_r>
 80035d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80035d4:	4607      	mov	r7, r0
 80035d6:	d102      	bne.n	80035de <__cvt+0x66>
 80035d8:	f019 0f01 	tst.w	r9, #1
 80035dc:	d022      	beq.n	8003624 <__cvt+0xac>
 80035de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80035e2:	eb07 0906 	add.w	r9, r7, r6
 80035e6:	d110      	bne.n	800360a <__cvt+0x92>
 80035e8:	783b      	ldrb	r3, [r7, #0]
 80035ea:	2b30      	cmp	r3, #48	; 0x30
 80035ec:	d10a      	bne.n	8003604 <__cvt+0x8c>
 80035ee:	2200      	movs	r2, #0
 80035f0:	2300      	movs	r3, #0
 80035f2:	4620      	mov	r0, r4
 80035f4:	4629      	mov	r1, r5
 80035f6:	f7fd fa6f 	bl	8000ad8 <__aeabi_dcmpeq>
 80035fa:	b918      	cbnz	r0, 8003604 <__cvt+0x8c>
 80035fc:	f1c6 0601 	rsb	r6, r6, #1
 8003600:	f8ca 6000 	str.w	r6, [sl]
 8003604:	f8da 3000 	ldr.w	r3, [sl]
 8003608:	4499      	add	r9, r3
 800360a:	2200      	movs	r2, #0
 800360c:	2300      	movs	r3, #0
 800360e:	4620      	mov	r0, r4
 8003610:	4629      	mov	r1, r5
 8003612:	f7fd fa61 	bl	8000ad8 <__aeabi_dcmpeq>
 8003616:	b108      	cbz	r0, 800361c <__cvt+0xa4>
 8003618:	f8cd 900c 	str.w	r9, [sp, #12]
 800361c:	2230      	movs	r2, #48	; 0x30
 800361e:	9b03      	ldr	r3, [sp, #12]
 8003620:	454b      	cmp	r3, r9
 8003622:	d307      	bcc.n	8003634 <__cvt+0xbc>
 8003624:	9b03      	ldr	r3, [sp, #12]
 8003626:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003628:	1bdb      	subs	r3, r3, r7
 800362a:	4638      	mov	r0, r7
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	b004      	add	sp, #16
 8003630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003634:	1c59      	adds	r1, r3, #1
 8003636:	9103      	str	r1, [sp, #12]
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e7f0      	b.n	800361e <__cvt+0xa6>

0800363c <__exponent>:
 800363c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800363e:	4603      	mov	r3, r0
 8003640:	2900      	cmp	r1, #0
 8003642:	bfb8      	it	lt
 8003644:	4249      	neglt	r1, r1
 8003646:	f803 2b02 	strb.w	r2, [r3], #2
 800364a:	bfb4      	ite	lt
 800364c:	222d      	movlt	r2, #45	; 0x2d
 800364e:	222b      	movge	r2, #43	; 0x2b
 8003650:	2909      	cmp	r1, #9
 8003652:	7042      	strb	r2, [r0, #1]
 8003654:	dd2a      	ble.n	80036ac <__exponent+0x70>
 8003656:	f10d 0407 	add.w	r4, sp, #7
 800365a:	46a4      	mov	ip, r4
 800365c:	270a      	movs	r7, #10
 800365e:	46a6      	mov	lr, r4
 8003660:	460a      	mov	r2, r1
 8003662:	fb91 f6f7 	sdiv	r6, r1, r7
 8003666:	fb07 1516 	mls	r5, r7, r6, r1
 800366a:	3530      	adds	r5, #48	; 0x30
 800366c:	2a63      	cmp	r2, #99	; 0x63
 800366e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003672:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003676:	4631      	mov	r1, r6
 8003678:	dcf1      	bgt.n	800365e <__exponent+0x22>
 800367a:	3130      	adds	r1, #48	; 0x30
 800367c:	f1ae 0502 	sub.w	r5, lr, #2
 8003680:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003684:	1c44      	adds	r4, r0, #1
 8003686:	4629      	mov	r1, r5
 8003688:	4561      	cmp	r1, ip
 800368a:	d30a      	bcc.n	80036a2 <__exponent+0x66>
 800368c:	f10d 0209 	add.w	r2, sp, #9
 8003690:	eba2 020e 	sub.w	r2, r2, lr
 8003694:	4565      	cmp	r5, ip
 8003696:	bf88      	it	hi
 8003698:	2200      	movhi	r2, #0
 800369a:	4413      	add	r3, r2
 800369c:	1a18      	subs	r0, r3, r0
 800369e:	b003      	add	sp, #12
 80036a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80036aa:	e7ed      	b.n	8003688 <__exponent+0x4c>
 80036ac:	2330      	movs	r3, #48	; 0x30
 80036ae:	3130      	adds	r1, #48	; 0x30
 80036b0:	7083      	strb	r3, [r0, #2]
 80036b2:	70c1      	strb	r1, [r0, #3]
 80036b4:	1d03      	adds	r3, r0, #4
 80036b6:	e7f1      	b.n	800369c <__exponent+0x60>

080036b8 <_printf_float>:
 80036b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036bc:	ed2d 8b02 	vpush	{d8}
 80036c0:	b08d      	sub	sp, #52	; 0x34
 80036c2:	460c      	mov	r4, r1
 80036c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80036c8:	4616      	mov	r6, r2
 80036ca:	461f      	mov	r7, r3
 80036cc:	4605      	mov	r5, r0
 80036ce:	f001 fa57 	bl	8004b80 <_localeconv_r>
 80036d2:	f8d0 a000 	ldr.w	sl, [r0]
 80036d6:	4650      	mov	r0, sl
 80036d8:	f7fc fd82 	bl	80001e0 <strlen>
 80036dc:	2300      	movs	r3, #0
 80036de:	930a      	str	r3, [sp, #40]	; 0x28
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	9305      	str	r3, [sp, #20]
 80036e4:	f8d8 3000 	ldr.w	r3, [r8]
 80036e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80036ec:	3307      	adds	r3, #7
 80036ee:	f023 0307 	bic.w	r3, r3, #7
 80036f2:	f103 0208 	add.w	r2, r3, #8
 80036f6:	f8c8 2000 	str.w	r2, [r8]
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003702:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003706:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800370a:	9307      	str	r3, [sp, #28]
 800370c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003710:	ee08 0a10 	vmov	s16, r0
 8003714:	4b9f      	ldr	r3, [pc, #636]	; (8003994 <_printf_float+0x2dc>)
 8003716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800371a:	f04f 32ff 	mov.w	r2, #4294967295
 800371e:	f7fd fa0d 	bl	8000b3c <__aeabi_dcmpun>
 8003722:	bb88      	cbnz	r0, 8003788 <_printf_float+0xd0>
 8003724:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003728:	4b9a      	ldr	r3, [pc, #616]	; (8003994 <_printf_float+0x2dc>)
 800372a:	f04f 32ff 	mov.w	r2, #4294967295
 800372e:	f7fd f9e7 	bl	8000b00 <__aeabi_dcmple>
 8003732:	bb48      	cbnz	r0, 8003788 <_printf_float+0xd0>
 8003734:	2200      	movs	r2, #0
 8003736:	2300      	movs	r3, #0
 8003738:	4640      	mov	r0, r8
 800373a:	4649      	mov	r1, r9
 800373c:	f7fd f9d6 	bl	8000aec <__aeabi_dcmplt>
 8003740:	b110      	cbz	r0, 8003748 <_printf_float+0x90>
 8003742:	232d      	movs	r3, #45	; 0x2d
 8003744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003748:	4b93      	ldr	r3, [pc, #588]	; (8003998 <_printf_float+0x2e0>)
 800374a:	4894      	ldr	r0, [pc, #592]	; (800399c <_printf_float+0x2e4>)
 800374c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003750:	bf94      	ite	ls
 8003752:	4698      	movls	r8, r3
 8003754:	4680      	movhi	r8, r0
 8003756:	2303      	movs	r3, #3
 8003758:	6123      	str	r3, [r4, #16]
 800375a:	9b05      	ldr	r3, [sp, #20]
 800375c:	f023 0204 	bic.w	r2, r3, #4
 8003760:	6022      	str	r2, [r4, #0]
 8003762:	f04f 0900 	mov.w	r9, #0
 8003766:	9700      	str	r7, [sp, #0]
 8003768:	4633      	mov	r3, r6
 800376a:	aa0b      	add	r2, sp, #44	; 0x2c
 800376c:	4621      	mov	r1, r4
 800376e:	4628      	mov	r0, r5
 8003770:	f000 f9d8 	bl	8003b24 <_printf_common>
 8003774:	3001      	adds	r0, #1
 8003776:	f040 8090 	bne.w	800389a <_printf_float+0x1e2>
 800377a:	f04f 30ff 	mov.w	r0, #4294967295
 800377e:	b00d      	add	sp, #52	; 0x34
 8003780:	ecbd 8b02 	vpop	{d8}
 8003784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003788:	4642      	mov	r2, r8
 800378a:	464b      	mov	r3, r9
 800378c:	4640      	mov	r0, r8
 800378e:	4649      	mov	r1, r9
 8003790:	f7fd f9d4 	bl	8000b3c <__aeabi_dcmpun>
 8003794:	b140      	cbz	r0, 80037a8 <_printf_float+0xf0>
 8003796:	464b      	mov	r3, r9
 8003798:	2b00      	cmp	r3, #0
 800379a:	bfbc      	itt	lt
 800379c:	232d      	movlt	r3, #45	; 0x2d
 800379e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80037a2:	487f      	ldr	r0, [pc, #508]	; (80039a0 <_printf_float+0x2e8>)
 80037a4:	4b7f      	ldr	r3, [pc, #508]	; (80039a4 <_printf_float+0x2ec>)
 80037a6:	e7d1      	b.n	800374c <_printf_float+0x94>
 80037a8:	6863      	ldr	r3, [r4, #4]
 80037aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80037ae:	9206      	str	r2, [sp, #24]
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	d13f      	bne.n	8003834 <_printf_float+0x17c>
 80037b4:	2306      	movs	r3, #6
 80037b6:	6063      	str	r3, [r4, #4]
 80037b8:	9b05      	ldr	r3, [sp, #20]
 80037ba:	6861      	ldr	r1, [r4, #4]
 80037bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80037c0:	2300      	movs	r3, #0
 80037c2:	9303      	str	r3, [sp, #12]
 80037c4:	ab0a      	add	r3, sp, #40	; 0x28
 80037c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80037ca:	ab09      	add	r3, sp, #36	; 0x24
 80037cc:	ec49 8b10 	vmov	d0, r8, r9
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	6022      	str	r2, [r4, #0]
 80037d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80037d8:	4628      	mov	r0, r5
 80037da:	f7ff fecd 	bl	8003578 <__cvt>
 80037de:	9b06      	ldr	r3, [sp, #24]
 80037e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80037e2:	2b47      	cmp	r3, #71	; 0x47
 80037e4:	4680      	mov	r8, r0
 80037e6:	d108      	bne.n	80037fa <_printf_float+0x142>
 80037e8:	1cc8      	adds	r0, r1, #3
 80037ea:	db02      	blt.n	80037f2 <_printf_float+0x13a>
 80037ec:	6863      	ldr	r3, [r4, #4]
 80037ee:	4299      	cmp	r1, r3
 80037f0:	dd41      	ble.n	8003876 <_printf_float+0x1be>
 80037f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80037f6:	fa5f fb8b 	uxtb.w	fp, fp
 80037fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80037fe:	d820      	bhi.n	8003842 <_printf_float+0x18a>
 8003800:	3901      	subs	r1, #1
 8003802:	465a      	mov	r2, fp
 8003804:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003808:	9109      	str	r1, [sp, #36]	; 0x24
 800380a:	f7ff ff17 	bl	800363c <__exponent>
 800380e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003810:	1813      	adds	r3, r2, r0
 8003812:	2a01      	cmp	r2, #1
 8003814:	4681      	mov	r9, r0
 8003816:	6123      	str	r3, [r4, #16]
 8003818:	dc02      	bgt.n	8003820 <_printf_float+0x168>
 800381a:	6822      	ldr	r2, [r4, #0]
 800381c:	07d2      	lsls	r2, r2, #31
 800381e:	d501      	bpl.n	8003824 <_printf_float+0x16c>
 8003820:	3301      	adds	r3, #1
 8003822:	6123      	str	r3, [r4, #16]
 8003824:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003828:	2b00      	cmp	r3, #0
 800382a:	d09c      	beq.n	8003766 <_printf_float+0xae>
 800382c:	232d      	movs	r3, #45	; 0x2d
 800382e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003832:	e798      	b.n	8003766 <_printf_float+0xae>
 8003834:	9a06      	ldr	r2, [sp, #24]
 8003836:	2a47      	cmp	r2, #71	; 0x47
 8003838:	d1be      	bne.n	80037b8 <_printf_float+0x100>
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1bc      	bne.n	80037b8 <_printf_float+0x100>
 800383e:	2301      	movs	r3, #1
 8003840:	e7b9      	b.n	80037b6 <_printf_float+0xfe>
 8003842:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003846:	d118      	bne.n	800387a <_printf_float+0x1c2>
 8003848:	2900      	cmp	r1, #0
 800384a:	6863      	ldr	r3, [r4, #4]
 800384c:	dd0b      	ble.n	8003866 <_printf_float+0x1ae>
 800384e:	6121      	str	r1, [r4, #16]
 8003850:	b913      	cbnz	r3, 8003858 <_printf_float+0x1a0>
 8003852:	6822      	ldr	r2, [r4, #0]
 8003854:	07d0      	lsls	r0, r2, #31
 8003856:	d502      	bpl.n	800385e <_printf_float+0x1a6>
 8003858:	3301      	adds	r3, #1
 800385a:	440b      	add	r3, r1
 800385c:	6123      	str	r3, [r4, #16]
 800385e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003860:	f04f 0900 	mov.w	r9, #0
 8003864:	e7de      	b.n	8003824 <_printf_float+0x16c>
 8003866:	b913      	cbnz	r3, 800386e <_printf_float+0x1b6>
 8003868:	6822      	ldr	r2, [r4, #0]
 800386a:	07d2      	lsls	r2, r2, #31
 800386c:	d501      	bpl.n	8003872 <_printf_float+0x1ba>
 800386e:	3302      	adds	r3, #2
 8003870:	e7f4      	b.n	800385c <_printf_float+0x1a4>
 8003872:	2301      	movs	r3, #1
 8003874:	e7f2      	b.n	800385c <_printf_float+0x1a4>
 8003876:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800387a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800387c:	4299      	cmp	r1, r3
 800387e:	db05      	blt.n	800388c <_printf_float+0x1d4>
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	6121      	str	r1, [r4, #16]
 8003884:	07d8      	lsls	r0, r3, #31
 8003886:	d5ea      	bpl.n	800385e <_printf_float+0x1a6>
 8003888:	1c4b      	adds	r3, r1, #1
 800388a:	e7e7      	b.n	800385c <_printf_float+0x1a4>
 800388c:	2900      	cmp	r1, #0
 800388e:	bfd4      	ite	le
 8003890:	f1c1 0202 	rsble	r2, r1, #2
 8003894:	2201      	movgt	r2, #1
 8003896:	4413      	add	r3, r2
 8003898:	e7e0      	b.n	800385c <_printf_float+0x1a4>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	055a      	lsls	r2, r3, #21
 800389e:	d407      	bmi.n	80038b0 <_printf_float+0x1f8>
 80038a0:	6923      	ldr	r3, [r4, #16]
 80038a2:	4642      	mov	r2, r8
 80038a4:	4631      	mov	r1, r6
 80038a6:	4628      	mov	r0, r5
 80038a8:	47b8      	blx	r7
 80038aa:	3001      	adds	r0, #1
 80038ac:	d12c      	bne.n	8003908 <_printf_float+0x250>
 80038ae:	e764      	b.n	800377a <_printf_float+0xc2>
 80038b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80038b4:	f240 80e0 	bls.w	8003a78 <_printf_float+0x3c0>
 80038b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80038bc:	2200      	movs	r2, #0
 80038be:	2300      	movs	r3, #0
 80038c0:	f7fd f90a 	bl	8000ad8 <__aeabi_dcmpeq>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d034      	beq.n	8003932 <_printf_float+0x27a>
 80038c8:	4a37      	ldr	r2, [pc, #220]	; (80039a8 <_printf_float+0x2f0>)
 80038ca:	2301      	movs	r3, #1
 80038cc:	4631      	mov	r1, r6
 80038ce:	4628      	mov	r0, r5
 80038d0:	47b8      	blx	r7
 80038d2:	3001      	adds	r0, #1
 80038d4:	f43f af51 	beq.w	800377a <_printf_float+0xc2>
 80038d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038dc:	429a      	cmp	r2, r3
 80038de:	db02      	blt.n	80038e6 <_printf_float+0x22e>
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	07d8      	lsls	r0, r3, #31
 80038e4:	d510      	bpl.n	8003908 <_printf_float+0x250>
 80038e6:	ee18 3a10 	vmov	r3, s16
 80038ea:	4652      	mov	r2, sl
 80038ec:	4631      	mov	r1, r6
 80038ee:	4628      	mov	r0, r5
 80038f0:	47b8      	blx	r7
 80038f2:	3001      	adds	r0, #1
 80038f4:	f43f af41 	beq.w	800377a <_printf_float+0xc2>
 80038f8:	f04f 0800 	mov.w	r8, #0
 80038fc:	f104 091a 	add.w	r9, r4, #26
 8003900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003902:	3b01      	subs	r3, #1
 8003904:	4543      	cmp	r3, r8
 8003906:	dc09      	bgt.n	800391c <_printf_float+0x264>
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	079b      	lsls	r3, r3, #30
 800390c:	f100 8105 	bmi.w	8003b1a <_printf_float+0x462>
 8003910:	68e0      	ldr	r0, [r4, #12]
 8003912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003914:	4298      	cmp	r0, r3
 8003916:	bfb8      	it	lt
 8003918:	4618      	movlt	r0, r3
 800391a:	e730      	b.n	800377e <_printf_float+0xc6>
 800391c:	2301      	movs	r3, #1
 800391e:	464a      	mov	r2, r9
 8003920:	4631      	mov	r1, r6
 8003922:	4628      	mov	r0, r5
 8003924:	47b8      	blx	r7
 8003926:	3001      	adds	r0, #1
 8003928:	f43f af27 	beq.w	800377a <_printf_float+0xc2>
 800392c:	f108 0801 	add.w	r8, r8, #1
 8003930:	e7e6      	b.n	8003900 <_printf_float+0x248>
 8003932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003934:	2b00      	cmp	r3, #0
 8003936:	dc39      	bgt.n	80039ac <_printf_float+0x2f4>
 8003938:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <_printf_float+0x2f0>)
 800393a:	2301      	movs	r3, #1
 800393c:	4631      	mov	r1, r6
 800393e:	4628      	mov	r0, r5
 8003940:	47b8      	blx	r7
 8003942:	3001      	adds	r0, #1
 8003944:	f43f af19 	beq.w	800377a <_printf_float+0xc2>
 8003948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800394c:	4313      	orrs	r3, r2
 800394e:	d102      	bne.n	8003956 <_printf_float+0x29e>
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	07d9      	lsls	r1, r3, #31
 8003954:	d5d8      	bpl.n	8003908 <_printf_float+0x250>
 8003956:	ee18 3a10 	vmov	r3, s16
 800395a:	4652      	mov	r2, sl
 800395c:	4631      	mov	r1, r6
 800395e:	4628      	mov	r0, r5
 8003960:	47b8      	blx	r7
 8003962:	3001      	adds	r0, #1
 8003964:	f43f af09 	beq.w	800377a <_printf_float+0xc2>
 8003968:	f04f 0900 	mov.w	r9, #0
 800396c:	f104 0a1a 	add.w	sl, r4, #26
 8003970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003972:	425b      	negs	r3, r3
 8003974:	454b      	cmp	r3, r9
 8003976:	dc01      	bgt.n	800397c <_printf_float+0x2c4>
 8003978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800397a:	e792      	b.n	80038a2 <_printf_float+0x1ea>
 800397c:	2301      	movs	r3, #1
 800397e:	4652      	mov	r2, sl
 8003980:	4631      	mov	r1, r6
 8003982:	4628      	mov	r0, r5
 8003984:	47b8      	blx	r7
 8003986:	3001      	adds	r0, #1
 8003988:	f43f aef7 	beq.w	800377a <_printf_float+0xc2>
 800398c:	f109 0901 	add.w	r9, r9, #1
 8003990:	e7ee      	b.n	8003970 <_printf_float+0x2b8>
 8003992:	bf00      	nop
 8003994:	7fefffff 	.word	0x7fefffff
 8003998:	08006334 	.word	0x08006334
 800399c:	08006338 	.word	0x08006338
 80039a0:	08006340 	.word	0x08006340
 80039a4:	0800633c 	.word	0x0800633c
 80039a8:	08006344 	.word	0x08006344
 80039ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039b0:	429a      	cmp	r2, r3
 80039b2:	bfa8      	it	ge
 80039b4:	461a      	movge	r2, r3
 80039b6:	2a00      	cmp	r2, #0
 80039b8:	4691      	mov	r9, r2
 80039ba:	dc37      	bgt.n	8003a2c <_printf_float+0x374>
 80039bc:	f04f 0b00 	mov.w	fp, #0
 80039c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039c4:	f104 021a 	add.w	r2, r4, #26
 80039c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039ca:	9305      	str	r3, [sp, #20]
 80039cc:	eba3 0309 	sub.w	r3, r3, r9
 80039d0:	455b      	cmp	r3, fp
 80039d2:	dc33      	bgt.n	8003a3c <_printf_float+0x384>
 80039d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039d8:	429a      	cmp	r2, r3
 80039da:	db3b      	blt.n	8003a54 <_printf_float+0x39c>
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	07da      	lsls	r2, r3, #31
 80039e0:	d438      	bmi.n	8003a54 <_printf_float+0x39c>
 80039e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039e4:	9b05      	ldr	r3, [sp, #20]
 80039e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	eba2 0901 	sub.w	r9, r2, r1
 80039ee:	4599      	cmp	r9, r3
 80039f0:	bfa8      	it	ge
 80039f2:	4699      	movge	r9, r3
 80039f4:	f1b9 0f00 	cmp.w	r9, #0
 80039f8:	dc35      	bgt.n	8003a66 <_printf_float+0x3ae>
 80039fa:	f04f 0800 	mov.w	r8, #0
 80039fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a02:	f104 0a1a 	add.w	sl, r4, #26
 8003a06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	eba3 0309 	sub.w	r3, r3, r9
 8003a10:	4543      	cmp	r3, r8
 8003a12:	f77f af79 	ble.w	8003908 <_printf_float+0x250>
 8003a16:	2301      	movs	r3, #1
 8003a18:	4652      	mov	r2, sl
 8003a1a:	4631      	mov	r1, r6
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	47b8      	blx	r7
 8003a20:	3001      	adds	r0, #1
 8003a22:	f43f aeaa 	beq.w	800377a <_printf_float+0xc2>
 8003a26:	f108 0801 	add.w	r8, r8, #1
 8003a2a:	e7ec      	b.n	8003a06 <_printf_float+0x34e>
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	4631      	mov	r1, r6
 8003a30:	4642      	mov	r2, r8
 8003a32:	4628      	mov	r0, r5
 8003a34:	47b8      	blx	r7
 8003a36:	3001      	adds	r0, #1
 8003a38:	d1c0      	bne.n	80039bc <_printf_float+0x304>
 8003a3a:	e69e      	b.n	800377a <_printf_float+0xc2>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	4631      	mov	r1, r6
 8003a40:	4628      	mov	r0, r5
 8003a42:	9205      	str	r2, [sp, #20]
 8003a44:	47b8      	blx	r7
 8003a46:	3001      	adds	r0, #1
 8003a48:	f43f ae97 	beq.w	800377a <_printf_float+0xc2>
 8003a4c:	9a05      	ldr	r2, [sp, #20]
 8003a4e:	f10b 0b01 	add.w	fp, fp, #1
 8003a52:	e7b9      	b.n	80039c8 <_printf_float+0x310>
 8003a54:	ee18 3a10 	vmov	r3, s16
 8003a58:	4652      	mov	r2, sl
 8003a5a:	4631      	mov	r1, r6
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	47b8      	blx	r7
 8003a60:	3001      	adds	r0, #1
 8003a62:	d1be      	bne.n	80039e2 <_printf_float+0x32a>
 8003a64:	e689      	b.n	800377a <_printf_float+0xc2>
 8003a66:	9a05      	ldr	r2, [sp, #20]
 8003a68:	464b      	mov	r3, r9
 8003a6a:	4442      	add	r2, r8
 8003a6c:	4631      	mov	r1, r6
 8003a6e:	4628      	mov	r0, r5
 8003a70:	47b8      	blx	r7
 8003a72:	3001      	adds	r0, #1
 8003a74:	d1c1      	bne.n	80039fa <_printf_float+0x342>
 8003a76:	e680      	b.n	800377a <_printf_float+0xc2>
 8003a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a7a:	2a01      	cmp	r2, #1
 8003a7c:	dc01      	bgt.n	8003a82 <_printf_float+0x3ca>
 8003a7e:	07db      	lsls	r3, r3, #31
 8003a80:	d538      	bpl.n	8003af4 <_printf_float+0x43c>
 8003a82:	2301      	movs	r3, #1
 8003a84:	4642      	mov	r2, r8
 8003a86:	4631      	mov	r1, r6
 8003a88:	4628      	mov	r0, r5
 8003a8a:	47b8      	blx	r7
 8003a8c:	3001      	adds	r0, #1
 8003a8e:	f43f ae74 	beq.w	800377a <_printf_float+0xc2>
 8003a92:	ee18 3a10 	vmov	r3, s16
 8003a96:	4652      	mov	r2, sl
 8003a98:	4631      	mov	r1, r6
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	47b8      	blx	r7
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	f43f ae6b 	beq.w	800377a <_printf_float+0xc2>
 8003aa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f7fd f814 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ab0:	b9d8      	cbnz	r0, 8003aea <_printf_float+0x432>
 8003ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ab4:	f108 0201 	add.w	r2, r8, #1
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	4631      	mov	r1, r6
 8003abc:	4628      	mov	r0, r5
 8003abe:	47b8      	blx	r7
 8003ac0:	3001      	adds	r0, #1
 8003ac2:	d10e      	bne.n	8003ae2 <_printf_float+0x42a>
 8003ac4:	e659      	b.n	800377a <_printf_float+0xc2>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	4652      	mov	r2, sl
 8003aca:	4631      	mov	r1, r6
 8003acc:	4628      	mov	r0, r5
 8003ace:	47b8      	blx	r7
 8003ad0:	3001      	adds	r0, #1
 8003ad2:	f43f ae52 	beq.w	800377a <_printf_float+0xc2>
 8003ad6:	f108 0801 	add.w	r8, r8, #1
 8003ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003adc:	3b01      	subs	r3, #1
 8003ade:	4543      	cmp	r3, r8
 8003ae0:	dcf1      	bgt.n	8003ac6 <_printf_float+0x40e>
 8003ae2:	464b      	mov	r3, r9
 8003ae4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ae8:	e6dc      	b.n	80038a4 <_printf_float+0x1ec>
 8003aea:	f04f 0800 	mov.w	r8, #0
 8003aee:	f104 0a1a 	add.w	sl, r4, #26
 8003af2:	e7f2      	b.n	8003ada <_printf_float+0x422>
 8003af4:	2301      	movs	r3, #1
 8003af6:	4642      	mov	r2, r8
 8003af8:	e7df      	b.n	8003aba <_printf_float+0x402>
 8003afa:	2301      	movs	r3, #1
 8003afc:	464a      	mov	r2, r9
 8003afe:	4631      	mov	r1, r6
 8003b00:	4628      	mov	r0, r5
 8003b02:	47b8      	blx	r7
 8003b04:	3001      	adds	r0, #1
 8003b06:	f43f ae38 	beq.w	800377a <_printf_float+0xc2>
 8003b0a:	f108 0801 	add.w	r8, r8, #1
 8003b0e:	68e3      	ldr	r3, [r4, #12]
 8003b10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b12:	1a5b      	subs	r3, r3, r1
 8003b14:	4543      	cmp	r3, r8
 8003b16:	dcf0      	bgt.n	8003afa <_printf_float+0x442>
 8003b18:	e6fa      	b.n	8003910 <_printf_float+0x258>
 8003b1a:	f04f 0800 	mov.w	r8, #0
 8003b1e:	f104 0919 	add.w	r9, r4, #25
 8003b22:	e7f4      	b.n	8003b0e <_printf_float+0x456>

08003b24 <_printf_common>:
 8003b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b28:	4616      	mov	r6, r2
 8003b2a:	4699      	mov	r9, r3
 8003b2c:	688a      	ldr	r2, [r1, #8]
 8003b2e:	690b      	ldr	r3, [r1, #16]
 8003b30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b34:	4293      	cmp	r3, r2
 8003b36:	bfb8      	it	lt
 8003b38:	4613      	movlt	r3, r2
 8003b3a:	6033      	str	r3, [r6, #0]
 8003b3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b40:	4607      	mov	r7, r0
 8003b42:	460c      	mov	r4, r1
 8003b44:	b10a      	cbz	r2, 8003b4a <_printf_common+0x26>
 8003b46:	3301      	adds	r3, #1
 8003b48:	6033      	str	r3, [r6, #0]
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	0699      	lsls	r1, r3, #26
 8003b4e:	bf42      	ittt	mi
 8003b50:	6833      	ldrmi	r3, [r6, #0]
 8003b52:	3302      	addmi	r3, #2
 8003b54:	6033      	strmi	r3, [r6, #0]
 8003b56:	6825      	ldr	r5, [r4, #0]
 8003b58:	f015 0506 	ands.w	r5, r5, #6
 8003b5c:	d106      	bne.n	8003b6c <_printf_common+0x48>
 8003b5e:	f104 0a19 	add.w	sl, r4, #25
 8003b62:	68e3      	ldr	r3, [r4, #12]
 8003b64:	6832      	ldr	r2, [r6, #0]
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	42ab      	cmp	r3, r5
 8003b6a:	dc26      	bgt.n	8003bba <_printf_common+0x96>
 8003b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b70:	1e13      	subs	r3, r2, #0
 8003b72:	6822      	ldr	r2, [r4, #0]
 8003b74:	bf18      	it	ne
 8003b76:	2301      	movne	r3, #1
 8003b78:	0692      	lsls	r2, r2, #26
 8003b7a:	d42b      	bmi.n	8003bd4 <_printf_common+0xb0>
 8003b7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b80:	4649      	mov	r1, r9
 8003b82:	4638      	mov	r0, r7
 8003b84:	47c0      	blx	r8
 8003b86:	3001      	adds	r0, #1
 8003b88:	d01e      	beq.n	8003bc8 <_printf_common+0xa4>
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	68e5      	ldr	r5, [r4, #12]
 8003b8e:	6832      	ldr	r2, [r6, #0]
 8003b90:	f003 0306 	and.w	r3, r3, #6
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	bf08      	it	eq
 8003b98:	1aad      	subeq	r5, r5, r2
 8003b9a:	68a3      	ldr	r3, [r4, #8]
 8003b9c:	6922      	ldr	r2, [r4, #16]
 8003b9e:	bf0c      	ite	eq
 8003ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ba4:	2500      	movne	r5, #0
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	bfc4      	itt	gt
 8003baa:	1a9b      	subgt	r3, r3, r2
 8003bac:	18ed      	addgt	r5, r5, r3
 8003bae:	2600      	movs	r6, #0
 8003bb0:	341a      	adds	r4, #26
 8003bb2:	42b5      	cmp	r5, r6
 8003bb4:	d11a      	bne.n	8003bec <_printf_common+0xc8>
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	e008      	b.n	8003bcc <_printf_common+0xa8>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	4652      	mov	r2, sl
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	4638      	mov	r0, r7
 8003bc2:	47c0      	blx	r8
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	d103      	bne.n	8003bd0 <_printf_common+0xac>
 8003bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd0:	3501      	adds	r5, #1
 8003bd2:	e7c6      	b.n	8003b62 <_printf_common+0x3e>
 8003bd4:	18e1      	adds	r1, r4, r3
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	2030      	movs	r0, #48	; 0x30
 8003bda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bde:	4422      	add	r2, r4
 8003be0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003be4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003be8:	3302      	adds	r3, #2
 8003bea:	e7c7      	b.n	8003b7c <_printf_common+0x58>
 8003bec:	2301      	movs	r3, #1
 8003bee:	4622      	mov	r2, r4
 8003bf0:	4649      	mov	r1, r9
 8003bf2:	4638      	mov	r0, r7
 8003bf4:	47c0      	blx	r8
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	d0e6      	beq.n	8003bc8 <_printf_common+0xa4>
 8003bfa:	3601      	adds	r6, #1
 8003bfc:	e7d9      	b.n	8003bb2 <_printf_common+0x8e>
	...

08003c00 <_printf_i>:
 8003c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c04:	460c      	mov	r4, r1
 8003c06:	4691      	mov	r9, r2
 8003c08:	7e27      	ldrb	r7, [r4, #24]
 8003c0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c0c:	2f78      	cmp	r7, #120	; 0x78
 8003c0e:	4680      	mov	r8, r0
 8003c10:	469a      	mov	sl, r3
 8003c12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c16:	d807      	bhi.n	8003c28 <_printf_i+0x28>
 8003c18:	2f62      	cmp	r7, #98	; 0x62
 8003c1a:	d80a      	bhi.n	8003c32 <_printf_i+0x32>
 8003c1c:	2f00      	cmp	r7, #0
 8003c1e:	f000 80d8 	beq.w	8003dd2 <_printf_i+0x1d2>
 8003c22:	2f58      	cmp	r7, #88	; 0x58
 8003c24:	f000 80a3 	beq.w	8003d6e <_printf_i+0x16e>
 8003c28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c30:	e03a      	b.n	8003ca8 <_printf_i+0xa8>
 8003c32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c36:	2b15      	cmp	r3, #21
 8003c38:	d8f6      	bhi.n	8003c28 <_printf_i+0x28>
 8003c3a:	a001      	add	r0, pc, #4	; (adr r0, 8003c40 <_printf_i+0x40>)
 8003c3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003c40:	08003c99 	.word	0x08003c99
 8003c44:	08003cad 	.word	0x08003cad
 8003c48:	08003c29 	.word	0x08003c29
 8003c4c:	08003c29 	.word	0x08003c29
 8003c50:	08003c29 	.word	0x08003c29
 8003c54:	08003c29 	.word	0x08003c29
 8003c58:	08003cad 	.word	0x08003cad
 8003c5c:	08003c29 	.word	0x08003c29
 8003c60:	08003c29 	.word	0x08003c29
 8003c64:	08003c29 	.word	0x08003c29
 8003c68:	08003c29 	.word	0x08003c29
 8003c6c:	08003db9 	.word	0x08003db9
 8003c70:	08003cdd 	.word	0x08003cdd
 8003c74:	08003d9b 	.word	0x08003d9b
 8003c78:	08003c29 	.word	0x08003c29
 8003c7c:	08003c29 	.word	0x08003c29
 8003c80:	08003ddb 	.word	0x08003ddb
 8003c84:	08003c29 	.word	0x08003c29
 8003c88:	08003cdd 	.word	0x08003cdd
 8003c8c:	08003c29 	.word	0x08003c29
 8003c90:	08003c29 	.word	0x08003c29
 8003c94:	08003da3 	.word	0x08003da3
 8003c98:	680b      	ldr	r3, [r1, #0]
 8003c9a:	1d1a      	adds	r2, r3, #4
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	600a      	str	r2, [r1, #0]
 8003ca0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0a3      	b.n	8003df4 <_printf_i+0x1f4>
 8003cac:	6825      	ldr	r5, [r4, #0]
 8003cae:	6808      	ldr	r0, [r1, #0]
 8003cb0:	062e      	lsls	r6, r5, #24
 8003cb2:	f100 0304 	add.w	r3, r0, #4
 8003cb6:	d50a      	bpl.n	8003cce <_printf_i+0xce>
 8003cb8:	6805      	ldr	r5, [r0, #0]
 8003cba:	600b      	str	r3, [r1, #0]
 8003cbc:	2d00      	cmp	r5, #0
 8003cbe:	da03      	bge.n	8003cc8 <_printf_i+0xc8>
 8003cc0:	232d      	movs	r3, #45	; 0x2d
 8003cc2:	426d      	negs	r5, r5
 8003cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cc8:	485e      	ldr	r0, [pc, #376]	; (8003e44 <_printf_i+0x244>)
 8003cca:	230a      	movs	r3, #10
 8003ccc:	e019      	b.n	8003d02 <_printf_i+0x102>
 8003cce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003cd2:	6805      	ldr	r5, [r0, #0]
 8003cd4:	600b      	str	r3, [r1, #0]
 8003cd6:	bf18      	it	ne
 8003cd8:	b22d      	sxthne	r5, r5
 8003cda:	e7ef      	b.n	8003cbc <_printf_i+0xbc>
 8003cdc:	680b      	ldr	r3, [r1, #0]
 8003cde:	6825      	ldr	r5, [r4, #0]
 8003ce0:	1d18      	adds	r0, r3, #4
 8003ce2:	6008      	str	r0, [r1, #0]
 8003ce4:	0628      	lsls	r0, r5, #24
 8003ce6:	d501      	bpl.n	8003cec <_printf_i+0xec>
 8003ce8:	681d      	ldr	r5, [r3, #0]
 8003cea:	e002      	b.n	8003cf2 <_printf_i+0xf2>
 8003cec:	0669      	lsls	r1, r5, #25
 8003cee:	d5fb      	bpl.n	8003ce8 <_printf_i+0xe8>
 8003cf0:	881d      	ldrh	r5, [r3, #0]
 8003cf2:	4854      	ldr	r0, [pc, #336]	; (8003e44 <_printf_i+0x244>)
 8003cf4:	2f6f      	cmp	r7, #111	; 0x6f
 8003cf6:	bf0c      	ite	eq
 8003cf8:	2308      	moveq	r3, #8
 8003cfa:	230a      	movne	r3, #10
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d02:	6866      	ldr	r6, [r4, #4]
 8003d04:	60a6      	str	r6, [r4, #8]
 8003d06:	2e00      	cmp	r6, #0
 8003d08:	bfa2      	ittt	ge
 8003d0a:	6821      	ldrge	r1, [r4, #0]
 8003d0c:	f021 0104 	bicge.w	r1, r1, #4
 8003d10:	6021      	strge	r1, [r4, #0]
 8003d12:	b90d      	cbnz	r5, 8003d18 <_printf_i+0x118>
 8003d14:	2e00      	cmp	r6, #0
 8003d16:	d04d      	beq.n	8003db4 <_printf_i+0x1b4>
 8003d18:	4616      	mov	r6, r2
 8003d1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d1e:	fb03 5711 	mls	r7, r3, r1, r5
 8003d22:	5dc7      	ldrb	r7, [r0, r7]
 8003d24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d28:	462f      	mov	r7, r5
 8003d2a:	42bb      	cmp	r3, r7
 8003d2c:	460d      	mov	r5, r1
 8003d2e:	d9f4      	bls.n	8003d1a <_printf_i+0x11a>
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d10b      	bne.n	8003d4c <_printf_i+0x14c>
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	07df      	lsls	r7, r3, #31
 8003d38:	d508      	bpl.n	8003d4c <_printf_i+0x14c>
 8003d3a:	6923      	ldr	r3, [r4, #16]
 8003d3c:	6861      	ldr	r1, [r4, #4]
 8003d3e:	4299      	cmp	r1, r3
 8003d40:	bfde      	ittt	le
 8003d42:	2330      	movle	r3, #48	; 0x30
 8003d44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d4c:	1b92      	subs	r2, r2, r6
 8003d4e:	6122      	str	r2, [r4, #16]
 8003d50:	f8cd a000 	str.w	sl, [sp]
 8003d54:	464b      	mov	r3, r9
 8003d56:	aa03      	add	r2, sp, #12
 8003d58:	4621      	mov	r1, r4
 8003d5a:	4640      	mov	r0, r8
 8003d5c:	f7ff fee2 	bl	8003b24 <_printf_common>
 8003d60:	3001      	adds	r0, #1
 8003d62:	d14c      	bne.n	8003dfe <_printf_i+0x1fe>
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295
 8003d68:	b004      	add	sp, #16
 8003d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d6e:	4835      	ldr	r0, [pc, #212]	; (8003e44 <_printf_i+0x244>)
 8003d70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	680e      	ldr	r6, [r1, #0]
 8003d78:	061f      	lsls	r7, r3, #24
 8003d7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003d7e:	600e      	str	r6, [r1, #0]
 8003d80:	d514      	bpl.n	8003dac <_printf_i+0x1ac>
 8003d82:	07d9      	lsls	r1, r3, #31
 8003d84:	bf44      	itt	mi
 8003d86:	f043 0320 	orrmi.w	r3, r3, #32
 8003d8a:	6023      	strmi	r3, [r4, #0]
 8003d8c:	b91d      	cbnz	r5, 8003d96 <_printf_i+0x196>
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	f023 0320 	bic.w	r3, r3, #32
 8003d94:	6023      	str	r3, [r4, #0]
 8003d96:	2310      	movs	r3, #16
 8003d98:	e7b0      	b.n	8003cfc <_printf_i+0xfc>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	f043 0320 	orr.w	r3, r3, #32
 8003da0:	6023      	str	r3, [r4, #0]
 8003da2:	2378      	movs	r3, #120	; 0x78
 8003da4:	4828      	ldr	r0, [pc, #160]	; (8003e48 <_printf_i+0x248>)
 8003da6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003daa:	e7e3      	b.n	8003d74 <_printf_i+0x174>
 8003dac:	065e      	lsls	r6, r3, #25
 8003dae:	bf48      	it	mi
 8003db0:	b2ad      	uxthmi	r5, r5
 8003db2:	e7e6      	b.n	8003d82 <_printf_i+0x182>
 8003db4:	4616      	mov	r6, r2
 8003db6:	e7bb      	b.n	8003d30 <_printf_i+0x130>
 8003db8:	680b      	ldr	r3, [r1, #0]
 8003dba:	6826      	ldr	r6, [r4, #0]
 8003dbc:	6960      	ldr	r0, [r4, #20]
 8003dbe:	1d1d      	adds	r5, r3, #4
 8003dc0:	600d      	str	r5, [r1, #0]
 8003dc2:	0635      	lsls	r5, r6, #24
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	d501      	bpl.n	8003dcc <_printf_i+0x1cc>
 8003dc8:	6018      	str	r0, [r3, #0]
 8003dca:	e002      	b.n	8003dd2 <_printf_i+0x1d2>
 8003dcc:	0671      	lsls	r1, r6, #25
 8003dce:	d5fb      	bpl.n	8003dc8 <_printf_i+0x1c8>
 8003dd0:	8018      	strh	r0, [r3, #0]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	6123      	str	r3, [r4, #16]
 8003dd6:	4616      	mov	r6, r2
 8003dd8:	e7ba      	b.n	8003d50 <_printf_i+0x150>
 8003dda:	680b      	ldr	r3, [r1, #0]
 8003ddc:	1d1a      	adds	r2, r3, #4
 8003dde:	600a      	str	r2, [r1, #0]
 8003de0:	681e      	ldr	r6, [r3, #0]
 8003de2:	6862      	ldr	r2, [r4, #4]
 8003de4:	2100      	movs	r1, #0
 8003de6:	4630      	mov	r0, r6
 8003de8:	f7fc fa02 	bl	80001f0 <memchr>
 8003dec:	b108      	cbz	r0, 8003df2 <_printf_i+0x1f2>
 8003dee:	1b80      	subs	r0, r0, r6
 8003df0:	6060      	str	r0, [r4, #4]
 8003df2:	6863      	ldr	r3, [r4, #4]
 8003df4:	6123      	str	r3, [r4, #16]
 8003df6:	2300      	movs	r3, #0
 8003df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dfc:	e7a8      	b.n	8003d50 <_printf_i+0x150>
 8003dfe:	6923      	ldr	r3, [r4, #16]
 8003e00:	4632      	mov	r2, r6
 8003e02:	4649      	mov	r1, r9
 8003e04:	4640      	mov	r0, r8
 8003e06:	47d0      	blx	sl
 8003e08:	3001      	adds	r0, #1
 8003e0a:	d0ab      	beq.n	8003d64 <_printf_i+0x164>
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	079b      	lsls	r3, r3, #30
 8003e10:	d413      	bmi.n	8003e3a <_printf_i+0x23a>
 8003e12:	68e0      	ldr	r0, [r4, #12]
 8003e14:	9b03      	ldr	r3, [sp, #12]
 8003e16:	4298      	cmp	r0, r3
 8003e18:	bfb8      	it	lt
 8003e1a:	4618      	movlt	r0, r3
 8003e1c:	e7a4      	b.n	8003d68 <_printf_i+0x168>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	4632      	mov	r2, r6
 8003e22:	4649      	mov	r1, r9
 8003e24:	4640      	mov	r0, r8
 8003e26:	47d0      	blx	sl
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d09b      	beq.n	8003d64 <_printf_i+0x164>
 8003e2c:	3501      	adds	r5, #1
 8003e2e:	68e3      	ldr	r3, [r4, #12]
 8003e30:	9903      	ldr	r1, [sp, #12]
 8003e32:	1a5b      	subs	r3, r3, r1
 8003e34:	42ab      	cmp	r3, r5
 8003e36:	dcf2      	bgt.n	8003e1e <_printf_i+0x21e>
 8003e38:	e7eb      	b.n	8003e12 <_printf_i+0x212>
 8003e3a:	2500      	movs	r5, #0
 8003e3c:	f104 0619 	add.w	r6, r4, #25
 8003e40:	e7f5      	b.n	8003e2e <_printf_i+0x22e>
 8003e42:	bf00      	nop
 8003e44:	08006346 	.word	0x08006346
 8003e48:	08006357 	.word	0x08006357

08003e4c <_vsiprintf_r>:
 8003e4c:	b500      	push	{lr}
 8003e4e:	b09b      	sub	sp, #108	; 0x6c
 8003e50:	9100      	str	r1, [sp, #0]
 8003e52:	9104      	str	r1, [sp, #16]
 8003e54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e58:	9105      	str	r1, [sp, #20]
 8003e5a:	9102      	str	r1, [sp, #8]
 8003e5c:	4905      	ldr	r1, [pc, #20]	; (8003e74 <_vsiprintf_r+0x28>)
 8003e5e:	9103      	str	r1, [sp, #12]
 8003e60:	4669      	mov	r1, sp
 8003e62:	f001 fb3b 	bl	80054dc <_svfiprintf_r>
 8003e66:	9b00      	ldr	r3, [sp, #0]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	701a      	strb	r2, [r3, #0]
 8003e6c:	b01b      	add	sp, #108	; 0x6c
 8003e6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e72:	bf00      	nop
 8003e74:	ffff0208 	.word	0xffff0208

08003e78 <vsiprintf>:
 8003e78:	4613      	mov	r3, r2
 8003e7a:	460a      	mov	r2, r1
 8003e7c:	4601      	mov	r1, r0
 8003e7e:	4802      	ldr	r0, [pc, #8]	; (8003e88 <vsiprintf+0x10>)
 8003e80:	6800      	ldr	r0, [r0, #0]
 8003e82:	f7ff bfe3 	b.w	8003e4c <_vsiprintf_r>
 8003e86:	bf00      	nop
 8003e88:	2000000c 	.word	0x2000000c

08003e8c <quorem>:
 8003e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e90:	6903      	ldr	r3, [r0, #16]
 8003e92:	690c      	ldr	r4, [r1, #16]
 8003e94:	42a3      	cmp	r3, r4
 8003e96:	4607      	mov	r7, r0
 8003e98:	f2c0 8081 	blt.w	8003f9e <quorem+0x112>
 8003e9c:	3c01      	subs	r4, #1
 8003e9e:	f101 0814 	add.w	r8, r1, #20
 8003ea2:	f100 0514 	add.w	r5, r0, #20
 8003ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003eaa:	9301      	str	r3, [sp, #4]
 8003eac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003eb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003ebc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ec0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ec4:	d331      	bcc.n	8003f2a <quorem+0x9e>
 8003ec6:	f04f 0e00 	mov.w	lr, #0
 8003eca:	4640      	mov	r0, r8
 8003ecc:	46ac      	mov	ip, r5
 8003ece:	46f2      	mov	sl, lr
 8003ed0:	f850 2b04 	ldr.w	r2, [r0], #4
 8003ed4:	b293      	uxth	r3, r2
 8003ed6:	fb06 e303 	mla	r3, r6, r3, lr
 8003eda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	ebaa 0303 	sub.w	r3, sl, r3
 8003ee4:	0c12      	lsrs	r2, r2, #16
 8003ee6:	f8dc a000 	ldr.w	sl, [ip]
 8003eea:	fb06 e202 	mla	r2, r6, r2, lr
 8003eee:	fa13 f38a 	uxtah	r3, r3, sl
 8003ef2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003ef6:	fa1f fa82 	uxth.w	sl, r2
 8003efa:	f8dc 2000 	ldr.w	r2, [ip]
 8003efe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003f02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f0c:	4581      	cmp	r9, r0
 8003f0e:	f84c 3b04 	str.w	r3, [ip], #4
 8003f12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003f16:	d2db      	bcs.n	8003ed0 <quorem+0x44>
 8003f18:	f855 300b 	ldr.w	r3, [r5, fp]
 8003f1c:	b92b      	cbnz	r3, 8003f2a <quorem+0x9e>
 8003f1e:	9b01      	ldr	r3, [sp, #4]
 8003f20:	3b04      	subs	r3, #4
 8003f22:	429d      	cmp	r5, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	d32e      	bcc.n	8003f86 <quorem+0xfa>
 8003f28:	613c      	str	r4, [r7, #16]
 8003f2a:	4638      	mov	r0, r7
 8003f2c:	f001 f8c0 	bl	80050b0 <__mcmp>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	db24      	blt.n	8003f7e <quorem+0xf2>
 8003f34:	3601      	adds	r6, #1
 8003f36:	4628      	mov	r0, r5
 8003f38:	f04f 0c00 	mov.w	ip, #0
 8003f3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8003f40:	f8d0 e000 	ldr.w	lr, [r0]
 8003f44:	b293      	uxth	r3, r2
 8003f46:	ebac 0303 	sub.w	r3, ip, r3
 8003f4a:	0c12      	lsrs	r2, r2, #16
 8003f4c:	fa13 f38e 	uxtah	r3, r3, lr
 8003f50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003f54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f5e:	45c1      	cmp	r9, r8
 8003f60:	f840 3b04 	str.w	r3, [r0], #4
 8003f64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003f68:	d2e8      	bcs.n	8003f3c <quorem+0xb0>
 8003f6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f72:	b922      	cbnz	r2, 8003f7e <quorem+0xf2>
 8003f74:	3b04      	subs	r3, #4
 8003f76:	429d      	cmp	r5, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	d30a      	bcc.n	8003f92 <quorem+0x106>
 8003f7c:	613c      	str	r4, [r7, #16]
 8003f7e:	4630      	mov	r0, r6
 8003f80:	b003      	add	sp, #12
 8003f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	3b04      	subs	r3, #4
 8003f8a:	2a00      	cmp	r2, #0
 8003f8c:	d1cc      	bne.n	8003f28 <quorem+0x9c>
 8003f8e:	3c01      	subs	r4, #1
 8003f90:	e7c7      	b.n	8003f22 <quorem+0x96>
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	3b04      	subs	r3, #4
 8003f96:	2a00      	cmp	r2, #0
 8003f98:	d1f0      	bne.n	8003f7c <quorem+0xf0>
 8003f9a:	3c01      	subs	r4, #1
 8003f9c:	e7eb      	b.n	8003f76 <quorem+0xea>
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	e7ee      	b.n	8003f80 <quorem+0xf4>
 8003fa2:	0000      	movs	r0, r0
 8003fa4:	0000      	movs	r0, r0
	...

08003fa8 <_dtoa_r>:
 8003fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fac:	ed2d 8b02 	vpush	{d8}
 8003fb0:	ec57 6b10 	vmov	r6, r7, d0
 8003fb4:	b095      	sub	sp, #84	; 0x54
 8003fb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003fb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003fbc:	9105      	str	r1, [sp, #20]
 8003fbe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8003fc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8003fc8:	b975      	cbnz	r5, 8003fe8 <_dtoa_r+0x40>
 8003fca:	2010      	movs	r0, #16
 8003fcc:	f000 fddc 	bl	8004b88 <malloc>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6260      	str	r0, [r4, #36]	; 0x24
 8003fd4:	b920      	cbnz	r0, 8003fe0 <_dtoa_r+0x38>
 8003fd6:	4bb2      	ldr	r3, [pc, #712]	; (80042a0 <_dtoa_r+0x2f8>)
 8003fd8:	21ea      	movs	r1, #234	; 0xea
 8003fda:	48b2      	ldr	r0, [pc, #712]	; (80042a4 <_dtoa_r+0x2fc>)
 8003fdc:	f001 fb8e 	bl	80056fc <__assert_func>
 8003fe0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003fe4:	6005      	str	r5, [r0, #0]
 8003fe6:	60c5      	str	r5, [r0, #12]
 8003fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fea:	6819      	ldr	r1, [r3, #0]
 8003fec:	b151      	cbz	r1, 8004004 <_dtoa_r+0x5c>
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	604a      	str	r2, [r1, #4]
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	4093      	lsls	r3, r2
 8003ff6:	608b      	str	r3, [r1, #8]
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f000 fe1b 	bl	8004c34 <_Bfree>
 8003ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	1e3b      	subs	r3, r7, #0
 8004006:	bfb9      	ittee	lt
 8004008:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800400c:	9303      	strlt	r3, [sp, #12]
 800400e:	2300      	movge	r3, #0
 8004010:	f8c8 3000 	strge.w	r3, [r8]
 8004014:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004018:	4ba3      	ldr	r3, [pc, #652]	; (80042a8 <_dtoa_r+0x300>)
 800401a:	bfbc      	itt	lt
 800401c:	2201      	movlt	r2, #1
 800401e:	f8c8 2000 	strlt.w	r2, [r8]
 8004022:	ea33 0309 	bics.w	r3, r3, r9
 8004026:	d11b      	bne.n	8004060 <_dtoa_r+0xb8>
 8004028:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800402a:	f242 730f 	movw	r3, #9999	; 0x270f
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004034:	4333      	orrs	r3, r6
 8004036:	f000 857a 	beq.w	8004b2e <_dtoa_r+0xb86>
 800403a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800403c:	b963      	cbnz	r3, 8004058 <_dtoa_r+0xb0>
 800403e:	4b9b      	ldr	r3, [pc, #620]	; (80042ac <_dtoa_r+0x304>)
 8004040:	e024      	b.n	800408c <_dtoa_r+0xe4>
 8004042:	4b9b      	ldr	r3, [pc, #620]	; (80042b0 <_dtoa_r+0x308>)
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	3308      	adds	r3, #8
 8004048:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	9800      	ldr	r0, [sp, #0]
 800404e:	b015      	add	sp, #84	; 0x54
 8004050:	ecbd 8b02 	vpop	{d8}
 8004054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004058:	4b94      	ldr	r3, [pc, #592]	; (80042ac <_dtoa_r+0x304>)
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	3303      	adds	r3, #3
 800405e:	e7f3      	b.n	8004048 <_dtoa_r+0xa0>
 8004060:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004064:	2200      	movs	r2, #0
 8004066:	ec51 0b17 	vmov	r0, r1, d7
 800406a:	2300      	movs	r3, #0
 800406c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004070:	f7fc fd32 	bl	8000ad8 <__aeabi_dcmpeq>
 8004074:	4680      	mov	r8, r0
 8004076:	b158      	cbz	r0, 8004090 <_dtoa_r+0xe8>
 8004078:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800407a:	2301      	movs	r3, #1
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8551 	beq.w	8004b28 <_dtoa_r+0xb80>
 8004086:	488b      	ldr	r0, [pc, #556]	; (80042b4 <_dtoa_r+0x30c>)
 8004088:	6018      	str	r0, [r3, #0]
 800408a:	1e43      	subs	r3, r0, #1
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	e7dd      	b.n	800404c <_dtoa_r+0xa4>
 8004090:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004094:	aa12      	add	r2, sp, #72	; 0x48
 8004096:	a913      	add	r1, sp, #76	; 0x4c
 8004098:	4620      	mov	r0, r4
 800409a:	f001 f8ad 	bl	80051f8 <__d2b>
 800409e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80040a2:	4683      	mov	fp, r0
 80040a4:	2d00      	cmp	r5, #0
 80040a6:	d07c      	beq.n	80041a2 <_dtoa_r+0x1fa>
 80040a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040aa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80040ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80040b6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80040ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80040be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80040c2:	4b7d      	ldr	r3, [pc, #500]	; (80042b8 <_dtoa_r+0x310>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	4630      	mov	r0, r6
 80040c8:	4639      	mov	r1, r7
 80040ca:	f7fc f8e5 	bl	8000298 <__aeabi_dsub>
 80040ce:	a36e      	add	r3, pc, #440	; (adr r3, 8004288 <_dtoa_r+0x2e0>)
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f7fc fa98 	bl	8000608 <__aeabi_dmul>
 80040d8:	a36d      	add	r3, pc, #436	; (adr r3, 8004290 <_dtoa_r+0x2e8>)
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	f7fc f8dd 	bl	800029c <__adddf3>
 80040e2:	4606      	mov	r6, r0
 80040e4:	4628      	mov	r0, r5
 80040e6:	460f      	mov	r7, r1
 80040e8:	f7fc fa24 	bl	8000534 <__aeabi_i2d>
 80040ec:	a36a      	add	r3, pc, #424	; (adr r3, 8004298 <_dtoa_r+0x2f0>)
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	f7fc fa89 	bl	8000608 <__aeabi_dmul>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4630      	mov	r0, r6
 80040fc:	4639      	mov	r1, r7
 80040fe:	f7fc f8cd 	bl	800029c <__adddf3>
 8004102:	4606      	mov	r6, r0
 8004104:	460f      	mov	r7, r1
 8004106:	f7fc fd2f 	bl	8000b68 <__aeabi_d2iz>
 800410a:	2200      	movs	r2, #0
 800410c:	4682      	mov	sl, r0
 800410e:	2300      	movs	r3, #0
 8004110:	4630      	mov	r0, r6
 8004112:	4639      	mov	r1, r7
 8004114:	f7fc fcea 	bl	8000aec <__aeabi_dcmplt>
 8004118:	b148      	cbz	r0, 800412e <_dtoa_r+0x186>
 800411a:	4650      	mov	r0, sl
 800411c:	f7fc fa0a 	bl	8000534 <__aeabi_i2d>
 8004120:	4632      	mov	r2, r6
 8004122:	463b      	mov	r3, r7
 8004124:	f7fc fcd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8004128:	b908      	cbnz	r0, 800412e <_dtoa_r+0x186>
 800412a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800412e:	f1ba 0f16 	cmp.w	sl, #22
 8004132:	d854      	bhi.n	80041de <_dtoa_r+0x236>
 8004134:	4b61      	ldr	r3, [pc, #388]	; (80042bc <_dtoa_r+0x314>)
 8004136:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004142:	f7fc fcd3 	bl	8000aec <__aeabi_dcmplt>
 8004146:	2800      	cmp	r0, #0
 8004148:	d04b      	beq.n	80041e2 <_dtoa_r+0x23a>
 800414a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800414e:	2300      	movs	r3, #0
 8004150:	930e      	str	r3, [sp, #56]	; 0x38
 8004152:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004154:	1b5d      	subs	r5, r3, r5
 8004156:	1e6b      	subs	r3, r5, #1
 8004158:	9304      	str	r3, [sp, #16]
 800415a:	bf43      	ittte	mi
 800415c:	2300      	movmi	r3, #0
 800415e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004162:	9304      	strmi	r3, [sp, #16]
 8004164:	f04f 0800 	movpl.w	r8, #0
 8004168:	f1ba 0f00 	cmp.w	sl, #0
 800416c:	db3b      	blt.n	80041e6 <_dtoa_r+0x23e>
 800416e:	9b04      	ldr	r3, [sp, #16]
 8004170:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004174:	4453      	add	r3, sl
 8004176:	9304      	str	r3, [sp, #16]
 8004178:	2300      	movs	r3, #0
 800417a:	9306      	str	r3, [sp, #24]
 800417c:	9b05      	ldr	r3, [sp, #20]
 800417e:	2b09      	cmp	r3, #9
 8004180:	d869      	bhi.n	8004256 <_dtoa_r+0x2ae>
 8004182:	2b05      	cmp	r3, #5
 8004184:	bfc4      	itt	gt
 8004186:	3b04      	subgt	r3, #4
 8004188:	9305      	strgt	r3, [sp, #20]
 800418a:	9b05      	ldr	r3, [sp, #20]
 800418c:	f1a3 0302 	sub.w	r3, r3, #2
 8004190:	bfcc      	ite	gt
 8004192:	2500      	movgt	r5, #0
 8004194:	2501      	movle	r5, #1
 8004196:	2b03      	cmp	r3, #3
 8004198:	d869      	bhi.n	800426e <_dtoa_r+0x2c6>
 800419a:	e8df f003 	tbb	[pc, r3]
 800419e:	4e2c      	.short	0x4e2c
 80041a0:	5a4c      	.short	0x5a4c
 80041a2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80041a6:	441d      	add	r5, r3
 80041a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	bfc1      	itttt	gt
 80041b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80041b4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80041b8:	fa09 f303 	lslgt.w	r3, r9, r3
 80041bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80041c0:	bfda      	itte	le
 80041c2:	f1c3 0320 	rsble	r3, r3, #32
 80041c6:	fa06 f003 	lslle.w	r0, r6, r3
 80041ca:	4318      	orrgt	r0, r3
 80041cc:	f7fc f9a2 	bl	8000514 <__aeabi_ui2d>
 80041d0:	2301      	movs	r3, #1
 80041d2:	4606      	mov	r6, r0
 80041d4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80041d8:	3d01      	subs	r5, #1
 80041da:	9310      	str	r3, [sp, #64]	; 0x40
 80041dc:	e771      	b.n	80040c2 <_dtoa_r+0x11a>
 80041de:	2301      	movs	r3, #1
 80041e0:	e7b6      	b.n	8004150 <_dtoa_r+0x1a8>
 80041e2:	900e      	str	r0, [sp, #56]	; 0x38
 80041e4:	e7b5      	b.n	8004152 <_dtoa_r+0x1aa>
 80041e6:	f1ca 0300 	rsb	r3, sl, #0
 80041ea:	9306      	str	r3, [sp, #24]
 80041ec:	2300      	movs	r3, #0
 80041ee:	eba8 080a 	sub.w	r8, r8, sl
 80041f2:	930d      	str	r3, [sp, #52]	; 0x34
 80041f4:	e7c2      	b.n	800417c <_dtoa_r+0x1d4>
 80041f6:	2300      	movs	r3, #0
 80041f8:	9308      	str	r3, [sp, #32]
 80041fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	dc39      	bgt.n	8004274 <_dtoa_r+0x2cc>
 8004200:	f04f 0901 	mov.w	r9, #1
 8004204:	f8cd 9004 	str.w	r9, [sp, #4]
 8004208:	464b      	mov	r3, r9
 800420a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800420e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004210:	2200      	movs	r2, #0
 8004212:	6042      	str	r2, [r0, #4]
 8004214:	2204      	movs	r2, #4
 8004216:	f102 0614 	add.w	r6, r2, #20
 800421a:	429e      	cmp	r6, r3
 800421c:	6841      	ldr	r1, [r0, #4]
 800421e:	d92f      	bls.n	8004280 <_dtoa_r+0x2d8>
 8004220:	4620      	mov	r0, r4
 8004222:	f000 fcc7 	bl	8004bb4 <_Balloc>
 8004226:	9000      	str	r0, [sp, #0]
 8004228:	2800      	cmp	r0, #0
 800422a:	d14b      	bne.n	80042c4 <_dtoa_r+0x31c>
 800422c:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <_dtoa_r+0x318>)
 800422e:	4602      	mov	r2, r0
 8004230:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004234:	e6d1      	b.n	8003fda <_dtoa_r+0x32>
 8004236:	2301      	movs	r3, #1
 8004238:	e7de      	b.n	80041f8 <_dtoa_r+0x250>
 800423a:	2300      	movs	r3, #0
 800423c:	9308      	str	r3, [sp, #32]
 800423e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004240:	eb0a 0903 	add.w	r9, sl, r3
 8004244:	f109 0301 	add.w	r3, r9, #1
 8004248:	2b01      	cmp	r3, #1
 800424a:	9301      	str	r3, [sp, #4]
 800424c:	bfb8      	it	lt
 800424e:	2301      	movlt	r3, #1
 8004250:	e7dd      	b.n	800420e <_dtoa_r+0x266>
 8004252:	2301      	movs	r3, #1
 8004254:	e7f2      	b.n	800423c <_dtoa_r+0x294>
 8004256:	2501      	movs	r5, #1
 8004258:	2300      	movs	r3, #0
 800425a:	9305      	str	r3, [sp, #20]
 800425c:	9508      	str	r5, [sp, #32]
 800425e:	f04f 39ff 	mov.w	r9, #4294967295
 8004262:	2200      	movs	r2, #0
 8004264:	f8cd 9004 	str.w	r9, [sp, #4]
 8004268:	2312      	movs	r3, #18
 800426a:	9209      	str	r2, [sp, #36]	; 0x24
 800426c:	e7cf      	b.n	800420e <_dtoa_r+0x266>
 800426e:	2301      	movs	r3, #1
 8004270:	9308      	str	r3, [sp, #32]
 8004272:	e7f4      	b.n	800425e <_dtoa_r+0x2b6>
 8004274:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004278:	f8cd 9004 	str.w	r9, [sp, #4]
 800427c:	464b      	mov	r3, r9
 800427e:	e7c6      	b.n	800420e <_dtoa_r+0x266>
 8004280:	3101      	adds	r1, #1
 8004282:	6041      	str	r1, [r0, #4]
 8004284:	0052      	lsls	r2, r2, #1
 8004286:	e7c6      	b.n	8004216 <_dtoa_r+0x26e>
 8004288:	636f4361 	.word	0x636f4361
 800428c:	3fd287a7 	.word	0x3fd287a7
 8004290:	8b60c8b3 	.word	0x8b60c8b3
 8004294:	3fc68a28 	.word	0x3fc68a28
 8004298:	509f79fb 	.word	0x509f79fb
 800429c:	3fd34413 	.word	0x3fd34413
 80042a0:	08006375 	.word	0x08006375
 80042a4:	0800638c 	.word	0x0800638c
 80042a8:	7ff00000 	.word	0x7ff00000
 80042ac:	08006371 	.word	0x08006371
 80042b0:	08006368 	.word	0x08006368
 80042b4:	08006345 	.word	0x08006345
 80042b8:	3ff80000 	.word	0x3ff80000
 80042bc:	08006488 	.word	0x08006488
 80042c0:	080063eb 	.word	0x080063eb
 80042c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042c6:	9a00      	ldr	r2, [sp, #0]
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	9b01      	ldr	r3, [sp, #4]
 80042cc:	2b0e      	cmp	r3, #14
 80042ce:	f200 80ad 	bhi.w	800442c <_dtoa_r+0x484>
 80042d2:	2d00      	cmp	r5, #0
 80042d4:	f000 80aa 	beq.w	800442c <_dtoa_r+0x484>
 80042d8:	f1ba 0f00 	cmp.w	sl, #0
 80042dc:	dd36      	ble.n	800434c <_dtoa_r+0x3a4>
 80042de:	4ac3      	ldr	r2, [pc, #780]	; (80045ec <_dtoa_r+0x644>)
 80042e0:	f00a 030f 	and.w	r3, sl, #15
 80042e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80042e8:	ed93 7b00 	vldr	d7, [r3]
 80042ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80042f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80042f4:	eeb0 8a47 	vmov.f32	s16, s14
 80042f8:	eef0 8a67 	vmov.f32	s17, s15
 80042fc:	d016      	beq.n	800432c <_dtoa_r+0x384>
 80042fe:	4bbc      	ldr	r3, [pc, #752]	; (80045f0 <_dtoa_r+0x648>)
 8004300:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004304:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004308:	f7fc faa8 	bl	800085c <__aeabi_ddiv>
 800430c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004310:	f007 070f 	and.w	r7, r7, #15
 8004314:	2503      	movs	r5, #3
 8004316:	4eb6      	ldr	r6, [pc, #728]	; (80045f0 <_dtoa_r+0x648>)
 8004318:	b957      	cbnz	r7, 8004330 <_dtoa_r+0x388>
 800431a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800431e:	ec53 2b18 	vmov	r2, r3, d8
 8004322:	f7fc fa9b 	bl	800085c <__aeabi_ddiv>
 8004326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800432a:	e029      	b.n	8004380 <_dtoa_r+0x3d8>
 800432c:	2502      	movs	r5, #2
 800432e:	e7f2      	b.n	8004316 <_dtoa_r+0x36e>
 8004330:	07f9      	lsls	r1, r7, #31
 8004332:	d508      	bpl.n	8004346 <_dtoa_r+0x39e>
 8004334:	ec51 0b18 	vmov	r0, r1, d8
 8004338:	e9d6 2300 	ldrd	r2, r3, [r6]
 800433c:	f7fc f964 	bl	8000608 <__aeabi_dmul>
 8004340:	ec41 0b18 	vmov	d8, r0, r1
 8004344:	3501      	adds	r5, #1
 8004346:	107f      	asrs	r7, r7, #1
 8004348:	3608      	adds	r6, #8
 800434a:	e7e5      	b.n	8004318 <_dtoa_r+0x370>
 800434c:	f000 80a6 	beq.w	800449c <_dtoa_r+0x4f4>
 8004350:	f1ca 0600 	rsb	r6, sl, #0
 8004354:	4ba5      	ldr	r3, [pc, #660]	; (80045ec <_dtoa_r+0x644>)
 8004356:	4fa6      	ldr	r7, [pc, #664]	; (80045f0 <_dtoa_r+0x648>)
 8004358:	f006 020f 	and.w	r2, r6, #15
 800435c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004368:	f7fc f94e 	bl	8000608 <__aeabi_dmul>
 800436c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004370:	1136      	asrs	r6, r6, #4
 8004372:	2300      	movs	r3, #0
 8004374:	2502      	movs	r5, #2
 8004376:	2e00      	cmp	r6, #0
 8004378:	f040 8085 	bne.w	8004486 <_dtoa_r+0x4de>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1d2      	bne.n	8004326 <_dtoa_r+0x37e>
 8004380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 808c 	beq.w	80044a0 <_dtoa_r+0x4f8>
 8004388:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800438c:	4b99      	ldr	r3, [pc, #612]	; (80045f4 <_dtoa_r+0x64c>)
 800438e:	2200      	movs	r2, #0
 8004390:	4630      	mov	r0, r6
 8004392:	4639      	mov	r1, r7
 8004394:	f7fc fbaa 	bl	8000aec <__aeabi_dcmplt>
 8004398:	2800      	cmp	r0, #0
 800439a:	f000 8081 	beq.w	80044a0 <_dtoa_r+0x4f8>
 800439e:	9b01      	ldr	r3, [sp, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d07d      	beq.n	80044a0 <_dtoa_r+0x4f8>
 80043a4:	f1b9 0f00 	cmp.w	r9, #0
 80043a8:	dd3c      	ble.n	8004424 <_dtoa_r+0x47c>
 80043aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80043ae:	9307      	str	r3, [sp, #28]
 80043b0:	2200      	movs	r2, #0
 80043b2:	4b91      	ldr	r3, [pc, #580]	; (80045f8 <_dtoa_r+0x650>)
 80043b4:	4630      	mov	r0, r6
 80043b6:	4639      	mov	r1, r7
 80043b8:	f7fc f926 	bl	8000608 <__aeabi_dmul>
 80043bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043c0:	3501      	adds	r5, #1
 80043c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80043c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80043ca:	4628      	mov	r0, r5
 80043cc:	f7fc f8b2 	bl	8000534 <__aeabi_i2d>
 80043d0:	4632      	mov	r2, r6
 80043d2:	463b      	mov	r3, r7
 80043d4:	f7fc f918 	bl	8000608 <__aeabi_dmul>
 80043d8:	4b88      	ldr	r3, [pc, #544]	; (80045fc <_dtoa_r+0x654>)
 80043da:	2200      	movs	r2, #0
 80043dc:	f7fb ff5e 	bl	800029c <__adddf3>
 80043e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80043e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043e8:	9303      	str	r3, [sp, #12]
 80043ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d15c      	bne.n	80044aa <_dtoa_r+0x502>
 80043f0:	4b83      	ldr	r3, [pc, #524]	; (8004600 <_dtoa_r+0x658>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	4630      	mov	r0, r6
 80043f6:	4639      	mov	r1, r7
 80043f8:	f7fb ff4e 	bl	8000298 <__aeabi_dsub>
 80043fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004400:	4606      	mov	r6, r0
 8004402:	460f      	mov	r7, r1
 8004404:	f7fc fb90 	bl	8000b28 <__aeabi_dcmpgt>
 8004408:	2800      	cmp	r0, #0
 800440a:	f040 8296 	bne.w	800493a <_dtoa_r+0x992>
 800440e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004412:	4630      	mov	r0, r6
 8004414:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004418:	4639      	mov	r1, r7
 800441a:	f7fc fb67 	bl	8000aec <__aeabi_dcmplt>
 800441e:	2800      	cmp	r0, #0
 8004420:	f040 8288 	bne.w	8004934 <_dtoa_r+0x98c>
 8004424:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004428:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800442c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800442e:	2b00      	cmp	r3, #0
 8004430:	f2c0 8158 	blt.w	80046e4 <_dtoa_r+0x73c>
 8004434:	f1ba 0f0e 	cmp.w	sl, #14
 8004438:	f300 8154 	bgt.w	80046e4 <_dtoa_r+0x73c>
 800443c:	4b6b      	ldr	r3, [pc, #428]	; (80045ec <_dtoa_r+0x644>)
 800443e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004442:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004448:	2b00      	cmp	r3, #0
 800444a:	f280 80e3 	bge.w	8004614 <_dtoa_r+0x66c>
 800444e:	9b01      	ldr	r3, [sp, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	f300 80df 	bgt.w	8004614 <_dtoa_r+0x66c>
 8004456:	f040 826d 	bne.w	8004934 <_dtoa_r+0x98c>
 800445a:	4b69      	ldr	r3, [pc, #420]	; (8004600 <_dtoa_r+0x658>)
 800445c:	2200      	movs	r2, #0
 800445e:	4640      	mov	r0, r8
 8004460:	4649      	mov	r1, r9
 8004462:	f7fc f8d1 	bl	8000608 <__aeabi_dmul>
 8004466:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800446a:	f7fc fb53 	bl	8000b14 <__aeabi_dcmpge>
 800446e:	9e01      	ldr	r6, [sp, #4]
 8004470:	4637      	mov	r7, r6
 8004472:	2800      	cmp	r0, #0
 8004474:	f040 8243 	bne.w	80048fe <_dtoa_r+0x956>
 8004478:	9d00      	ldr	r5, [sp, #0]
 800447a:	2331      	movs	r3, #49	; 0x31
 800447c:	f805 3b01 	strb.w	r3, [r5], #1
 8004480:	f10a 0a01 	add.w	sl, sl, #1
 8004484:	e23f      	b.n	8004906 <_dtoa_r+0x95e>
 8004486:	07f2      	lsls	r2, r6, #31
 8004488:	d505      	bpl.n	8004496 <_dtoa_r+0x4ee>
 800448a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800448e:	f7fc f8bb 	bl	8000608 <__aeabi_dmul>
 8004492:	3501      	adds	r5, #1
 8004494:	2301      	movs	r3, #1
 8004496:	1076      	asrs	r6, r6, #1
 8004498:	3708      	adds	r7, #8
 800449a:	e76c      	b.n	8004376 <_dtoa_r+0x3ce>
 800449c:	2502      	movs	r5, #2
 800449e:	e76f      	b.n	8004380 <_dtoa_r+0x3d8>
 80044a0:	9b01      	ldr	r3, [sp, #4]
 80044a2:	f8cd a01c 	str.w	sl, [sp, #28]
 80044a6:	930c      	str	r3, [sp, #48]	; 0x30
 80044a8:	e78d      	b.n	80043c6 <_dtoa_r+0x41e>
 80044aa:	9900      	ldr	r1, [sp, #0]
 80044ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80044ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044b0:	4b4e      	ldr	r3, [pc, #312]	; (80045ec <_dtoa_r+0x644>)
 80044b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80044b6:	4401      	add	r1, r0
 80044b8:	9102      	str	r1, [sp, #8]
 80044ba:	9908      	ldr	r1, [sp, #32]
 80044bc:	eeb0 8a47 	vmov.f32	s16, s14
 80044c0:	eef0 8a67 	vmov.f32	s17, s15
 80044c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80044cc:	2900      	cmp	r1, #0
 80044ce:	d045      	beq.n	800455c <_dtoa_r+0x5b4>
 80044d0:	494c      	ldr	r1, [pc, #304]	; (8004604 <_dtoa_r+0x65c>)
 80044d2:	2000      	movs	r0, #0
 80044d4:	f7fc f9c2 	bl	800085c <__aeabi_ddiv>
 80044d8:	ec53 2b18 	vmov	r2, r3, d8
 80044dc:	f7fb fedc 	bl	8000298 <__aeabi_dsub>
 80044e0:	9d00      	ldr	r5, [sp, #0]
 80044e2:	ec41 0b18 	vmov	d8, r0, r1
 80044e6:	4639      	mov	r1, r7
 80044e8:	4630      	mov	r0, r6
 80044ea:	f7fc fb3d 	bl	8000b68 <__aeabi_d2iz>
 80044ee:	900c      	str	r0, [sp, #48]	; 0x30
 80044f0:	f7fc f820 	bl	8000534 <__aeabi_i2d>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4630      	mov	r0, r6
 80044fa:	4639      	mov	r1, r7
 80044fc:	f7fb fecc 	bl	8000298 <__aeabi_dsub>
 8004500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004502:	3330      	adds	r3, #48	; 0x30
 8004504:	f805 3b01 	strb.w	r3, [r5], #1
 8004508:	ec53 2b18 	vmov	r2, r3, d8
 800450c:	4606      	mov	r6, r0
 800450e:	460f      	mov	r7, r1
 8004510:	f7fc faec 	bl	8000aec <__aeabi_dcmplt>
 8004514:	2800      	cmp	r0, #0
 8004516:	d165      	bne.n	80045e4 <_dtoa_r+0x63c>
 8004518:	4632      	mov	r2, r6
 800451a:	463b      	mov	r3, r7
 800451c:	4935      	ldr	r1, [pc, #212]	; (80045f4 <_dtoa_r+0x64c>)
 800451e:	2000      	movs	r0, #0
 8004520:	f7fb feba 	bl	8000298 <__aeabi_dsub>
 8004524:	ec53 2b18 	vmov	r2, r3, d8
 8004528:	f7fc fae0 	bl	8000aec <__aeabi_dcmplt>
 800452c:	2800      	cmp	r0, #0
 800452e:	f040 80b9 	bne.w	80046a4 <_dtoa_r+0x6fc>
 8004532:	9b02      	ldr	r3, [sp, #8]
 8004534:	429d      	cmp	r5, r3
 8004536:	f43f af75 	beq.w	8004424 <_dtoa_r+0x47c>
 800453a:	4b2f      	ldr	r3, [pc, #188]	; (80045f8 <_dtoa_r+0x650>)
 800453c:	ec51 0b18 	vmov	r0, r1, d8
 8004540:	2200      	movs	r2, #0
 8004542:	f7fc f861 	bl	8000608 <__aeabi_dmul>
 8004546:	4b2c      	ldr	r3, [pc, #176]	; (80045f8 <_dtoa_r+0x650>)
 8004548:	ec41 0b18 	vmov	d8, r0, r1
 800454c:	2200      	movs	r2, #0
 800454e:	4630      	mov	r0, r6
 8004550:	4639      	mov	r1, r7
 8004552:	f7fc f859 	bl	8000608 <__aeabi_dmul>
 8004556:	4606      	mov	r6, r0
 8004558:	460f      	mov	r7, r1
 800455a:	e7c4      	b.n	80044e6 <_dtoa_r+0x53e>
 800455c:	ec51 0b17 	vmov	r0, r1, d7
 8004560:	f7fc f852 	bl	8000608 <__aeabi_dmul>
 8004564:	9b02      	ldr	r3, [sp, #8]
 8004566:	9d00      	ldr	r5, [sp, #0]
 8004568:	930c      	str	r3, [sp, #48]	; 0x30
 800456a:	ec41 0b18 	vmov	d8, r0, r1
 800456e:	4639      	mov	r1, r7
 8004570:	4630      	mov	r0, r6
 8004572:	f7fc faf9 	bl	8000b68 <__aeabi_d2iz>
 8004576:	9011      	str	r0, [sp, #68]	; 0x44
 8004578:	f7fb ffdc 	bl	8000534 <__aeabi_i2d>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4630      	mov	r0, r6
 8004582:	4639      	mov	r1, r7
 8004584:	f7fb fe88 	bl	8000298 <__aeabi_dsub>
 8004588:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800458a:	3330      	adds	r3, #48	; 0x30
 800458c:	f805 3b01 	strb.w	r3, [r5], #1
 8004590:	9b02      	ldr	r3, [sp, #8]
 8004592:	429d      	cmp	r5, r3
 8004594:	4606      	mov	r6, r0
 8004596:	460f      	mov	r7, r1
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	d134      	bne.n	8004608 <_dtoa_r+0x660>
 800459e:	4b19      	ldr	r3, [pc, #100]	; (8004604 <_dtoa_r+0x65c>)
 80045a0:	ec51 0b18 	vmov	r0, r1, d8
 80045a4:	f7fb fe7a 	bl	800029c <__adddf3>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4630      	mov	r0, r6
 80045ae:	4639      	mov	r1, r7
 80045b0:	f7fc faba 	bl	8000b28 <__aeabi_dcmpgt>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d175      	bne.n	80046a4 <_dtoa_r+0x6fc>
 80045b8:	ec53 2b18 	vmov	r2, r3, d8
 80045bc:	4911      	ldr	r1, [pc, #68]	; (8004604 <_dtoa_r+0x65c>)
 80045be:	2000      	movs	r0, #0
 80045c0:	f7fb fe6a 	bl	8000298 <__aeabi_dsub>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4630      	mov	r0, r6
 80045ca:	4639      	mov	r1, r7
 80045cc:	f7fc fa8e 	bl	8000aec <__aeabi_dcmplt>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	f43f af27 	beq.w	8004424 <_dtoa_r+0x47c>
 80045d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045d8:	1e6b      	subs	r3, r5, #1
 80045da:	930c      	str	r3, [sp, #48]	; 0x30
 80045dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80045e0:	2b30      	cmp	r3, #48	; 0x30
 80045e2:	d0f8      	beq.n	80045d6 <_dtoa_r+0x62e>
 80045e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80045e8:	e04a      	b.n	8004680 <_dtoa_r+0x6d8>
 80045ea:	bf00      	nop
 80045ec:	08006488 	.word	0x08006488
 80045f0:	08006460 	.word	0x08006460
 80045f4:	3ff00000 	.word	0x3ff00000
 80045f8:	40240000 	.word	0x40240000
 80045fc:	401c0000 	.word	0x401c0000
 8004600:	40140000 	.word	0x40140000
 8004604:	3fe00000 	.word	0x3fe00000
 8004608:	4baf      	ldr	r3, [pc, #700]	; (80048c8 <_dtoa_r+0x920>)
 800460a:	f7fb fffd 	bl	8000608 <__aeabi_dmul>
 800460e:	4606      	mov	r6, r0
 8004610:	460f      	mov	r7, r1
 8004612:	e7ac      	b.n	800456e <_dtoa_r+0x5c6>
 8004614:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004618:	9d00      	ldr	r5, [sp, #0]
 800461a:	4642      	mov	r2, r8
 800461c:	464b      	mov	r3, r9
 800461e:	4630      	mov	r0, r6
 8004620:	4639      	mov	r1, r7
 8004622:	f7fc f91b 	bl	800085c <__aeabi_ddiv>
 8004626:	f7fc fa9f 	bl	8000b68 <__aeabi_d2iz>
 800462a:	9002      	str	r0, [sp, #8]
 800462c:	f7fb ff82 	bl	8000534 <__aeabi_i2d>
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	f7fb ffe8 	bl	8000608 <__aeabi_dmul>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4630      	mov	r0, r6
 800463e:	4639      	mov	r1, r7
 8004640:	f7fb fe2a 	bl	8000298 <__aeabi_dsub>
 8004644:	9e02      	ldr	r6, [sp, #8]
 8004646:	9f01      	ldr	r7, [sp, #4]
 8004648:	3630      	adds	r6, #48	; 0x30
 800464a:	f805 6b01 	strb.w	r6, [r5], #1
 800464e:	9e00      	ldr	r6, [sp, #0]
 8004650:	1bae      	subs	r6, r5, r6
 8004652:	42b7      	cmp	r7, r6
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	d137      	bne.n	80046ca <_dtoa_r+0x722>
 800465a:	f7fb fe1f 	bl	800029c <__adddf3>
 800465e:	4642      	mov	r2, r8
 8004660:	464b      	mov	r3, r9
 8004662:	4606      	mov	r6, r0
 8004664:	460f      	mov	r7, r1
 8004666:	f7fc fa5f 	bl	8000b28 <__aeabi_dcmpgt>
 800466a:	b9c8      	cbnz	r0, 80046a0 <_dtoa_r+0x6f8>
 800466c:	4642      	mov	r2, r8
 800466e:	464b      	mov	r3, r9
 8004670:	4630      	mov	r0, r6
 8004672:	4639      	mov	r1, r7
 8004674:	f7fc fa30 	bl	8000ad8 <__aeabi_dcmpeq>
 8004678:	b110      	cbz	r0, 8004680 <_dtoa_r+0x6d8>
 800467a:	9b02      	ldr	r3, [sp, #8]
 800467c:	07d9      	lsls	r1, r3, #31
 800467e:	d40f      	bmi.n	80046a0 <_dtoa_r+0x6f8>
 8004680:	4620      	mov	r0, r4
 8004682:	4659      	mov	r1, fp
 8004684:	f000 fad6 	bl	8004c34 <_Bfree>
 8004688:	2300      	movs	r3, #0
 800468a:	702b      	strb	r3, [r5, #0]
 800468c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800468e:	f10a 0001 	add.w	r0, sl, #1
 8004692:	6018      	str	r0, [r3, #0]
 8004694:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004696:	2b00      	cmp	r3, #0
 8004698:	f43f acd8 	beq.w	800404c <_dtoa_r+0xa4>
 800469c:	601d      	str	r5, [r3, #0]
 800469e:	e4d5      	b.n	800404c <_dtoa_r+0xa4>
 80046a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80046a4:	462b      	mov	r3, r5
 80046a6:	461d      	mov	r5, r3
 80046a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046ac:	2a39      	cmp	r2, #57	; 0x39
 80046ae:	d108      	bne.n	80046c2 <_dtoa_r+0x71a>
 80046b0:	9a00      	ldr	r2, [sp, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d1f7      	bne.n	80046a6 <_dtoa_r+0x6fe>
 80046b6:	9a07      	ldr	r2, [sp, #28]
 80046b8:	9900      	ldr	r1, [sp, #0]
 80046ba:	3201      	adds	r2, #1
 80046bc:	9207      	str	r2, [sp, #28]
 80046be:	2230      	movs	r2, #48	; 0x30
 80046c0:	700a      	strb	r2, [r1, #0]
 80046c2:	781a      	ldrb	r2, [r3, #0]
 80046c4:	3201      	adds	r2, #1
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	e78c      	b.n	80045e4 <_dtoa_r+0x63c>
 80046ca:	4b7f      	ldr	r3, [pc, #508]	; (80048c8 <_dtoa_r+0x920>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	f7fb ff9b 	bl	8000608 <__aeabi_dmul>
 80046d2:	2200      	movs	r2, #0
 80046d4:	2300      	movs	r3, #0
 80046d6:	4606      	mov	r6, r0
 80046d8:	460f      	mov	r7, r1
 80046da:	f7fc f9fd 	bl	8000ad8 <__aeabi_dcmpeq>
 80046de:	2800      	cmp	r0, #0
 80046e0:	d09b      	beq.n	800461a <_dtoa_r+0x672>
 80046e2:	e7cd      	b.n	8004680 <_dtoa_r+0x6d8>
 80046e4:	9a08      	ldr	r2, [sp, #32]
 80046e6:	2a00      	cmp	r2, #0
 80046e8:	f000 80c4 	beq.w	8004874 <_dtoa_r+0x8cc>
 80046ec:	9a05      	ldr	r2, [sp, #20]
 80046ee:	2a01      	cmp	r2, #1
 80046f0:	f300 80a8 	bgt.w	8004844 <_dtoa_r+0x89c>
 80046f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80046f6:	2a00      	cmp	r2, #0
 80046f8:	f000 80a0 	beq.w	800483c <_dtoa_r+0x894>
 80046fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004700:	9e06      	ldr	r6, [sp, #24]
 8004702:	4645      	mov	r5, r8
 8004704:	9a04      	ldr	r2, [sp, #16]
 8004706:	2101      	movs	r1, #1
 8004708:	441a      	add	r2, r3
 800470a:	4620      	mov	r0, r4
 800470c:	4498      	add	r8, r3
 800470e:	9204      	str	r2, [sp, #16]
 8004710:	f000 fb4c 	bl	8004dac <__i2b>
 8004714:	4607      	mov	r7, r0
 8004716:	2d00      	cmp	r5, #0
 8004718:	dd0b      	ble.n	8004732 <_dtoa_r+0x78a>
 800471a:	9b04      	ldr	r3, [sp, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	dd08      	ble.n	8004732 <_dtoa_r+0x78a>
 8004720:	42ab      	cmp	r3, r5
 8004722:	9a04      	ldr	r2, [sp, #16]
 8004724:	bfa8      	it	ge
 8004726:	462b      	movge	r3, r5
 8004728:	eba8 0803 	sub.w	r8, r8, r3
 800472c:	1aed      	subs	r5, r5, r3
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	9304      	str	r3, [sp, #16]
 8004732:	9b06      	ldr	r3, [sp, #24]
 8004734:	b1fb      	cbz	r3, 8004776 <_dtoa_r+0x7ce>
 8004736:	9b08      	ldr	r3, [sp, #32]
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 809f 	beq.w	800487c <_dtoa_r+0x8d4>
 800473e:	2e00      	cmp	r6, #0
 8004740:	dd11      	ble.n	8004766 <_dtoa_r+0x7be>
 8004742:	4639      	mov	r1, r7
 8004744:	4632      	mov	r2, r6
 8004746:	4620      	mov	r0, r4
 8004748:	f000 fbec 	bl	8004f24 <__pow5mult>
 800474c:	465a      	mov	r2, fp
 800474e:	4601      	mov	r1, r0
 8004750:	4607      	mov	r7, r0
 8004752:	4620      	mov	r0, r4
 8004754:	f000 fb40 	bl	8004dd8 <__multiply>
 8004758:	4659      	mov	r1, fp
 800475a:	9007      	str	r0, [sp, #28]
 800475c:	4620      	mov	r0, r4
 800475e:	f000 fa69 	bl	8004c34 <_Bfree>
 8004762:	9b07      	ldr	r3, [sp, #28]
 8004764:	469b      	mov	fp, r3
 8004766:	9b06      	ldr	r3, [sp, #24]
 8004768:	1b9a      	subs	r2, r3, r6
 800476a:	d004      	beq.n	8004776 <_dtoa_r+0x7ce>
 800476c:	4659      	mov	r1, fp
 800476e:	4620      	mov	r0, r4
 8004770:	f000 fbd8 	bl	8004f24 <__pow5mult>
 8004774:	4683      	mov	fp, r0
 8004776:	2101      	movs	r1, #1
 8004778:	4620      	mov	r0, r4
 800477a:	f000 fb17 	bl	8004dac <__i2b>
 800477e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004780:	2b00      	cmp	r3, #0
 8004782:	4606      	mov	r6, r0
 8004784:	dd7c      	ble.n	8004880 <_dtoa_r+0x8d8>
 8004786:	461a      	mov	r2, r3
 8004788:	4601      	mov	r1, r0
 800478a:	4620      	mov	r0, r4
 800478c:	f000 fbca 	bl	8004f24 <__pow5mult>
 8004790:	9b05      	ldr	r3, [sp, #20]
 8004792:	2b01      	cmp	r3, #1
 8004794:	4606      	mov	r6, r0
 8004796:	dd76      	ble.n	8004886 <_dtoa_r+0x8de>
 8004798:	2300      	movs	r3, #0
 800479a:	9306      	str	r3, [sp, #24]
 800479c:	6933      	ldr	r3, [r6, #16]
 800479e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80047a2:	6918      	ldr	r0, [r3, #16]
 80047a4:	f000 fab2 	bl	8004d0c <__hi0bits>
 80047a8:	f1c0 0020 	rsb	r0, r0, #32
 80047ac:	9b04      	ldr	r3, [sp, #16]
 80047ae:	4418      	add	r0, r3
 80047b0:	f010 001f 	ands.w	r0, r0, #31
 80047b4:	f000 8086 	beq.w	80048c4 <_dtoa_r+0x91c>
 80047b8:	f1c0 0320 	rsb	r3, r0, #32
 80047bc:	2b04      	cmp	r3, #4
 80047be:	dd7f      	ble.n	80048c0 <_dtoa_r+0x918>
 80047c0:	f1c0 001c 	rsb	r0, r0, #28
 80047c4:	9b04      	ldr	r3, [sp, #16]
 80047c6:	4403      	add	r3, r0
 80047c8:	4480      	add	r8, r0
 80047ca:	4405      	add	r5, r0
 80047cc:	9304      	str	r3, [sp, #16]
 80047ce:	f1b8 0f00 	cmp.w	r8, #0
 80047d2:	dd05      	ble.n	80047e0 <_dtoa_r+0x838>
 80047d4:	4659      	mov	r1, fp
 80047d6:	4642      	mov	r2, r8
 80047d8:	4620      	mov	r0, r4
 80047da:	f000 fbfd 	bl	8004fd8 <__lshift>
 80047de:	4683      	mov	fp, r0
 80047e0:	9b04      	ldr	r3, [sp, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	dd05      	ble.n	80047f2 <_dtoa_r+0x84a>
 80047e6:	4631      	mov	r1, r6
 80047e8:	461a      	mov	r2, r3
 80047ea:	4620      	mov	r0, r4
 80047ec:	f000 fbf4 	bl	8004fd8 <__lshift>
 80047f0:	4606      	mov	r6, r0
 80047f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d069      	beq.n	80048cc <_dtoa_r+0x924>
 80047f8:	4631      	mov	r1, r6
 80047fa:	4658      	mov	r0, fp
 80047fc:	f000 fc58 	bl	80050b0 <__mcmp>
 8004800:	2800      	cmp	r0, #0
 8004802:	da63      	bge.n	80048cc <_dtoa_r+0x924>
 8004804:	2300      	movs	r3, #0
 8004806:	4659      	mov	r1, fp
 8004808:	220a      	movs	r2, #10
 800480a:	4620      	mov	r0, r4
 800480c:	f000 fa34 	bl	8004c78 <__multadd>
 8004810:	9b08      	ldr	r3, [sp, #32]
 8004812:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004816:	4683      	mov	fp, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 818f 	beq.w	8004b3c <_dtoa_r+0xb94>
 800481e:	4639      	mov	r1, r7
 8004820:	2300      	movs	r3, #0
 8004822:	220a      	movs	r2, #10
 8004824:	4620      	mov	r0, r4
 8004826:	f000 fa27 	bl	8004c78 <__multadd>
 800482a:	f1b9 0f00 	cmp.w	r9, #0
 800482e:	4607      	mov	r7, r0
 8004830:	f300 808e 	bgt.w	8004950 <_dtoa_r+0x9a8>
 8004834:	9b05      	ldr	r3, [sp, #20]
 8004836:	2b02      	cmp	r3, #2
 8004838:	dc50      	bgt.n	80048dc <_dtoa_r+0x934>
 800483a:	e089      	b.n	8004950 <_dtoa_r+0x9a8>
 800483c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800483e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004842:	e75d      	b.n	8004700 <_dtoa_r+0x758>
 8004844:	9b01      	ldr	r3, [sp, #4]
 8004846:	1e5e      	subs	r6, r3, #1
 8004848:	9b06      	ldr	r3, [sp, #24]
 800484a:	42b3      	cmp	r3, r6
 800484c:	bfbf      	itttt	lt
 800484e:	9b06      	ldrlt	r3, [sp, #24]
 8004850:	9606      	strlt	r6, [sp, #24]
 8004852:	1af2      	sublt	r2, r6, r3
 8004854:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004856:	bfb6      	itet	lt
 8004858:	189b      	addlt	r3, r3, r2
 800485a:	1b9e      	subge	r6, r3, r6
 800485c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800485e:	9b01      	ldr	r3, [sp, #4]
 8004860:	bfb8      	it	lt
 8004862:	2600      	movlt	r6, #0
 8004864:	2b00      	cmp	r3, #0
 8004866:	bfb5      	itete	lt
 8004868:	eba8 0503 	sublt.w	r5, r8, r3
 800486c:	9b01      	ldrge	r3, [sp, #4]
 800486e:	2300      	movlt	r3, #0
 8004870:	4645      	movge	r5, r8
 8004872:	e747      	b.n	8004704 <_dtoa_r+0x75c>
 8004874:	9e06      	ldr	r6, [sp, #24]
 8004876:	9f08      	ldr	r7, [sp, #32]
 8004878:	4645      	mov	r5, r8
 800487a:	e74c      	b.n	8004716 <_dtoa_r+0x76e>
 800487c:	9a06      	ldr	r2, [sp, #24]
 800487e:	e775      	b.n	800476c <_dtoa_r+0x7c4>
 8004880:	9b05      	ldr	r3, [sp, #20]
 8004882:	2b01      	cmp	r3, #1
 8004884:	dc18      	bgt.n	80048b8 <_dtoa_r+0x910>
 8004886:	9b02      	ldr	r3, [sp, #8]
 8004888:	b9b3      	cbnz	r3, 80048b8 <_dtoa_r+0x910>
 800488a:	9b03      	ldr	r3, [sp, #12]
 800488c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004890:	b9a3      	cbnz	r3, 80048bc <_dtoa_r+0x914>
 8004892:	9b03      	ldr	r3, [sp, #12]
 8004894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004898:	0d1b      	lsrs	r3, r3, #20
 800489a:	051b      	lsls	r3, r3, #20
 800489c:	b12b      	cbz	r3, 80048aa <_dtoa_r+0x902>
 800489e:	9b04      	ldr	r3, [sp, #16]
 80048a0:	3301      	adds	r3, #1
 80048a2:	9304      	str	r3, [sp, #16]
 80048a4:	f108 0801 	add.w	r8, r8, #1
 80048a8:	2301      	movs	r3, #1
 80048aa:	9306      	str	r3, [sp, #24]
 80048ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f47f af74 	bne.w	800479c <_dtoa_r+0x7f4>
 80048b4:	2001      	movs	r0, #1
 80048b6:	e779      	b.n	80047ac <_dtoa_r+0x804>
 80048b8:	2300      	movs	r3, #0
 80048ba:	e7f6      	b.n	80048aa <_dtoa_r+0x902>
 80048bc:	9b02      	ldr	r3, [sp, #8]
 80048be:	e7f4      	b.n	80048aa <_dtoa_r+0x902>
 80048c0:	d085      	beq.n	80047ce <_dtoa_r+0x826>
 80048c2:	4618      	mov	r0, r3
 80048c4:	301c      	adds	r0, #28
 80048c6:	e77d      	b.n	80047c4 <_dtoa_r+0x81c>
 80048c8:	40240000 	.word	0x40240000
 80048cc:	9b01      	ldr	r3, [sp, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	dc38      	bgt.n	8004944 <_dtoa_r+0x99c>
 80048d2:	9b05      	ldr	r3, [sp, #20]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	dd35      	ble.n	8004944 <_dtoa_r+0x99c>
 80048d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80048dc:	f1b9 0f00 	cmp.w	r9, #0
 80048e0:	d10d      	bne.n	80048fe <_dtoa_r+0x956>
 80048e2:	4631      	mov	r1, r6
 80048e4:	464b      	mov	r3, r9
 80048e6:	2205      	movs	r2, #5
 80048e8:	4620      	mov	r0, r4
 80048ea:	f000 f9c5 	bl	8004c78 <__multadd>
 80048ee:	4601      	mov	r1, r0
 80048f0:	4606      	mov	r6, r0
 80048f2:	4658      	mov	r0, fp
 80048f4:	f000 fbdc 	bl	80050b0 <__mcmp>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	f73f adbd 	bgt.w	8004478 <_dtoa_r+0x4d0>
 80048fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004900:	9d00      	ldr	r5, [sp, #0]
 8004902:	ea6f 0a03 	mvn.w	sl, r3
 8004906:	f04f 0800 	mov.w	r8, #0
 800490a:	4631      	mov	r1, r6
 800490c:	4620      	mov	r0, r4
 800490e:	f000 f991 	bl	8004c34 <_Bfree>
 8004912:	2f00      	cmp	r7, #0
 8004914:	f43f aeb4 	beq.w	8004680 <_dtoa_r+0x6d8>
 8004918:	f1b8 0f00 	cmp.w	r8, #0
 800491c:	d005      	beq.n	800492a <_dtoa_r+0x982>
 800491e:	45b8      	cmp	r8, r7
 8004920:	d003      	beq.n	800492a <_dtoa_r+0x982>
 8004922:	4641      	mov	r1, r8
 8004924:	4620      	mov	r0, r4
 8004926:	f000 f985 	bl	8004c34 <_Bfree>
 800492a:	4639      	mov	r1, r7
 800492c:	4620      	mov	r0, r4
 800492e:	f000 f981 	bl	8004c34 <_Bfree>
 8004932:	e6a5      	b.n	8004680 <_dtoa_r+0x6d8>
 8004934:	2600      	movs	r6, #0
 8004936:	4637      	mov	r7, r6
 8004938:	e7e1      	b.n	80048fe <_dtoa_r+0x956>
 800493a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800493c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004940:	4637      	mov	r7, r6
 8004942:	e599      	b.n	8004478 <_dtoa_r+0x4d0>
 8004944:	9b08      	ldr	r3, [sp, #32]
 8004946:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 80fd 	beq.w	8004b4a <_dtoa_r+0xba2>
 8004950:	2d00      	cmp	r5, #0
 8004952:	dd05      	ble.n	8004960 <_dtoa_r+0x9b8>
 8004954:	4639      	mov	r1, r7
 8004956:	462a      	mov	r2, r5
 8004958:	4620      	mov	r0, r4
 800495a:	f000 fb3d 	bl	8004fd8 <__lshift>
 800495e:	4607      	mov	r7, r0
 8004960:	9b06      	ldr	r3, [sp, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d05c      	beq.n	8004a20 <_dtoa_r+0xa78>
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4620      	mov	r0, r4
 800496a:	f000 f923 	bl	8004bb4 <_Balloc>
 800496e:	4605      	mov	r5, r0
 8004970:	b928      	cbnz	r0, 800497e <_dtoa_r+0x9d6>
 8004972:	4b80      	ldr	r3, [pc, #512]	; (8004b74 <_dtoa_r+0xbcc>)
 8004974:	4602      	mov	r2, r0
 8004976:	f240 21ea 	movw	r1, #746	; 0x2ea
 800497a:	f7ff bb2e 	b.w	8003fda <_dtoa_r+0x32>
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	3202      	adds	r2, #2
 8004982:	0092      	lsls	r2, r2, #2
 8004984:	f107 010c 	add.w	r1, r7, #12
 8004988:	300c      	adds	r0, #12
 800498a:	f000 f905 	bl	8004b98 <memcpy>
 800498e:	2201      	movs	r2, #1
 8004990:	4629      	mov	r1, r5
 8004992:	4620      	mov	r0, r4
 8004994:	f000 fb20 	bl	8004fd8 <__lshift>
 8004998:	9b00      	ldr	r3, [sp, #0]
 800499a:	3301      	adds	r3, #1
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	9b00      	ldr	r3, [sp, #0]
 80049a0:	444b      	add	r3, r9
 80049a2:	9307      	str	r3, [sp, #28]
 80049a4:	9b02      	ldr	r3, [sp, #8]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	46b8      	mov	r8, r7
 80049ac:	9306      	str	r3, [sp, #24]
 80049ae:	4607      	mov	r7, r0
 80049b0:	9b01      	ldr	r3, [sp, #4]
 80049b2:	4631      	mov	r1, r6
 80049b4:	3b01      	subs	r3, #1
 80049b6:	4658      	mov	r0, fp
 80049b8:	9302      	str	r3, [sp, #8]
 80049ba:	f7ff fa67 	bl	8003e8c <quorem>
 80049be:	4603      	mov	r3, r0
 80049c0:	3330      	adds	r3, #48	; 0x30
 80049c2:	9004      	str	r0, [sp, #16]
 80049c4:	4641      	mov	r1, r8
 80049c6:	4658      	mov	r0, fp
 80049c8:	9308      	str	r3, [sp, #32]
 80049ca:	f000 fb71 	bl	80050b0 <__mcmp>
 80049ce:	463a      	mov	r2, r7
 80049d0:	4681      	mov	r9, r0
 80049d2:	4631      	mov	r1, r6
 80049d4:	4620      	mov	r0, r4
 80049d6:	f000 fb87 	bl	80050e8 <__mdiff>
 80049da:	68c2      	ldr	r2, [r0, #12]
 80049dc:	9b08      	ldr	r3, [sp, #32]
 80049de:	4605      	mov	r5, r0
 80049e0:	bb02      	cbnz	r2, 8004a24 <_dtoa_r+0xa7c>
 80049e2:	4601      	mov	r1, r0
 80049e4:	4658      	mov	r0, fp
 80049e6:	f000 fb63 	bl	80050b0 <__mcmp>
 80049ea:	9b08      	ldr	r3, [sp, #32]
 80049ec:	4602      	mov	r2, r0
 80049ee:	4629      	mov	r1, r5
 80049f0:	4620      	mov	r0, r4
 80049f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80049f6:	f000 f91d 	bl	8004c34 <_Bfree>
 80049fa:	9b05      	ldr	r3, [sp, #20]
 80049fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049fe:	9d01      	ldr	r5, [sp, #4]
 8004a00:	ea43 0102 	orr.w	r1, r3, r2
 8004a04:	9b06      	ldr	r3, [sp, #24]
 8004a06:	430b      	orrs	r3, r1
 8004a08:	9b08      	ldr	r3, [sp, #32]
 8004a0a:	d10d      	bne.n	8004a28 <_dtoa_r+0xa80>
 8004a0c:	2b39      	cmp	r3, #57	; 0x39
 8004a0e:	d029      	beq.n	8004a64 <_dtoa_r+0xabc>
 8004a10:	f1b9 0f00 	cmp.w	r9, #0
 8004a14:	dd01      	ble.n	8004a1a <_dtoa_r+0xa72>
 8004a16:	9b04      	ldr	r3, [sp, #16]
 8004a18:	3331      	adds	r3, #49	; 0x31
 8004a1a:	9a02      	ldr	r2, [sp, #8]
 8004a1c:	7013      	strb	r3, [r2, #0]
 8004a1e:	e774      	b.n	800490a <_dtoa_r+0x962>
 8004a20:	4638      	mov	r0, r7
 8004a22:	e7b9      	b.n	8004998 <_dtoa_r+0x9f0>
 8004a24:	2201      	movs	r2, #1
 8004a26:	e7e2      	b.n	80049ee <_dtoa_r+0xa46>
 8004a28:	f1b9 0f00 	cmp.w	r9, #0
 8004a2c:	db06      	blt.n	8004a3c <_dtoa_r+0xa94>
 8004a2e:	9905      	ldr	r1, [sp, #20]
 8004a30:	ea41 0909 	orr.w	r9, r1, r9
 8004a34:	9906      	ldr	r1, [sp, #24]
 8004a36:	ea59 0101 	orrs.w	r1, r9, r1
 8004a3a:	d120      	bne.n	8004a7e <_dtoa_r+0xad6>
 8004a3c:	2a00      	cmp	r2, #0
 8004a3e:	ddec      	ble.n	8004a1a <_dtoa_r+0xa72>
 8004a40:	4659      	mov	r1, fp
 8004a42:	2201      	movs	r2, #1
 8004a44:	4620      	mov	r0, r4
 8004a46:	9301      	str	r3, [sp, #4]
 8004a48:	f000 fac6 	bl	8004fd8 <__lshift>
 8004a4c:	4631      	mov	r1, r6
 8004a4e:	4683      	mov	fp, r0
 8004a50:	f000 fb2e 	bl	80050b0 <__mcmp>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	9b01      	ldr	r3, [sp, #4]
 8004a58:	dc02      	bgt.n	8004a60 <_dtoa_r+0xab8>
 8004a5a:	d1de      	bne.n	8004a1a <_dtoa_r+0xa72>
 8004a5c:	07da      	lsls	r2, r3, #31
 8004a5e:	d5dc      	bpl.n	8004a1a <_dtoa_r+0xa72>
 8004a60:	2b39      	cmp	r3, #57	; 0x39
 8004a62:	d1d8      	bne.n	8004a16 <_dtoa_r+0xa6e>
 8004a64:	9a02      	ldr	r2, [sp, #8]
 8004a66:	2339      	movs	r3, #57	; 0x39
 8004a68:	7013      	strb	r3, [r2, #0]
 8004a6a:	462b      	mov	r3, r5
 8004a6c:	461d      	mov	r5, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004a74:	2a39      	cmp	r2, #57	; 0x39
 8004a76:	d050      	beq.n	8004b1a <_dtoa_r+0xb72>
 8004a78:	3201      	adds	r2, #1
 8004a7a:	701a      	strb	r2, [r3, #0]
 8004a7c:	e745      	b.n	800490a <_dtoa_r+0x962>
 8004a7e:	2a00      	cmp	r2, #0
 8004a80:	dd03      	ble.n	8004a8a <_dtoa_r+0xae2>
 8004a82:	2b39      	cmp	r3, #57	; 0x39
 8004a84:	d0ee      	beq.n	8004a64 <_dtoa_r+0xabc>
 8004a86:	3301      	adds	r3, #1
 8004a88:	e7c7      	b.n	8004a1a <_dtoa_r+0xa72>
 8004a8a:	9a01      	ldr	r2, [sp, #4]
 8004a8c:	9907      	ldr	r1, [sp, #28]
 8004a8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004a92:	428a      	cmp	r2, r1
 8004a94:	d02a      	beq.n	8004aec <_dtoa_r+0xb44>
 8004a96:	4659      	mov	r1, fp
 8004a98:	2300      	movs	r3, #0
 8004a9a:	220a      	movs	r2, #10
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f000 f8eb 	bl	8004c78 <__multadd>
 8004aa2:	45b8      	cmp	r8, r7
 8004aa4:	4683      	mov	fp, r0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	f04f 020a 	mov.w	r2, #10
 8004aae:	4641      	mov	r1, r8
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	d107      	bne.n	8004ac4 <_dtoa_r+0xb1c>
 8004ab4:	f000 f8e0 	bl	8004c78 <__multadd>
 8004ab8:	4680      	mov	r8, r0
 8004aba:	4607      	mov	r7, r0
 8004abc:	9b01      	ldr	r3, [sp, #4]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	e775      	b.n	80049b0 <_dtoa_r+0xa08>
 8004ac4:	f000 f8d8 	bl	8004c78 <__multadd>
 8004ac8:	4639      	mov	r1, r7
 8004aca:	4680      	mov	r8, r0
 8004acc:	2300      	movs	r3, #0
 8004ace:	220a      	movs	r2, #10
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f000 f8d1 	bl	8004c78 <__multadd>
 8004ad6:	4607      	mov	r7, r0
 8004ad8:	e7f0      	b.n	8004abc <_dtoa_r+0xb14>
 8004ada:	f1b9 0f00 	cmp.w	r9, #0
 8004ade:	9a00      	ldr	r2, [sp, #0]
 8004ae0:	bfcc      	ite	gt
 8004ae2:	464d      	movgt	r5, r9
 8004ae4:	2501      	movle	r5, #1
 8004ae6:	4415      	add	r5, r2
 8004ae8:	f04f 0800 	mov.w	r8, #0
 8004aec:	4659      	mov	r1, fp
 8004aee:	2201      	movs	r2, #1
 8004af0:	4620      	mov	r0, r4
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	f000 fa70 	bl	8004fd8 <__lshift>
 8004af8:	4631      	mov	r1, r6
 8004afa:	4683      	mov	fp, r0
 8004afc:	f000 fad8 	bl	80050b0 <__mcmp>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	dcb2      	bgt.n	8004a6a <_dtoa_r+0xac2>
 8004b04:	d102      	bne.n	8004b0c <_dtoa_r+0xb64>
 8004b06:	9b01      	ldr	r3, [sp, #4]
 8004b08:	07db      	lsls	r3, r3, #31
 8004b0a:	d4ae      	bmi.n	8004a6a <_dtoa_r+0xac2>
 8004b0c:	462b      	mov	r3, r5
 8004b0e:	461d      	mov	r5, r3
 8004b10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b14:	2a30      	cmp	r2, #48	; 0x30
 8004b16:	d0fa      	beq.n	8004b0e <_dtoa_r+0xb66>
 8004b18:	e6f7      	b.n	800490a <_dtoa_r+0x962>
 8004b1a:	9a00      	ldr	r2, [sp, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d1a5      	bne.n	8004a6c <_dtoa_r+0xac4>
 8004b20:	f10a 0a01 	add.w	sl, sl, #1
 8004b24:	2331      	movs	r3, #49	; 0x31
 8004b26:	e779      	b.n	8004a1c <_dtoa_r+0xa74>
 8004b28:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <_dtoa_r+0xbd0>)
 8004b2a:	f7ff baaf 	b.w	800408c <_dtoa_r+0xe4>
 8004b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f47f aa86 	bne.w	8004042 <_dtoa_r+0x9a>
 8004b36:	4b11      	ldr	r3, [pc, #68]	; (8004b7c <_dtoa_r+0xbd4>)
 8004b38:	f7ff baa8 	b.w	800408c <_dtoa_r+0xe4>
 8004b3c:	f1b9 0f00 	cmp.w	r9, #0
 8004b40:	dc03      	bgt.n	8004b4a <_dtoa_r+0xba2>
 8004b42:	9b05      	ldr	r3, [sp, #20]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	f73f aec9 	bgt.w	80048dc <_dtoa_r+0x934>
 8004b4a:	9d00      	ldr	r5, [sp, #0]
 8004b4c:	4631      	mov	r1, r6
 8004b4e:	4658      	mov	r0, fp
 8004b50:	f7ff f99c 	bl	8003e8c <quorem>
 8004b54:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004b58:	f805 3b01 	strb.w	r3, [r5], #1
 8004b5c:	9a00      	ldr	r2, [sp, #0]
 8004b5e:	1aaa      	subs	r2, r5, r2
 8004b60:	4591      	cmp	r9, r2
 8004b62:	ddba      	ble.n	8004ada <_dtoa_r+0xb32>
 8004b64:	4659      	mov	r1, fp
 8004b66:	2300      	movs	r3, #0
 8004b68:	220a      	movs	r2, #10
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f000 f884 	bl	8004c78 <__multadd>
 8004b70:	4683      	mov	fp, r0
 8004b72:	e7eb      	b.n	8004b4c <_dtoa_r+0xba4>
 8004b74:	080063eb 	.word	0x080063eb
 8004b78:	08006344 	.word	0x08006344
 8004b7c:	08006368 	.word	0x08006368

08004b80 <_localeconv_r>:
 8004b80:	4800      	ldr	r0, [pc, #0]	; (8004b84 <_localeconv_r+0x4>)
 8004b82:	4770      	bx	lr
 8004b84:	20000160 	.word	0x20000160

08004b88 <malloc>:
 8004b88:	4b02      	ldr	r3, [pc, #8]	; (8004b94 <malloc+0xc>)
 8004b8a:	4601      	mov	r1, r0
 8004b8c:	6818      	ldr	r0, [r3, #0]
 8004b8e:	f000 bbef 	b.w	8005370 <_malloc_r>
 8004b92:	bf00      	nop
 8004b94:	2000000c 	.word	0x2000000c

08004b98 <memcpy>:
 8004b98:	440a      	add	r2, r1
 8004b9a:	4291      	cmp	r1, r2
 8004b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ba0:	d100      	bne.n	8004ba4 <memcpy+0xc>
 8004ba2:	4770      	bx	lr
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004baa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bae:	4291      	cmp	r1, r2
 8004bb0:	d1f9      	bne.n	8004ba6 <memcpy+0xe>
 8004bb2:	bd10      	pop	{r4, pc}

08004bb4 <_Balloc>:
 8004bb4:	b570      	push	{r4, r5, r6, lr}
 8004bb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004bb8:	4604      	mov	r4, r0
 8004bba:	460d      	mov	r5, r1
 8004bbc:	b976      	cbnz	r6, 8004bdc <_Balloc+0x28>
 8004bbe:	2010      	movs	r0, #16
 8004bc0:	f7ff ffe2 	bl	8004b88 <malloc>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	6260      	str	r0, [r4, #36]	; 0x24
 8004bc8:	b920      	cbnz	r0, 8004bd4 <_Balloc+0x20>
 8004bca:	4b18      	ldr	r3, [pc, #96]	; (8004c2c <_Balloc+0x78>)
 8004bcc:	4818      	ldr	r0, [pc, #96]	; (8004c30 <_Balloc+0x7c>)
 8004bce:	2166      	movs	r1, #102	; 0x66
 8004bd0:	f000 fd94 	bl	80056fc <__assert_func>
 8004bd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004bd8:	6006      	str	r6, [r0, #0]
 8004bda:	60c6      	str	r6, [r0, #12]
 8004bdc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004bde:	68f3      	ldr	r3, [r6, #12]
 8004be0:	b183      	cbz	r3, 8004c04 <_Balloc+0x50>
 8004be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004bea:	b9b8      	cbnz	r0, 8004c1c <_Balloc+0x68>
 8004bec:	2101      	movs	r1, #1
 8004bee:	fa01 f605 	lsl.w	r6, r1, r5
 8004bf2:	1d72      	adds	r2, r6, #5
 8004bf4:	0092      	lsls	r2, r2, #2
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f000 fb5a 	bl	80052b0 <_calloc_r>
 8004bfc:	b160      	cbz	r0, 8004c18 <_Balloc+0x64>
 8004bfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004c02:	e00e      	b.n	8004c22 <_Balloc+0x6e>
 8004c04:	2221      	movs	r2, #33	; 0x21
 8004c06:	2104      	movs	r1, #4
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f000 fb51 	bl	80052b0 <_calloc_r>
 8004c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c10:	60f0      	str	r0, [r6, #12]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1e4      	bne.n	8004be2 <_Balloc+0x2e>
 8004c18:	2000      	movs	r0, #0
 8004c1a:	bd70      	pop	{r4, r5, r6, pc}
 8004c1c:	6802      	ldr	r2, [r0, #0]
 8004c1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004c22:	2300      	movs	r3, #0
 8004c24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004c28:	e7f7      	b.n	8004c1a <_Balloc+0x66>
 8004c2a:	bf00      	nop
 8004c2c:	08006375 	.word	0x08006375
 8004c30:	080063fc 	.word	0x080063fc

08004c34 <_Bfree>:
 8004c34:	b570      	push	{r4, r5, r6, lr}
 8004c36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004c38:	4605      	mov	r5, r0
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	b976      	cbnz	r6, 8004c5c <_Bfree+0x28>
 8004c3e:	2010      	movs	r0, #16
 8004c40:	f7ff ffa2 	bl	8004b88 <malloc>
 8004c44:	4602      	mov	r2, r0
 8004c46:	6268      	str	r0, [r5, #36]	; 0x24
 8004c48:	b920      	cbnz	r0, 8004c54 <_Bfree+0x20>
 8004c4a:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <_Bfree+0x3c>)
 8004c4c:	4809      	ldr	r0, [pc, #36]	; (8004c74 <_Bfree+0x40>)
 8004c4e:	218a      	movs	r1, #138	; 0x8a
 8004c50:	f000 fd54 	bl	80056fc <__assert_func>
 8004c54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c58:	6006      	str	r6, [r0, #0]
 8004c5a:	60c6      	str	r6, [r0, #12]
 8004c5c:	b13c      	cbz	r4, 8004c6e <_Bfree+0x3a>
 8004c5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c60:	6862      	ldr	r2, [r4, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c68:	6021      	str	r1, [r4, #0]
 8004c6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	08006375 	.word	0x08006375
 8004c74:	080063fc 	.word	0x080063fc

08004c78 <__multadd>:
 8004c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c7c:	690e      	ldr	r6, [r1, #16]
 8004c7e:	4607      	mov	r7, r0
 8004c80:	4698      	mov	r8, r3
 8004c82:	460c      	mov	r4, r1
 8004c84:	f101 0014 	add.w	r0, r1, #20
 8004c88:	2300      	movs	r3, #0
 8004c8a:	6805      	ldr	r5, [r0, #0]
 8004c8c:	b2a9      	uxth	r1, r5
 8004c8e:	fb02 8101 	mla	r1, r2, r1, r8
 8004c92:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004c96:	0c2d      	lsrs	r5, r5, #16
 8004c98:	fb02 c505 	mla	r5, r2, r5, ip
 8004c9c:	b289      	uxth	r1, r1
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004ca4:	429e      	cmp	r6, r3
 8004ca6:	f840 1b04 	str.w	r1, [r0], #4
 8004caa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004cae:	dcec      	bgt.n	8004c8a <__multadd+0x12>
 8004cb0:	f1b8 0f00 	cmp.w	r8, #0
 8004cb4:	d022      	beq.n	8004cfc <__multadd+0x84>
 8004cb6:	68a3      	ldr	r3, [r4, #8]
 8004cb8:	42b3      	cmp	r3, r6
 8004cba:	dc19      	bgt.n	8004cf0 <__multadd+0x78>
 8004cbc:	6861      	ldr	r1, [r4, #4]
 8004cbe:	4638      	mov	r0, r7
 8004cc0:	3101      	adds	r1, #1
 8004cc2:	f7ff ff77 	bl	8004bb4 <_Balloc>
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	b928      	cbnz	r0, 8004cd6 <__multadd+0x5e>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <__multadd+0x8c>)
 8004cce:	480e      	ldr	r0, [pc, #56]	; (8004d08 <__multadd+0x90>)
 8004cd0:	21b5      	movs	r1, #181	; 0xb5
 8004cd2:	f000 fd13 	bl	80056fc <__assert_func>
 8004cd6:	6922      	ldr	r2, [r4, #16]
 8004cd8:	3202      	adds	r2, #2
 8004cda:	f104 010c 	add.w	r1, r4, #12
 8004cde:	0092      	lsls	r2, r2, #2
 8004ce0:	300c      	adds	r0, #12
 8004ce2:	f7ff ff59 	bl	8004b98 <memcpy>
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	4638      	mov	r0, r7
 8004cea:	f7ff ffa3 	bl	8004c34 <_Bfree>
 8004cee:	462c      	mov	r4, r5
 8004cf0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004cf4:	3601      	adds	r6, #1
 8004cf6:	f8c3 8014 	str.w	r8, [r3, #20]
 8004cfa:	6126      	str	r6, [r4, #16]
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d02:	bf00      	nop
 8004d04:	080063eb 	.word	0x080063eb
 8004d08:	080063fc 	.word	0x080063fc

08004d0c <__hi0bits>:
 8004d0c:	0c03      	lsrs	r3, r0, #16
 8004d0e:	041b      	lsls	r3, r3, #16
 8004d10:	b9d3      	cbnz	r3, 8004d48 <__hi0bits+0x3c>
 8004d12:	0400      	lsls	r0, r0, #16
 8004d14:	2310      	movs	r3, #16
 8004d16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004d1a:	bf04      	itt	eq
 8004d1c:	0200      	lsleq	r0, r0, #8
 8004d1e:	3308      	addeq	r3, #8
 8004d20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004d24:	bf04      	itt	eq
 8004d26:	0100      	lsleq	r0, r0, #4
 8004d28:	3304      	addeq	r3, #4
 8004d2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004d2e:	bf04      	itt	eq
 8004d30:	0080      	lsleq	r0, r0, #2
 8004d32:	3302      	addeq	r3, #2
 8004d34:	2800      	cmp	r0, #0
 8004d36:	db05      	blt.n	8004d44 <__hi0bits+0x38>
 8004d38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004d3c:	f103 0301 	add.w	r3, r3, #1
 8004d40:	bf08      	it	eq
 8004d42:	2320      	moveq	r3, #32
 8004d44:	4618      	mov	r0, r3
 8004d46:	4770      	bx	lr
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e7e4      	b.n	8004d16 <__hi0bits+0xa>

08004d4c <__lo0bits>:
 8004d4c:	6803      	ldr	r3, [r0, #0]
 8004d4e:	f013 0207 	ands.w	r2, r3, #7
 8004d52:	4601      	mov	r1, r0
 8004d54:	d00b      	beq.n	8004d6e <__lo0bits+0x22>
 8004d56:	07da      	lsls	r2, r3, #31
 8004d58:	d424      	bmi.n	8004da4 <__lo0bits+0x58>
 8004d5a:	0798      	lsls	r0, r3, #30
 8004d5c:	bf49      	itett	mi
 8004d5e:	085b      	lsrmi	r3, r3, #1
 8004d60:	089b      	lsrpl	r3, r3, #2
 8004d62:	2001      	movmi	r0, #1
 8004d64:	600b      	strmi	r3, [r1, #0]
 8004d66:	bf5c      	itt	pl
 8004d68:	600b      	strpl	r3, [r1, #0]
 8004d6a:	2002      	movpl	r0, #2
 8004d6c:	4770      	bx	lr
 8004d6e:	b298      	uxth	r0, r3
 8004d70:	b9b0      	cbnz	r0, 8004da0 <__lo0bits+0x54>
 8004d72:	0c1b      	lsrs	r3, r3, #16
 8004d74:	2010      	movs	r0, #16
 8004d76:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004d7a:	bf04      	itt	eq
 8004d7c:	0a1b      	lsreq	r3, r3, #8
 8004d7e:	3008      	addeq	r0, #8
 8004d80:	071a      	lsls	r2, r3, #28
 8004d82:	bf04      	itt	eq
 8004d84:	091b      	lsreq	r3, r3, #4
 8004d86:	3004      	addeq	r0, #4
 8004d88:	079a      	lsls	r2, r3, #30
 8004d8a:	bf04      	itt	eq
 8004d8c:	089b      	lsreq	r3, r3, #2
 8004d8e:	3002      	addeq	r0, #2
 8004d90:	07da      	lsls	r2, r3, #31
 8004d92:	d403      	bmi.n	8004d9c <__lo0bits+0x50>
 8004d94:	085b      	lsrs	r3, r3, #1
 8004d96:	f100 0001 	add.w	r0, r0, #1
 8004d9a:	d005      	beq.n	8004da8 <__lo0bits+0x5c>
 8004d9c:	600b      	str	r3, [r1, #0]
 8004d9e:	4770      	bx	lr
 8004da0:	4610      	mov	r0, r2
 8004da2:	e7e8      	b.n	8004d76 <__lo0bits+0x2a>
 8004da4:	2000      	movs	r0, #0
 8004da6:	4770      	bx	lr
 8004da8:	2020      	movs	r0, #32
 8004daa:	4770      	bx	lr

08004dac <__i2b>:
 8004dac:	b510      	push	{r4, lr}
 8004dae:	460c      	mov	r4, r1
 8004db0:	2101      	movs	r1, #1
 8004db2:	f7ff feff 	bl	8004bb4 <_Balloc>
 8004db6:	4602      	mov	r2, r0
 8004db8:	b928      	cbnz	r0, 8004dc6 <__i2b+0x1a>
 8004dba:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <__i2b+0x24>)
 8004dbc:	4805      	ldr	r0, [pc, #20]	; (8004dd4 <__i2b+0x28>)
 8004dbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004dc2:	f000 fc9b 	bl	80056fc <__assert_func>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	6144      	str	r4, [r0, #20]
 8004dca:	6103      	str	r3, [r0, #16]
 8004dcc:	bd10      	pop	{r4, pc}
 8004dce:	bf00      	nop
 8004dd0:	080063eb 	.word	0x080063eb
 8004dd4:	080063fc 	.word	0x080063fc

08004dd8 <__multiply>:
 8004dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ddc:	4614      	mov	r4, r2
 8004dde:	690a      	ldr	r2, [r1, #16]
 8004de0:	6923      	ldr	r3, [r4, #16]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	bfb8      	it	lt
 8004de6:	460b      	movlt	r3, r1
 8004de8:	460d      	mov	r5, r1
 8004dea:	bfbc      	itt	lt
 8004dec:	4625      	movlt	r5, r4
 8004dee:	461c      	movlt	r4, r3
 8004df0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004df4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004df8:	68ab      	ldr	r3, [r5, #8]
 8004dfa:	6869      	ldr	r1, [r5, #4]
 8004dfc:	eb0a 0709 	add.w	r7, sl, r9
 8004e00:	42bb      	cmp	r3, r7
 8004e02:	b085      	sub	sp, #20
 8004e04:	bfb8      	it	lt
 8004e06:	3101      	addlt	r1, #1
 8004e08:	f7ff fed4 	bl	8004bb4 <_Balloc>
 8004e0c:	b930      	cbnz	r0, 8004e1c <__multiply+0x44>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	4b42      	ldr	r3, [pc, #264]	; (8004f1c <__multiply+0x144>)
 8004e12:	4843      	ldr	r0, [pc, #268]	; (8004f20 <__multiply+0x148>)
 8004e14:	f240 115d 	movw	r1, #349	; 0x15d
 8004e18:	f000 fc70 	bl	80056fc <__assert_func>
 8004e1c:	f100 0614 	add.w	r6, r0, #20
 8004e20:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004e24:	4633      	mov	r3, r6
 8004e26:	2200      	movs	r2, #0
 8004e28:	4543      	cmp	r3, r8
 8004e2a:	d31e      	bcc.n	8004e6a <__multiply+0x92>
 8004e2c:	f105 0c14 	add.w	ip, r5, #20
 8004e30:	f104 0314 	add.w	r3, r4, #20
 8004e34:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004e38:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004e3c:	9202      	str	r2, [sp, #8]
 8004e3e:	ebac 0205 	sub.w	r2, ip, r5
 8004e42:	3a15      	subs	r2, #21
 8004e44:	f022 0203 	bic.w	r2, r2, #3
 8004e48:	3204      	adds	r2, #4
 8004e4a:	f105 0115 	add.w	r1, r5, #21
 8004e4e:	458c      	cmp	ip, r1
 8004e50:	bf38      	it	cc
 8004e52:	2204      	movcc	r2, #4
 8004e54:	9201      	str	r2, [sp, #4]
 8004e56:	9a02      	ldr	r2, [sp, #8]
 8004e58:	9303      	str	r3, [sp, #12]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d808      	bhi.n	8004e70 <__multiply+0x98>
 8004e5e:	2f00      	cmp	r7, #0
 8004e60:	dc55      	bgt.n	8004f0e <__multiply+0x136>
 8004e62:	6107      	str	r7, [r0, #16]
 8004e64:	b005      	add	sp, #20
 8004e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6a:	f843 2b04 	str.w	r2, [r3], #4
 8004e6e:	e7db      	b.n	8004e28 <__multiply+0x50>
 8004e70:	f8b3 a000 	ldrh.w	sl, [r3]
 8004e74:	f1ba 0f00 	cmp.w	sl, #0
 8004e78:	d020      	beq.n	8004ebc <__multiply+0xe4>
 8004e7a:	f105 0e14 	add.w	lr, r5, #20
 8004e7e:	46b1      	mov	r9, r6
 8004e80:	2200      	movs	r2, #0
 8004e82:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004e86:	f8d9 b000 	ldr.w	fp, [r9]
 8004e8a:	b2a1      	uxth	r1, r4
 8004e8c:	fa1f fb8b 	uxth.w	fp, fp
 8004e90:	fb0a b101 	mla	r1, sl, r1, fp
 8004e94:	4411      	add	r1, r2
 8004e96:	f8d9 2000 	ldr.w	r2, [r9]
 8004e9a:	0c24      	lsrs	r4, r4, #16
 8004e9c:	0c12      	lsrs	r2, r2, #16
 8004e9e:	fb0a 2404 	mla	r4, sl, r4, r2
 8004ea2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004ea6:	b289      	uxth	r1, r1
 8004ea8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004eac:	45f4      	cmp	ip, lr
 8004eae:	f849 1b04 	str.w	r1, [r9], #4
 8004eb2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004eb6:	d8e4      	bhi.n	8004e82 <__multiply+0xaa>
 8004eb8:	9901      	ldr	r1, [sp, #4]
 8004eba:	5072      	str	r2, [r6, r1]
 8004ebc:	9a03      	ldr	r2, [sp, #12]
 8004ebe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	f1b9 0f00 	cmp.w	r9, #0
 8004ec8:	d01f      	beq.n	8004f0a <__multiply+0x132>
 8004eca:	6834      	ldr	r4, [r6, #0]
 8004ecc:	f105 0114 	add.w	r1, r5, #20
 8004ed0:	46b6      	mov	lr, r6
 8004ed2:	f04f 0a00 	mov.w	sl, #0
 8004ed6:	880a      	ldrh	r2, [r1, #0]
 8004ed8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004edc:	fb09 b202 	mla	r2, r9, r2, fp
 8004ee0:	4492      	add	sl, r2
 8004ee2:	b2a4      	uxth	r4, r4
 8004ee4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004ee8:	f84e 4b04 	str.w	r4, [lr], #4
 8004eec:	f851 4b04 	ldr.w	r4, [r1], #4
 8004ef0:	f8be 2000 	ldrh.w	r2, [lr]
 8004ef4:	0c24      	lsrs	r4, r4, #16
 8004ef6:	fb09 2404 	mla	r4, r9, r4, r2
 8004efa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004efe:	458c      	cmp	ip, r1
 8004f00:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004f04:	d8e7      	bhi.n	8004ed6 <__multiply+0xfe>
 8004f06:	9a01      	ldr	r2, [sp, #4]
 8004f08:	50b4      	str	r4, [r6, r2]
 8004f0a:	3604      	adds	r6, #4
 8004f0c:	e7a3      	b.n	8004e56 <__multiply+0x7e>
 8004f0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1a5      	bne.n	8004e62 <__multiply+0x8a>
 8004f16:	3f01      	subs	r7, #1
 8004f18:	e7a1      	b.n	8004e5e <__multiply+0x86>
 8004f1a:	bf00      	nop
 8004f1c:	080063eb 	.word	0x080063eb
 8004f20:	080063fc 	.word	0x080063fc

08004f24 <__pow5mult>:
 8004f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f28:	4615      	mov	r5, r2
 8004f2a:	f012 0203 	ands.w	r2, r2, #3
 8004f2e:	4606      	mov	r6, r0
 8004f30:	460f      	mov	r7, r1
 8004f32:	d007      	beq.n	8004f44 <__pow5mult+0x20>
 8004f34:	4c25      	ldr	r4, [pc, #148]	; (8004fcc <__pow5mult+0xa8>)
 8004f36:	3a01      	subs	r2, #1
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f3e:	f7ff fe9b 	bl	8004c78 <__multadd>
 8004f42:	4607      	mov	r7, r0
 8004f44:	10ad      	asrs	r5, r5, #2
 8004f46:	d03d      	beq.n	8004fc4 <__pow5mult+0xa0>
 8004f48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004f4a:	b97c      	cbnz	r4, 8004f6c <__pow5mult+0x48>
 8004f4c:	2010      	movs	r0, #16
 8004f4e:	f7ff fe1b 	bl	8004b88 <malloc>
 8004f52:	4602      	mov	r2, r0
 8004f54:	6270      	str	r0, [r6, #36]	; 0x24
 8004f56:	b928      	cbnz	r0, 8004f64 <__pow5mult+0x40>
 8004f58:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <__pow5mult+0xac>)
 8004f5a:	481e      	ldr	r0, [pc, #120]	; (8004fd4 <__pow5mult+0xb0>)
 8004f5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004f60:	f000 fbcc 	bl	80056fc <__assert_func>
 8004f64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f68:	6004      	str	r4, [r0, #0]
 8004f6a:	60c4      	str	r4, [r0, #12]
 8004f6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004f70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004f74:	b94c      	cbnz	r4, 8004f8a <__pow5mult+0x66>
 8004f76:	f240 2171 	movw	r1, #625	; 0x271
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	f7ff ff16 	bl	8004dac <__i2b>
 8004f80:	2300      	movs	r3, #0
 8004f82:	f8c8 0008 	str.w	r0, [r8, #8]
 8004f86:	4604      	mov	r4, r0
 8004f88:	6003      	str	r3, [r0, #0]
 8004f8a:	f04f 0900 	mov.w	r9, #0
 8004f8e:	07eb      	lsls	r3, r5, #31
 8004f90:	d50a      	bpl.n	8004fa8 <__pow5mult+0x84>
 8004f92:	4639      	mov	r1, r7
 8004f94:	4622      	mov	r2, r4
 8004f96:	4630      	mov	r0, r6
 8004f98:	f7ff ff1e 	bl	8004dd8 <__multiply>
 8004f9c:	4639      	mov	r1, r7
 8004f9e:	4680      	mov	r8, r0
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f7ff fe47 	bl	8004c34 <_Bfree>
 8004fa6:	4647      	mov	r7, r8
 8004fa8:	106d      	asrs	r5, r5, #1
 8004faa:	d00b      	beq.n	8004fc4 <__pow5mult+0xa0>
 8004fac:	6820      	ldr	r0, [r4, #0]
 8004fae:	b938      	cbnz	r0, 8004fc0 <__pow5mult+0x9c>
 8004fb0:	4622      	mov	r2, r4
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	f7ff ff0f 	bl	8004dd8 <__multiply>
 8004fba:	6020      	str	r0, [r4, #0]
 8004fbc:	f8c0 9000 	str.w	r9, [r0]
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	e7e4      	b.n	8004f8e <__pow5mult+0x6a>
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fca:	bf00      	nop
 8004fcc:	08006550 	.word	0x08006550
 8004fd0:	08006375 	.word	0x08006375
 8004fd4:	080063fc 	.word	0x080063fc

08004fd8 <__lshift>:
 8004fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fdc:	460c      	mov	r4, r1
 8004fde:	6849      	ldr	r1, [r1, #4]
 8004fe0:	6923      	ldr	r3, [r4, #16]
 8004fe2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004fe6:	68a3      	ldr	r3, [r4, #8]
 8004fe8:	4607      	mov	r7, r0
 8004fea:	4691      	mov	r9, r2
 8004fec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ff0:	f108 0601 	add.w	r6, r8, #1
 8004ff4:	42b3      	cmp	r3, r6
 8004ff6:	db0b      	blt.n	8005010 <__lshift+0x38>
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	f7ff fddb 	bl	8004bb4 <_Balloc>
 8004ffe:	4605      	mov	r5, r0
 8005000:	b948      	cbnz	r0, 8005016 <__lshift+0x3e>
 8005002:	4602      	mov	r2, r0
 8005004:	4b28      	ldr	r3, [pc, #160]	; (80050a8 <__lshift+0xd0>)
 8005006:	4829      	ldr	r0, [pc, #164]	; (80050ac <__lshift+0xd4>)
 8005008:	f240 11d9 	movw	r1, #473	; 0x1d9
 800500c:	f000 fb76 	bl	80056fc <__assert_func>
 8005010:	3101      	adds	r1, #1
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	e7ee      	b.n	8004ff4 <__lshift+0x1c>
 8005016:	2300      	movs	r3, #0
 8005018:	f100 0114 	add.w	r1, r0, #20
 800501c:	f100 0210 	add.w	r2, r0, #16
 8005020:	4618      	mov	r0, r3
 8005022:	4553      	cmp	r3, sl
 8005024:	db33      	blt.n	800508e <__lshift+0xb6>
 8005026:	6920      	ldr	r0, [r4, #16]
 8005028:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800502c:	f104 0314 	add.w	r3, r4, #20
 8005030:	f019 091f 	ands.w	r9, r9, #31
 8005034:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005038:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800503c:	d02b      	beq.n	8005096 <__lshift+0xbe>
 800503e:	f1c9 0e20 	rsb	lr, r9, #32
 8005042:	468a      	mov	sl, r1
 8005044:	2200      	movs	r2, #0
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	fa00 f009 	lsl.w	r0, r0, r9
 800504c:	4302      	orrs	r2, r0
 800504e:	f84a 2b04 	str.w	r2, [sl], #4
 8005052:	f853 2b04 	ldr.w	r2, [r3], #4
 8005056:	459c      	cmp	ip, r3
 8005058:	fa22 f20e 	lsr.w	r2, r2, lr
 800505c:	d8f3      	bhi.n	8005046 <__lshift+0x6e>
 800505e:	ebac 0304 	sub.w	r3, ip, r4
 8005062:	3b15      	subs	r3, #21
 8005064:	f023 0303 	bic.w	r3, r3, #3
 8005068:	3304      	adds	r3, #4
 800506a:	f104 0015 	add.w	r0, r4, #21
 800506e:	4584      	cmp	ip, r0
 8005070:	bf38      	it	cc
 8005072:	2304      	movcc	r3, #4
 8005074:	50ca      	str	r2, [r1, r3]
 8005076:	b10a      	cbz	r2, 800507c <__lshift+0xa4>
 8005078:	f108 0602 	add.w	r6, r8, #2
 800507c:	3e01      	subs	r6, #1
 800507e:	4638      	mov	r0, r7
 8005080:	612e      	str	r6, [r5, #16]
 8005082:	4621      	mov	r1, r4
 8005084:	f7ff fdd6 	bl	8004c34 <_Bfree>
 8005088:	4628      	mov	r0, r5
 800508a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005092:	3301      	adds	r3, #1
 8005094:	e7c5      	b.n	8005022 <__lshift+0x4a>
 8005096:	3904      	subs	r1, #4
 8005098:	f853 2b04 	ldr.w	r2, [r3], #4
 800509c:	f841 2f04 	str.w	r2, [r1, #4]!
 80050a0:	459c      	cmp	ip, r3
 80050a2:	d8f9      	bhi.n	8005098 <__lshift+0xc0>
 80050a4:	e7ea      	b.n	800507c <__lshift+0xa4>
 80050a6:	bf00      	nop
 80050a8:	080063eb 	.word	0x080063eb
 80050ac:	080063fc 	.word	0x080063fc

080050b0 <__mcmp>:
 80050b0:	b530      	push	{r4, r5, lr}
 80050b2:	6902      	ldr	r2, [r0, #16]
 80050b4:	690c      	ldr	r4, [r1, #16]
 80050b6:	1b12      	subs	r2, r2, r4
 80050b8:	d10e      	bne.n	80050d8 <__mcmp+0x28>
 80050ba:	f100 0314 	add.w	r3, r0, #20
 80050be:	3114      	adds	r1, #20
 80050c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80050c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80050c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80050cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80050d0:	42a5      	cmp	r5, r4
 80050d2:	d003      	beq.n	80050dc <__mcmp+0x2c>
 80050d4:	d305      	bcc.n	80050e2 <__mcmp+0x32>
 80050d6:	2201      	movs	r2, #1
 80050d8:	4610      	mov	r0, r2
 80050da:	bd30      	pop	{r4, r5, pc}
 80050dc:	4283      	cmp	r3, r0
 80050de:	d3f3      	bcc.n	80050c8 <__mcmp+0x18>
 80050e0:	e7fa      	b.n	80050d8 <__mcmp+0x28>
 80050e2:	f04f 32ff 	mov.w	r2, #4294967295
 80050e6:	e7f7      	b.n	80050d8 <__mcmp+0x28>

080050e8 <__mdiff>:
 80050e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ec:	460c      	mov	r4, r1
 80050ee:	4606      	mov	r6, r0
 80050f0:	4611      	mov	r1, r2
 80050f2:	4620      	mov	r0, r4
 80050f4:	4617      	mov	r7, r2
 80050f6:	f7ff ffdb 	bl	80050b0 <__mcmp>
 80050fa:	1e05      	subs	r5, r0, #0
 80050fc:	d110      	bne.n	8005120 <__mdiff+0x38>
 80050fe:	4629      	mov	r1, r5
 8005100:	4630      	mov	r0, r6
 8005102:	f7ff fd57 	bl	8004bb4 <_Balloc>
 8005106:	b930      	cbnz	r0, 8005116 <__mdiff+0x2e>
 8005108:	4b39      	ldr	r3, [pc, #228]	; (80051f0 <__mdiff+0x108>)
 800510a:	4602      	mov	r2, r0
 800510c:	f240 2132 	movw	r1, #562	; 0x232
 8005110:	4838      	ldr	r0, [pc, #224]	; (80051f4 <__mdiff+0x10c>)
 8005112:	f000 faf3 	bl	80056fc <__assert_func>
 8005116:	2301      	movs	r3, #1
 8005118:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800511c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005120:	bfa4      	itt	ge
 8005122:	463b      	movge	r3, r7
 8005124:	4627      	movge	r7, r4
 8005126:	4630      	mov	r0, r6
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	bfa6      	itte	ge
 800512c:	461c      	movge	r4, r3
 800512e:	2500      	movge	r5, #0
 8005130:	2501      	movlt	r5, #1
 8005132:	f7ff fd3f 	bl	8004bb4 <_Balloc>
 8005136:	b920      	cbnz	r0, 8005142 <__mdiff+0x5a>
 8005138:	4b2d      	ldr	r3, [pc, #180]	; (80051f0 <__mdiff+0x108>)
 800513a:	4602      	mov	r2, r0
 800513c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005140:	e7e6      	b.n	8005110 <__mdiff+0x28>
 8005142:	693e      	ldr	r6, [r7, #16]
 8005144:	60c5      	str	r5, [r0, #12]
 8005146:	6925      	ldr	r5, [r4, #16]
 8005148:	f107 0114 	add.w	r1, r7, #20
 800514c:	f104 0914 	add.w	r9, r4, #20
 8005150:	f100 0e14 	add.w	lr, r0, #20
 8005154:	f107 0210 	add.w	r2, r7, #16
 8005158:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800515c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005160:	46f2      	mov	sl, lr
 8005162:	2700      	movs	r7, #0
 8005164:	f859 3b04 	ldr.w	r3, [r9], #4
 8005168:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800516c:	fa1f f883 	uxth.w	r8, r3
 8005170:	fa17 f78b 	uxtah	r7, r7, fp
 8005174:	0c1b      	lsrs	r3, r3, #16
 8005176:	eba7 0808 	sub.w	r8, r7, r8
 800517a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800517e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005182:	fa1f f888 	uxth.w	r8, r8
 8005186:	141f      	asrs	r7, r3, #16
 8005188:	454d      	cmp	r5, r9
 800518a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800518e:	f84a 3b04 	str.w	r3, [sl], #4
 8005192:	d8e7      	bhi.n	8005164 <__mdiff+0x7c>
 8005194:	1b2b      	subs	r3, r5, r4
 8005196:	3b15      	subs	r3, #21
 8005198:	f023 0303 	bic.w	r3, r3, #3
 800519c:	3304      	adds	r3, #4
 800519e:	3415      	adds	r4, #21
 80051a0:	42a5      	cmp	r5, r4
 80051a2:	bf38      	it	cc
 80051a4:	2304      	movcc	r3, #4
 80051a6:	4419      	add	r1, r3
 80051a8:	4473      	add	r3, lr
 80051aa:	469e      	mov	lr, r3
 80051ac:	460d      	mov	r5, r1
 80051ae:	4565      	cmp	r5, ip
 80051b0:	d30e      	bcc.n	80051d0 <__mdiff+0xe8>
 80051b2:	f10c 0203 	add.w	r2, ip, #3
 80051b6:	1a52      	subs	r2, r2, r1
 80051b8:	f022 0203 	bic.w	r2, r2, #3
 80051bc:	3903      	subs	r1, #3
 80051be:	458c      	cmp	ip, r1
 80051c0:	bf38      	it	cc
 80051c2:	2200      	movcc	r2, #0
 80051c4:	441a      	add	r2, r3
 80051c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80051ca:	b17b      	cbz	r3, 80051ec <__mdiff+0x104>
 80051cc:	6106      	str	r6, [r0, #16]
 80051ce:	e7a5      	b.n	800511c <__mdiff+0x34>
 80051d0:	f855 8b04 	ldr.w	r8, [r5], #4
 80051d4:	fa17 f488 	uxtah	r4, r7, r8
 80051d8:	1422      	asrs	r2, r4, #16
 80051da:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80051de:	b2a4      	uxth	r4, r4
 80051e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80051e4:	f84e 4b04 	str.w	r4, [lr], #4
 80051e8:	1417      	asrs	r7, r2, #16
 80051ea:	e7e0      	b.n	80051ae <__mdiff+0xc6>
 80051ec:	3e01      	subs	r6, #1
 80051ee:	e7ea      	b.n	80051c6 <__mdiff+0xde>
 80051f0:	080063eb 	.word	0x080063eb
 80051f4:	080063fc 	.word	0x080063fc

080051f8 <__d2b>:
 80051f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80051fc:	4689      	mov	r9, r1
 80051fe:	2101      	movs	r1, #1
 8005200:	ec57 6b10 	vmov	r6, r7, d0
 8005204:	4690      	mov	r8, r2
 8005206:	f7ff fcd5 	bl	8004bb4 <_Balloc>
 800520a:	4604      	mov	r4, r0
 800520c:	b930      	cbnz	r0, 800521c <__d2b+0x24>
 800520e:	4602      	mov	r2, r0
 8005210:	4b25      	ldr	r3, [pc, #148]	; (80052a8 <__d2b+0xb0>)
 8005212:	4826      	ldr	r0, [pc, #152]	; (80052ac <__d2b+0xb4>)
 8005214:	f240 310a 	movw	r1, #778	; 0x30a
 8005218:	f000 fa70 	bl	80056fc <__assert_func>
 800521c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005220:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005224:	bb35      	cbnz	r5, 8005274 <__d2b+0x7c>
 8005226:	2e00      	cmp	r6, #0
 8005228:	9301      	str	r3, [sp, #4]
 800522a:	d028      	beq.n	800527e <__d2b+0x86>
 800522c:	4668      	mov	r0, sp
 800522e:	9600      	str	r6, [sp, #0]
 8005230:	f7ff fd8c 	bl	8004d4c <__lo0bits>
 8005234:	9900      	ldr	r1, [sp, #0]
 8005236:	b300      	cbz	r0, 800527a <__d2b+0x82>
 8005238:	9a01      	ldr	r2, [sp, #4]
 800523a:	f1c0 0320 	rsb	r3, r0, #32
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	430b      	orrs	r3, r1
 8005244:	40c2      	lsrs	r2, r0
 8005246:	6163      	str	r3, [r4, #20]
 8005248:	9201      	str	r2, [sp, #4]
 800524a:	9b01      	ldr	r3, [sp, #4]
 800524c:	61a3      	str	r3, [r4, #24]
 800524e:	2b00      	cmp	r3, #0
 8005250:	bf14      	ite	ne
 8005252:	2202      	movne	r2, #2
 8005254:	2201      	moveq	r2, #1
 8005256:	6122      	str	r2, [r4, #16]
 8005258:	b1d5      	cbz	r5, 8005290 <__d2b+0x98>
 800525a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800525e:	4405      	add	r5, r0
 8005260:	f8c9 5000 	str.w	r5, [r9]
 8005264:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005268:	f8c8 0000 	str.w	r0, [r8]
 800526c:	4620      	mov	r0, r4
 800526e:	b003      	add	sp, #12
 8005270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005278:	e7d5      	b.n	8005226 <__d2b+0x2e>
 800527a:	6161      	str	r1, [r4, #20]
 800527c:	e7e5      	b.n	800524a <__d2b+0x52>
 800527e:	a801      	add	r0, sp, #4
 8005280:	f7ff fd64 	bl	8004d4c <__lo0bits>
 8005284:	9b01      	ldr	r3, [sp, #4]
 8005286:	6163      	str	r3, [r4, #20]
 8005288:	2201      	movs	r2, #1
 800528a:	6122      	str	r2, [r4, #16]
 800528c:	3020      	adds	r0, #32
 800528e:	e7e3      	b.n	8005258 <__d2b+0x60>
 8005290:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005294:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005298:	f8c9 0000 	str.w	r0, [r9]
 800529c:	6918      	ldr	r0, [r3, #16]
 800529e:	f7ff fd35 	bl	8004d0c <__hi0bits>
 80052a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80052a6:	e7df      	b.n	8005268 <__d2b+0x70>
 80052a8:	080063eb 	.word	0x080063eb
 80052ac:	080063fc 	.word	0x080063fc

080052b0 <_calloc_r>:
 80052b0:	b513      	push	{r0, r1, r4, lr}
 80052b2:	434a      	muls	r2, r1
 80052b4:	4611      	mov	r1, r2
 80052b6:	9201      	str	r2, [sp, #4]
 80052b8:	f000 f85a 	bl	8005370 <_malloc_r>
 80052bc:	4604      	mov	r4, r0
 80052be:	b118      	cbz	r0, 80052c8 <_calloc_r+0x18>
 80052c0:	9a01      	ldr	r2, [sp, #4]
 80052c2:	2100      	movs	r1, #0
 80052c4:	f7fe f950 	bl	8003568 <memset>
 80052c8:	4620      	mov	r0, r4
 80052ca:	b002      	add	sp, #8
 80052cc:	bd10      	pop	{r4, pc}
	...

080052d0 <_free_r>:
 80052d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052d2:	2900      	cmp	r1, #0
 80052d4:	d048      	beq.n	8005368 <_free_r+0x98>
 80052d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052da:	9001      	str	r0, [sp, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f1a1 0404 	sub.w	r4, r1, #4
 80052e2:	bfb8      	it	lt
 80052e4:	18e4      	addlt	r4, r4, r3
 80052e6:	f000 fa65 	bl	80057b4 <__malloc_lock>
 80052ea:	4a20      	ldr	r2, [pc, #128]	; (800536c <_free_r+0x9c>)
 80052ec:	9801      	ldr	r0, [sp, #4]
 80052ee:	6813      	ldr	r3, [r2, #0]
 80052f0:	4615      	mov	r5, r2
 80052f2:	b933      	cbnz	r3, 8005302 <_free_r+0x32>
 80052f4:	6063      	str	r3, [r4, #4]
 80052f6:	6014      	str	r4, [r2, #0]
 80052f8:	b003      	add	sp, #12
 80052fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052fe:	f000 ba5f 	b.w	80057c0 <__malloc_unlock>
 8005302:	42a3      	cmp	r3, r4
 8005304:	d90b      	bls.n	800531e <_free_r+0x4e>
 8005306:	6821      	ldr	r1, [r4, #0]
 8005308:	1862      	adds	r2, r4, r1
 800530a:	4293      	cmp	r3, r2
 800530c:	bf04      	itt	eq
 800530e:	681a      	ldreq	r2, [r3, #0]
 8005310:	685b      	ldreq	r3, [r3, #4]
 8005312:	6063      	str	r3, [r4, #4]
 8005314:	bf04      	itt	eq
 8005316:	1852      	addeq	r2, r2, r1
 8005318:	6022      	streq	r2, [r4, #0]
 800531a:	602c      	str	r4, [r5, #0]
 800531c:	e7ec      	b.n	80052f8 <_free_r+0x28>
 800531e:	461a      	mov	r2, r3
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	b10b      	cbz	r3, 8005328 <_free_r+0x58>
 8005324:	42a3      	cmp	r3, r4
 8005326:	d9fa      	bls.n	800531e <_free_r+0x4e>
 8005328:	6811      	ldr	r1, [r2, #0]
 800532a:	1855      	adds	r5, r2, r1
 800532c:	42a5      	cmp	r5, r4
 800532e:	d10b      	bne.n	8005348 <_free_r+0x78>
 8005330:	6824      	ldr	r4, [r4, #0]
 8005332:	4421      	add	r1, r4
 8005334:	1854      	adds	r4, r2, r1
 8005336:	42a3      	cmp	r3, r4
 8005338:	6011      	str	r1, [r2, #0]
 800533a:	d1dd      	bne.n	80052f8 <_free_r+0x28>
 800533c:	681c      	ldr	r4, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	6053      	str	r3, [r2, #4]
 8005342:	4421      	add	r1, r4
 8005344:	6011      	str	r1, [r2, #0]
 8005346:	e7d7      	b.n	80052f8 <_free_r+0x28>
 8005348:	d902      	bls.n	8005350 <_free_r+0x80>
 800534a:	230c      	movs	r3, #12
 800534c:	6003      	str	r3, [r0, #0]
 800534e:	e7d3      	b.n	80052f8 <_free_r+0x28>
 8005350:	6825      	ldr	r5, [r4, #0]
 8005352:	1961      	adds	r1, r4, r5
 8005354:	428b      	cmp	r3, r1
 8005356:	bf04      	itt	eq
 8005358:	6819      	ldreq	r1, [r3, #0]
 800535a:	685b      	ldreq	r3, [r3, #4]
 800535c:	6063      	str	r3, [r4, #4]
 800535e:	bf04      	itt	eq
 8005360:	1949      	addeq	r1, r1, r5
 8005362:	6021      	streq	r1, [r4, #0]
 8005364:	6054      	str	r4, [r2, #4]
 8005366:	e7c7      	b.n	80052f8 <_free_r+0x28>
 8005368:	b003      	add	sp, #12
 800536a:	bd30      	pop	{r4, r5, pc}
 800536c:	200001fc 	.word	0x200001fc

08005370 <_malloc_r>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	1ccd      	adds	r5, r1, #3
 8005374:	f025 0503 	bic.w	r5, r5, #3
 8005378:	3508      	adds	r5, #8
 800537a:	2d0c      	cmp	r5, #12
 800537c:	bf38      	it	cc
 800537e:	250c      	movcc	r5, #12
 8005380:	2d00      	cmp	r5, #0
 8005382:	4606      	mov	r6, r0
 8005384:	db01      	blt.n	800538a <_malloc_r+0x1a>
 8005386:	42a9      	cmp	r1, r5
 8005388:	d903      	bls.n	8005392 <_malloc_r+0x22>
 800538a:	230c      	movs	r3, #12
 800538c:	6033      	str	r3, [r6, #0]
 800538e:	2000      	movs	r0, #0
 8005390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005392:	f000 fa0f 	bl	80057b4 <__malloc_lock>
 8005396:	4921      	ldr	r1, [pc, #132]	; (800541c <_malloc_r+0xac>)
 8005398:	680a      	ldr	r2, [r1, #0]
 800539a:	4614      	mov	r4, r2
 800539c:	b99c      	cbnz	r4, 80053c6 <_malloc_r+0x56>
 800539e:	4f20      	ldr	r7, [pc, #128]	; (8005420 <_malloc_r+0xb0>)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	b923      	cbnz	r3, 80053ae <_malloc_r+0x3e>
 80053a4:	4621      	mov	r1, r4
 80053a6:	4630      	mov	r0, r6
 80053a8:	f000 f998 	bl	80056dc <_sbrk_r>
 80053ac:	6038      	str	r0, [r7, #0]
 80053ae:	4629      	mov	r1, r5
 80053b0:	4630      	mov	r0, r6
 80053b2:	f000 f993 	bl	80056dc <_sbrk_r>
 80053b6:	1c43      	adds	r3, r0, #1
 80053b8:	d123      	bne.n	8005402 <_malloc_r+0x92>
 80053ba:	230c      	movs	r3, #12
 80053bc:	6033      	str	r3, [r6, #0]
 80053be:	4630      	mov	r0, r6
 80053c0:	f000 f9fe 	bl	80057c0 <__malloc_unlock>
 80053c4:	e7e3      	b.n	800538e <_malloc_r+0x1e>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	1b5b      	subs	r3, r3, r5
 80053ca:	d417      	bmi.n	80053fc <_malloc_r+0x8c>
 80053cc:	2b0b      	cmp	r3, #11
 80053ce:	d903      	bls.n	80053d8 <_malloc_r+0x68>
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	441c      	add	r4, r3
 80053d4:	6025      	str	r5, [r4, #0]
 80053d6:	e004      	b.n	80053e2 <_malloc_r+0x72>
 80053d8:	6863      	ldr	r3, [r4, #4]
 80053da:	42a2      	cmp	r2, r4
 80053dc:	bf0c      	ite	eq
 80053de:	600b      	streq	r3, [r1, #0]
 80053e0:	6053      	strne	r3, [r2, #4]
 80053e2:	4630      	mov	r0, r6
 80053e4:	f000 f9ec 	bl	80057c0 <__malloc_unlock>
 80053e8:	f104 000b 	add.w	r0, r4, #11
 80053ec:	1d23      	adds	r3, r4, #4
 80053ee:	f020 0007 	bic.w	r0, r0, #7
 80053f2:	1ac2      	subs	r2, r0, r3
 80053f4:	d0cc      	beq.n	8005390 <_malloc_r+0x20>
 80053f6:	1a1b      	subs	r3, r3, r0
 80053f8:	50a3      	str	r3, [r4, r2]
 80053fa:	e7c9      	b.n	8005390 <_malloc_r+0x20>
 80053fc:	4622      	mov	r2, r4
 80053fe:	6864      	ldr	r4, [r4, #4]
 8005400:	e7cc      	b.n	800539c <_malloc_r+0x2c>
 8005402:	1cc4      	adds	r4, r0, #3
 8005404:	f024 0403 	bic.w	r4, r4, #3
 8005408:	42a0      	cmp	r0, r4
 800540a:	d0e3      	beq.n	80053d4 <_malloc_r+0x64>
 800540c:	1a21      	subs	r1, r4, r0
 800540e:	4630      	mov	r0, r6
 8005410:	f000 f964 	bl	80056dc <_sbrk_r>
 8005414:	3001      	adds	r0, #1
 8005416:	d1dd      	bne.n	80053d4 <_malloc_r+0x64>
 8005418:	e7cf      	b.n	80053ba <_malloc_r+0x4a>
 800541a:	bf00      	nop
 800541c:	200001fc 	.word	0x200001fc
 8005420:	20000200 	.word	0x20000200

08005424 <__ssputs_r>:
 8005424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005428:	688e      	ldr	r6, [r1, #8]
 800542a:	429e      	cmp	r6, r3
 800542c:	4682      	mov	sl, r0
 800542e:	460c      	mov	r4, r1
 8005430:	4690      	mov	r8, r2
 8005432:	461f      	mov	r7, r3
 8005434:	d838      	bhi.n	80054a8 <__ssputs_r+0x84>
 8005436:	898a      	ldrh	r2, [r1, #12]
 8005438:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800543c:	d032      	beq.n	80054a4 <__ssputs_r+0x80>
 800543e:	6825      	ldr	r5, [r4, #0]
 8005440:	6909      	ldr	r1, [r1, #16]
 8005442:	eba5 0901 	sub.w	r9, r5, r1
 8005446:	6965      	ldr	r5, [r4, #20]
 8005448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800544c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005450:	3301      	adds	r3, #1
 8005452:	444b      	add	r3, r9
 8005454:	106d      	asrs	r5, r5, #1
 8005456:	429d      	cmp	r5, r3
 8005458:	bf38      	it	cc
 800545a:	461d      	movcc	r5, r3
 800545c:	0553      	lsls	r3, r2, #21
 800545e:	d531      	bpl.n	80054c4 <__ssputs_r+0xa0>
 8005460:	4629      	mov	r1, r5
 8005462:	f7ff ff85 	bl	8005370 <_malloc_r>
 8005466:	4606      	mov	r6, r0
 8005468:	b950      	cbnz	r0, 8005480 <__ssputs_r+0x5c>
 800546a:	230c      	movs	r3, #12
 800546c:	f8ca 3000 	str.w	r3, [sl]
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005476:	81a3      	strh	r3, [r4, #12]
 8005478:	f04f 30ff 	mov.w	r0, #4294967295
 800547c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005480:	6921      	ldr	r1, [r4, #16]
 8005482:	464a      	mov	r2, r9
 8005484:	f7ff fb88 	bl	8004b98 <memcpy>
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800548e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005492:	81a3      	strh	r3, [r4, #12]
 8005494:	6126      	str	r6, [r4, #16]
 8005496:	6165      	str	r5, [r4, #20]
 8005498:	444e      	add	r6, r9
 800549a:	eba5 0509 	sub.w	r5, r5, r9
 800549e:	6026      	str	r6, [r4, #0]
 80054a0:	60a5      	str	r5, [r4, #8]
 80054a2:	463e      	mov	r6, r7
 80054a4:	42be      	cmp	r6, r7
 80054a6:	d900      	bls.n	80054aa <__ssputs_r+0x86>
 80054a8:	463e      	mov	r6, r7
 80054aa:	4632      	mov	r2, r6
 80054ac:	6820      	ldr	r0, [r4, #0]
 80054ae:	4641      	mov	r1, r8
 80054b0:	f000 f966 	bl	8005780 <memmove>
 80054b4:	68a3      	ldr	r3, [r4, #8]
 80054b6:	6822      	ldr	r2, [r4, #0]
 80054b8:	1b9b      	subs	r3, r3, r6
 80054ba:	4432      	add	r2, r6
 80054bc:	60a3      	str	r3, [r4, #8]
 80054be:	6022      	str	r2, [r4, #0]
 80054c0:	2000      	movs	r0, #0
 80054c2:	e7db      	b.n	800547c <__ssputs_r+0x58>
 80054c4:	462a      	mov	r2, r5
 80054c6:	f000 f981 	bl	80057cc <_realloc_r>
 80054ca:	4606      	mov	r6, r0
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d1e1      	bne.n	8005494 <__ssputs_r+0x70>
 80054d0:	6921      	ldr	r1, [r4, #16]
 80054d2:	4650      	mov	r0, sl
 80054d4:	f7ff fefc 	bl	80052d0 <_free_r>
 80054d8:	e7c7      	b.n	800546a <__ssputs_r+0x46>
	...

080054dc <_svfiprintf_r>:
 80054dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e0:	4698      	mov	r8, r3
 80054e2:	898b      	ldrh	r3, [r1, #12]
 80054e4:	061b      	lsls	r3, r3, #24
 80054e6:	b09d      	sub	sp, #116	; 0x74
 80054e8:	4607      	mov	r7, r0
 80054ea:	460d      	mov	r5, r1
 80054ec:	4614      	mov	r4, r2
 80054ee:	d50e      	bpl.n	800550e <_svfiprintf_r+0x32>
 80054f0:	690b      	ldr	r3, [r1, #16]
 80054f2:	b963      	cbnz	r3, 800550e <_svfiprintf_r+0x32>
 80054f4:	2140      	movs	r1, #64	; 0x40
 80054f6:	f7ff ff3b 	bl	8005370 <_malloc_r>
 80054fa:	6028      	str	r0, [r5, #0]
 80054fc:	6128      	str	r0, [r5, #16]
 80054fe:	b920      	cbnz	r0, 800550a <_svfiprintf_r+0x2e>
 8005500:	230c      	movs	r3, #12
 8005502:	603b      	str	r3, [r7, #0]
 8005504:	f04f 30ff 	mov.w	r0, #4294967295
 8005508:	e0d1      	b.n	80056ae <_svfiprintf_r+0x1d2>
 800550a:	2340      	movs	r3, #64	; 0x40
 800550c:	616b      	str	r3, [r5, #20]
 800550e:	2300      	movs	r3, #0
 8005510:	9309      	str	r3, [sp, #36]	; 0x24
 8005512:	2320      	movs	r3, #32
 8005514:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005518:	f8cd 800c 	str.w	r8, [sp, #12]
 800551c:	2330      	movs	r3, #48	; 0x30
 800551e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80056c8 <_svfiprintf_r+0x1ec>
 8005522:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005526:	f04f 0901 	mov.w	r9, #1
 800552a:	4623      	mov	r3, r4
 800552c:	469a      	mov	sl, r3
 800552e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005532:	b10a      	cbz	r2, 8005538 <_svfiprintf_r+0x5c>
 8005534:	2a25      	cmp	r2, #37	; 0x25
 8005536:	d1f9      	bne.n	800552c <_svfiprintf_r+0x50>
 8005538:	ebba 0b04 	subs.w	fp, sl, r4
 800553c:	d00b      	beq.n	8005556 <_svfiprintf_r+0x7a>
 800553e:	465b      	mov	r3, fp
 8005540:	4622      	mov	r2, r4
 8005542:	4629      	mov	r1, r5
 8005544:	4638      	mov	r0, r7
 8005546:	f7ff ff6d 	bl	8005424 <__ssputs_r>
 800554a:	3001      	adds	r0, #1
 800554c:	f000 80aa 	beq.w	80056a4 <_svfiprintf_r+0x1c8>
 8005550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005552:	445a      	add	r2, fp
 8005554:	9209      	str	r2, [sp, #36]	; 0x24
 8005556:	f89a 3000 	ldrb.w	r3, [sl]
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 80a2 	beq.w	80056a4 <_svfiprintf_r+0x1c8>
 8005560:	2300      	movs	r3, #0
 8005562:	f04f 32ff 	mov.w	r2, #4294967295
 8005566:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800556a:	f10a 0a01 	add.w	sl, sl, #1
 800556e:	9304      	str	r3, [sp, #16]
 8005570:	9307      	str	r3, [sp, #28]
 8005572:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005576:	931a      	str	r3, [sp, #104]	; 0x68
 8005578:	4654      	mov	r4, sl
 800557a:	2205      	movs	r2, #5
 800557c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005580:	4851      	ldr	r0, [pc, #324]	; (80056c8 <_svfiprintf_r+0x1ec>)
 8005582:	f7fa fe35 	bl	80001f0 <memchr>
 8005586:	9a04      	ldr	r2, [sp, #16]
 8005588:	b9d8      	cbnz	r0, 80055c2 <_svfiprintf_r+0xe6>
 800558a:	06d0      	lsls	r0, r2, #27
 800558c:	bf44      	itt	mi
 800558e:	2320      	movmi	r3, #32
 8005590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005594:	0711      	lsls	r1, r2, #28
 8005596:	bf44      	itt	mi
 8005598:	232b      	movmi	r3, #43	; 0x2b
 800559a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800559e:	f89a 3000 	ldrb.w	r3, [sl]
 80055a2:	2b2a      	cmp	r3, #42	; 0x2a
 80055a4:	d015      	beq.n	80055d2 <_svfiprintf_r+0xf6>
 80055a6:	9a07      	ldr	r2, [sp, #28]
 80055a8:	4654      	mov	r4, sl
 80055aa:	2000      	movs	r0, #0
 80055ac:	f04f 0c0a 	mov.w	ip, #10
 80055b0:	4621      	mov	r1, r4
 80055b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055b6:	3b30      	subs	r3, #48	; 0x30
 80055b8:	2b09      	cmp	r3, #9
 80055ba:	d94e      	bls.n	800565a <_svfiprintf_r+0x17e>
 80055bc:	b1b0      	cbz	r0, 80055ec <_svfiprintf_r+0x110>
 80055be:	9207      	str	r2, [sp, #28]
 80055c0:	e014      	b.n	80055ec <_svfiprintf_r+0x110>
 80055c2:	eba0 0308 	sub.w	r3, r0, r8
 80055c6:	fa09 f303 	lsl.w	r3, r9, r3
 80055ca:	4313      	orrs	r3, r2
 80055cc:	9304      	str	r3, [sp, #16]
 80055ce:	46a2      	mov	sl, r4
 80055d0:	e7d2      	b.n	8005578 <_svfiprintf_r+0x9c>
 80055d2:	9b03      	ldr	r3, [sp, #12]
 80055d4:	1d19      	adds	r1, r3, #4
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	9103      	str	r1, [sp, #12]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	bfbb      	ittet	lt
 80055de:	425b      	neglt	r3, r3
 80055e0:	f042 0202 	orrlt.w	r2, r2, #2
 80055e4:	9307      	strge	r3, [sp, #28]
 80055e6:	9307      	strlt	r3, [sp, #28]
 80055e8:	bfb8      	it	lt
 80055ea:	9204      	strlt	r2, [sp, #16]
 80055ec:	7823      	ldrb	r3, [r4, #0]
 80055ee:	2b2e      	cmp	r3, #46	; 0x2e
 80055f0:	d10c      	bne.n	800560c <_svfiprintf_r+0x130>
 80055f2:	7863      	ldrb	r3, [r4, #1]
 80055f4:	2b2a      	cmp	r3, #42	; 0x2a
 80055f6:	d135      	bne.n	8005664 <_svfiprintf_r+0x188>
 80055f8:	9b03      	ldr	r3, [sp, #12]
 80055fa:	1d1a      	adds	r2, r3, #4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	9203      	str	r2, [sp, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	bfb8      	it	lt
 8005604:	f04f 33ff 	movlt.w	r3, #4294967295
 8005608:	3402      	adds	r4, #2
 800560a:	9305      	str	r3, [sp, #20]
 800560c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80056d8 <_svfiprintf_r+0x1fc>
 8005610:	7821      	ldrb	r1, [r4, #0]
 8005612:	2203      	movs	r2, #3
 8005614:	4650      	mov	r0, sl
 8005616:	f7fa fdeb 	bl	80001f0 <memchr>
 800561a:	b140      	cbz	r0, 800562e <_svfiprintf_r+0x152>
 800561c:	2340      	movs	r3, #64	; 0x40
 800561e:	eba0 000a 	sub.w	r0, r0, sl
 8005622:	fa03 f000 	lsl.w	r0, r3, r0
 8005626:	9b04      	ldr	r3, [sp, #16]
 8005628:	4303      	orrs	r3, r0
 800562a:	3401      	adds	r4, #1
 800562c:	9304      	str	r3, [sp, #16]
 800562e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005632:	4826      	ldr	r0, [pc, #152]	; (80056cc <_svfiprintf_r+0x1f0>)
 8005634:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005638:	2206      	movs	r2, #6
 800563a:	f7fa fdd9 	bl	80001f0 <memchr>
 800563e:	2800      	cmp	r0, #0
 8005640:	d038      	beq.n	80056b4 <_svfiprintf_r+0x1d8>
 8005642:	4b23      	ldr	r3, [pc, #140]	; (80056d0 <_svfiprintf_r+0x1f4>)
 8005644:	bb1b      	cbnz	r3, 800568e <_svfiprintf_r+0x1b2>
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	3307      	adds	r3, #7
 800564a:	f023 0307 	bic.w	r3, r3, #7
 800564e:	3308      	adds	r3, #8
 8005650:	9303      	str	r3, [sp, #12]
 8005652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005654:	4433      	add	r3, r6
 8005656:	9309      	str	r3, [sp, #36]	; 0x24
 8005658:	e767      	b.n	800552a <_svfiprintf_r+0x4e>
 800565a:	fb0c 3202 	mla	r2, ip, r2, r3
 800565e:	460c      	mov	r4, r1
 8005660:	2001      	movs	r0, #1
 8005662:	e7a5      	b.n	80055b0 <_svfiprintf_r+0xd4>
 8005664:	2300      	movs	r3, #0
 8005666:	3401      	adds	r4, #1
 8005668:	9305      	str	r3, [sp, #20]
 800566a:	4619      	mov	r1, r3
 800566c:	f04f 0c0a 	mov.w	ip, #10
 8005670:	4620      	mov	r0, r4
 8005672:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005676:	3a30      	subs	r2, #48	; 0x30
 8005678:	2a09      	cmp	r2, #9
 800567a:	d903      	bls.n	8005684 <_svfiprintf_r+0x1a8>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0c5      	beq.n	800560c <_svfiprintf_r+0x130>
 8005680:	9105      	str	r1, [sp, #20]
 8005682:	e7c3      	b.n	800560c <_svfiprintf_r+0x130>
 8005684:	fb0c 2101 	mla	r1, ip, r1, r2
 8005688:	4604      	mov	r4, r0
 800568a:	2301      	movs	r3, #1
 800568c:	e7f0      	b.n	8005670 <_svfiprintf_r+0x194>
 800568e:	ab03      	add	r3, sp, #12
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	462a      	mov	r2, r5
 8005694:	4b0f      	ldr	r3, [pc, #60]	; (80056d4 <_svfiprintf_r+0x1f8>)
 8005696:	a904      	add	r1, sp, #16
 8005698:	4638      	mov	r0, r7
 800569a:	f7fe f80d 	bl	80036b8 <_printf_float>
 800569e:	1c42      	adds	r2, r0, #1
 80056a0:	4606      	mov	r6, r0
 80056a2:	d1d6      	bne.n	8005652 <_svfiprintf_r+0x176>
 80056a4:	89ab      	ldrh	r3, [r5, #12]
 80056a6:	065b      	lsls	r3, r3, #25
 80056a8:	f53f af2c 	bmi.w	8005504 <_svfiprintf_r+0x28>
 80056ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056ae:	b01d      	add	sp, #116	; 0x74
 80056b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b4:	ab03      	add	r3, sp, #12
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	462a      	mov	r2, r5
 80056ba:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <_svfiprintf_r+0x1f8>)
 80056bc:	a904      	add	r1, sp, #16
 80056be:	4638      	mov	r0, r7
 80056c0:	f7fe fa9e 	bl	8003c00 <_printf_i>
 80056c4:	e7eb      	b.n	800569e <_svfiprintf_r+0x1c2>
 80056c6:	bf00      	nop
 80056c8:	0800655c 	.word	0x0800655c
 80056cc:	08006566 	.word	0x08006566
 80056d0:	080036b9 	.word	0x080036b9
 80056d4:	08005425 	.word	0x08005425
 80056d8:	08006562 	.word	0x08006562

080056dc <_sbrk_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4d06      	ldr	r5, [pc, #24]	; (80056f8 <_sbrk_r+0x1c>)
 80056e0:	2300      	movs	r3, #0
 80056e2:	4604      	mov	r4, r0
 80056e4:	4608      	mov	r0, r1
 80056e6:	602b      	str	r3, [r5, #0]
 80056e8:	f7fd fe9e 	bl	8003428 <_sbrk>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d102      	bne.n	80056f6 <_sbrk_r+0x1a>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	b103      	cbz	r3, 80056f6 <_sbrk_r+0x1a>
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	2000029c 	.word	0x2000029c

080056fc <__assert_func>:
 80056fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056fe:	4614      	mov	r4, r2
 8005700:	461a      	mov	r2, r3
 8005702:	4b09      	ldr	r3, [pc, #36]	; (8005728 <__assert_func+0x2c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4605      	mov	r5, r0
 8005708:	68d8      	ldr	r0, [r3, #12]
 800570a:	b14c      	cbz	r4, 8005720 <__assert_func+0x24>
 800570c:	4b07      	ldr	r3, [pc, #28]	; (800572c <__assert_func+0x30>)
 800570e:	9100      	str	r1, [sp, #0]
 8005710:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005714:	4906      	ldr	r1, [pc, #24]	; (8005730 <__assert_func+0x34>)
 8005716:	462b      	mov	r3, r5
 8005718:	f000 f80e 	bl	8005738 <fiprintf>
 800571c:	f000 faa4 	bl	8005c68 <abort>
 8005720:	4b04      	ldr	r3, [pc, #16]	; (8005734 <__assert_func+0x38>)
 8005722:	461c      	mov	r4, r3
 8005724:	e7f3      	b.n	800570e <__assert_func+0x12>
 8005726:	bf00      	nop
 8005728:	2000000c 	.word	0x2000000c
 800572c:	0800656d 	.word	0x0800656d
 8005730:	0800657a 	.word	0x0800657a
 8005734:	08006314 	.word	0x08006314

08005738 <fiprintf>:
 8005738:	b40e      	push	{r1, r2, r3}
 800573a:	b503      	push	{r0, r1, lr}
 800573c:	4601      	mov	r1, r0
 800573e:	ab03      	add	r3, sp, #12
 8005740:	4805      	ldr	r0, [pc, #20]	; (8005758 <fiprintf+0x20>)
 8005742:	f853 2b04 	ldr.w	r2, [r3], #4
 8005746:	6800      	ldr	r0, [r0, #0]
 8005748:	9301      	str	r3, [sp, #4]
 800574a:	f000 f88f 	bl	800586c <_vfiprintf_r>
 800574e:	b002      	add	sp, #8
 8005750:	f85d eb04 	ldr.w	lr, [sp], #4
 8005754:	b003      	add	sp, #12
 8005756:	4770      	bx	lr
 8005758:	2000000c 	.word	0x2000000c

0800575c <__ascii_mbtowc>:
 800575c:	b082      	sub	sp, #8
 800575e:	b901      	cbnz	r1, 8005762 <__ascii_mbtowc+0x6>
 8005760:	a901      	add	r1, sp, #4
 8005762:	b142      	cbz	r2, 8005776 <__ascii_mbtowc+0x1a>
 8005764:	b14b      	cbz	r3, 800577a <__ascii_mbtowc+0x1e>
 8005766:	7813      	ldrb	r3, [r2, #0]
 8005768:	600b      	str	r3, [r1, #0]
 800576a:	7812      	ldrb	r2, [r2, #0]
 800576c:	1e10      	subs	r0, r2, #0
 800576e:	bf18      	it	ne
 8005770:	2001      	movne	r0, #1
 8005772:	b002      	add	sp, #8
 8005774:	4770      	bx	lr
 8005776:	4610      	mov	r0, r2
 8005778:	e7fb      	b.n	8005772 <__ascii_mbtowc+0x16>
 800577a:	f06f 0001 	mvn.w	r0, #1
 800577e:	e7f8      	b.n	8005772 <__ascii_mbtowc+0x16>

08005780 <memmove>:
 8005780:	4288      	cmp	r0, r1
 8005782:	b510      	push	{r4, lr}
 8005784:	eb01 0402 	add.w	r4, r1, r2
 8005788:	d902      	bls.n	8005790 <memmove+0x10>
 800578a:	4284      	cmp	r4, r0
 800578c:	4623      	mov	r3, r4
 800578e:	d807      	bhi.n	80057a0 <memmove+0x20>
 8005790:	1e43      	subs	r3, r0, #1
 8005792:	42a1      	cmp	r1, r4
 8005794:	d008      	beq.n	80057a8 <memmove+0x28>
 8005796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800579a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800579e:	e7f8      	b.n	8005792 <memmove+0x12>
 80057a0:	4402      	add	r2, r0
 80057a2:	4601      	mov	r1, r0
 80057a4:	428a      	cmp	r2, r1
 80057a6:	d100      	bne.n	80057aa <memmove+0x2a>
 80057a8:	bd10      	pop	{r4, pc}
 80057aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057b2:	e7f7      	b.n	80057a4 <memmove+0x24>

080057b4 <__malloc_lock>:
 80057b4:	4801      	ldr	r0, [pc, #4]	; (80057bc <__malloc_lock+0x8>)
 80057b6:	f000 bc17 	b.w	8005fe8 <__retarget_lock_acquire_recursive>
 80057ba:	bf00      	nop
 80057bc:	200002a4 	.word	0x200002a4

080057c0 <__malloc_unlock>:
 80057c0:	4801      	ldr	r0, [pc, #4]	; (80057c8 <__malloc_unlock+0x8>)
 80057c2:	f000 bc12 	b.w	8005fea <__retarget_lock_release_recursive>
 80057c6:	bf00      	nop
 80057c8:	200002a4 	.word	0x200002a4

080057cc <_realloc_r>:
 80057cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ce:	4607      	mov	r7, r0
 80057d0:	4614      	mov	r4, r2
 80057d2:	460e      	mov	r6, r1
 80057d4:	b921      	cbnz	r1, 80057e0 <_realloc_r+0x14>
 80057d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057da:	4611      	mov	r1, r2
 80057dc:	f7ff bdc8 	b.w	8005370 <_malloc_r>
 80057e0:	b922      	cbnz	r2, 80057ec <_realloc_r+0x20>
 80057e2:	f7ff fd75 	bl	80052d0 <_free_r>
 80057e6:	4625      	mov	r5, r4
 80057e8:	4628      	mov	r0, r5
 80057ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ec:	f000 fc62 	bl	80060b4 <_malloc_usable_size_r>
 80057f0:	42a0      	cmp	r0, r4
 80057f2:	d20f      	bcs.n	8005814 <_realloc_r+0x48>
 80057f4:	4621      	mov	r1, r4
 80057f6:	4638      	mov	r0, r7
 80057f8:	f7ff fdba 	bl	8005370 <_malloc_r>
 80057fc:	4605      	mov	r5, r0
 80057fe:	2800      	cmp	r0, #0
 8005800:	d0f2      	beq.n	80057e8 <_realloc_r+0x1c>
 8005802:	4631      	mov	r1, r6
 8005804:	4622      	mov	r2, r4
 8005806:	f7ff f9c7 	bl	8004b98 <memcpy>
 800580a:	4631      	mov	r1, r6
 800580c:	4638      	mov	r0, r7
 800580e:	f7ff fd5f 	bl	80052d0 <_free_r>
 8005812:	e7e9      	b.n	80057e8 <_realloc_r+0x1c>
 8005814:	4635      	mov	r5, r6
 8005816:	e7e7      	b.n	80057e8 <_realloc_r+0x1c>

08005818 <__sfputc_r>:
 8005818:	6893      	ldr	r3, [r2, #8]
 800581a:	3b01      	subs	r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	b410      	push	{r4}
 8005820:	6093      	str	r3, [r2, #8]
 8005822:	da08      	bge.n	8005836 <__sfputc_r+0x1e>
 8005824:	6994      	ldr	r4, [r2, #24]
 8005826:	42a3      	cmp	r3, r4
 8005828:	db01      	blt.n	800582e <__sfputc_r+0x16>
 800582a:	290a      	cmp	r1, #10
 800582c:	d103      	bne.n	8005836 <__sfputc_r+0x1e>
 800582e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005832:	f000 b94b 	b.w	8005acc <__swbuf_r>
 8005836:	6813      	ldr	r3, [r2, #0]
 8005838:	1c58      	adds	r0, r3, #1
 800583a:	6010      	str	r0, [r2, #0]
 800583c:	7019      	strb	r1, [r3, #0]
 800583e:	4608      	mov	r0, r1
 8005840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005844:	4770      	bx	lr

08005846 <__sfputs_r>:
 8005846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005848:	4606      	mov	r6, r0
 800584a:	460f      	mov	r7, r1
 800584c:	4614      	mov	r4, r2
 800584e:	18d5      	adds	r5, r2, r3
 8005850:	42ac      	cmp	r4, r5
 8005852:	d101      	bne.n	8005858 <__sfputs_r+0x12>
 8005854:	2000      	movs	r0, #0
 8005856:	e007      	b.n	8005868 <__sfputs_r+0x22>
 8005858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800585c:	463a      	mov	r2, r7
 800585e:	4630      	mov	r0, r6
 8005860:	f7ff ffda 	bl	8005818 <__sfputc_r>
 8005864:	1c43      	adds	r3, r0, #1
 8005866:	d1f3      	bne.n	8005850 <__sfputs_r+0xa>
 8005868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800586c <_vfiprintf_r>:
 800586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005870:	460d      	mov	r5, r1
 8005872:	b09d      	sub	sp, #116	; 0x74
 8005874:	4614      	mov	r4, r2
 8005876:	4698      	mov	r8, r3
 8005878:	4606      	mov	r6, r0
 800587a:	b118      	cbz	r0, 8005884 <_vfiprintf_r+0x18>
 800587c:	6983      	ldr	r3, [r0, #24]
 800587e:	b90b      	cbnz	r3, 8005884 <_vfiprintf_r+0x18>
 8005880:	f000 fb14 	bl	8005eac <__sinit>
 8005884:	4b89      	ldr	r3, [pc, #548]	; (8005aac <_vfiprintf_r+0x240>)
 8005886:	429d      	cmp	r5, r3
 8005888:	d11b      	bne.n	80058c2 <_vfiprintf_r+0x56>
 800588a:	6875      	ldr	r5, [r6, #4]
 800588c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800588e:	07d9      	lsls	r1, r3, #31
 8005890:	d405      	bmi.n	800589e <_vfiprintf_r+0x32>
 8005892:	89ab      	ldrh	r3, [r5, #12]
 8005894:	059a      	lsls	r2, r3, #22
 8005896:	d402      	bmi.n	800589e <_vfiprintf_r+0x32>
 8005898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800589a:	f000 fba5 	bl	8005fe8 <__retarget_lock_acquire_recursive>
 800589e:	89ab      	ldrh	r3, [r5, #12]
 80058a0:	071b      	lsls	r3, r3, #28
 80058a2:	d501      	bpl.n	80058a8 <_vfiprintf_r+0x3c>
 80058a4:	692b      	ldr	r3, [r5, #16]
 80058a6:	b9eb      	cbnz	r3, 80058e4 <_vfiprintf_r+0x78>
 80058a8:	4629      	mov	r1, r5
 80058aa:	4630      	mov	r0, r6
 80058ac:	f000 f96e 	bl	8005b8c <__swsetup_r>
 80058b0:	b1c0      	cbz	r0, 80058e4 <_vfiprintf_r+0x78>
 80058b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058b4:	07dc      	lsls	r4, r3, #31
 80058b6:	d50e      	bpl.n	80058d6 <_vfiprintf_r+0x6a>
 80058b8:	f04f 30ff 	mov.w	r0, #4294967295
 80058bc:	b01d      	add	sp, #116	; 0x74
 80058be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c2:	4b7b      	ldr	r3, [pc, #492]	; (8005ab0 <_vfiprintf_r+0x244>)
 80058c4:	429d      	cmp	r5, r3
 80058c6:	d101      	bne.n	80058cc <_vfiprintf_r+0x60>
 80058c8:	68b5      	ldr	r5, [r6, #8]
 80058ca:	e7df      	b.n	800588c <_vfiprintf_r+0x20>
 80058cc:	4b79      	ldr	r3, [pc, #484]	; (8005ab4 <_vfiprintf_r+0x248>)
 80058ce:	429d      	cmp	r5, r3
 80058d0:	bf08      	it	eq
 80058d2:	68f5      	ldreq	r5, [r6, #12]
 80058d4:	e7da      	b.n	800588c <_vfiprintf_r+0x20>
 80058d6:	89ab      	ldrh	r3, [r5, #12]
 80058d8:	0598      	lsls	r0, r3, #22
 80058da:	d4ed      	bmi.n	80058b8 <_vfiprintf_r+0x4c>
 80058dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058de:	f000 fb84 	bl	8005fea <__retarget_lock_release_recursive>
 80058e2:	e7e9      	b.n	80058b8 <_vfiprintf_r+0x4c>
 80058e4:	2300      	movs	r3, #0
 80058e6:	9309      	str	r3, [sp, #36]	; 0x24
 80058e8:	2320      	movs	r3, #32
 80058ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80058f2:	2330      	movs	r3, #48	; 0x30
 80058f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005ab8 <_vfiprintf_r+0x24c>
 80058f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058fc:	f04f 0901 	mov.w	r9, #1
 8005900:	4623      	mov	r3, r4
 8005902:	469a      	mov	sl, r3
 8005904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005908:	b10a      	cbz	r2, 800590e <_vfiprintf_r+0xa2>
 800590a:	2a25      	cmp	r2, #37	; 0x25
 800590c:	d1f9      	bne.n	8005902 <_vfiprintf_r+0x96>
 800590e:	ebba 0b04 	subs.w	fp, sl, r4
 8005912:	d00b      	beq.n	800592c <_vfiprintf_r+0xc0>
 8005914:	465b      	mov	r3, fp
 8005916:	4622      	mov	r2, r4
 8005918:	4629      	mov	r1, r5
 800591a:	4630      	mov	r0, r6
 800591c:	f7ff ff93 	bl	8005846 <__sfputs_r>
 8005920:	3001      	adds	r0, #1
 8005922:	f000 80aa 	beq.w	8005a7a <_vfiprintf_r+0x20e>
 8005926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005928:	445a      	add	r2, fp
 800592a:	9209      	str	r2, [sp, #36]	; 0x24
 800592c:	f89a 3000 	ldrb.w	r3, [sl]
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80a2 	beq.w	8005a7a <_vfiprintf_r+0x20e>
 8005936:	2300      	movs	r3, #0
 8005938:	f04f 32ff 	mov.w	r2, #4294967295
 800593c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005940:	f10a 0a01 	add.w	sl, sl, #1
 8005944:	9304      	str	r3, [sp, #16]
 8005946:	9307      	str	r3, [sp, #28]
 8005948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800594c:	931a      	str	r3, [sp, #104]	; 0x68
 800594e:	4654      	mov	r4, sl
 8005950:	2205      	movs	r2, #5
 8005952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005956:	4858      	ldr	r0, [pc, #352]	; (8005ab8 <_vfiprintf_r+0x24c>)
 8005958:	f7fa fc4a 	bl	80001f0 <memchr>
 800595c:	9a04      	ldr	r2, [sp, #16]
 800595e:	b9d8      	cbnz	r0, 8005998 <_vfiprintf_r+0x12c>
 8005960:	06d1      	lsls	r1, r2, #27
 8005962:	bf44      	itt	mi
 8005964:	2320      	movmi	r3, #32
 8005966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800596a:	0713      	lsls	r3, r2, #28
 800596c:	bf44      	itt	mi
 800596e:	232b      	movmi	r3, #43	; 0x2b
 8005970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005974:	f89a 3000 	ldrb.w	r3, [sl]
 8005978:	2b2a      	cmp	r3, #42	; 0x2a
 800597a:	d015      	beq.n	80059a8 <_vfiprintf_r+0x13c>
 800597c:	9a07      	ldr	r2, [sp, #28]
 800597e:	4654      	mov	r4, sl
 8005980:	2000      	movs	r0, #0
 8005982:	f04f 0c0a 	mov.w	ip, #10
 8005986:	4621      	mov	r1, r4
 8005988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800598c:	3b30      	subs	r3, #48	; 0x30
 800598e:	2b09      	cmp	r3, #9
 8005990:	d94e      	bls.n	8005a30 <_vfiprintf_r+0x1c4>
 8005992:	b1b0      	cbz	r0, 80059c2 <_vfiprintf_r+0x156>
 8005994:	9207      	str	r2, [sp, #28]
 8005996:	e014      	b.n	80059c2 <_vfiprintf_r+0x156>
 8005998:	eba0 0308 	sub.w	r3, r0, r8
 800599c:	fa09 f303 	lsl.w	r3, r9, r3
 80059a0:	4313      	orrs	r3, r2
 80059a2:	9304      	str	r3, [sp, #16]
 80059a4:	46a2      	mov	sl, r4
 80059a6:	e7d2      	b.n	800594e <_vfiprintf_r+0xe2>
 80059a8:	9b03      	ldr	r3, [sp, #12]
 80059aa:	1d19      	adds	r1, r3, #4
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	9103      	str	r1, [sp, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	bfbb      	ittet	lt
 80059b4:	425b      	neglt	r3, r3
 80059b6:	f042 0202 	orrlt.w	r2, r2, #2
 80059ba:	9307      	strge	r3, [sp, #28]
 80059bc:	9307      	strlt	r3, [sp, #28]
 80059be:	bfb8      	it	lt
 80059c0:	9204      	strlt	r2, [sp, #16]
 80059c2:	7823      	ldrb	r3, [r4, #0]
 80059c4:	2b2e      	cmp	r3, #46	; 0x2e
 80059c6:	d10c      	bne.n	80059e2 <_vfiprintf_r+0x176>
 80059c8:	7863      	ldrb	r3, [r4, #1]
 80059ca:	2b2a      	cmp	r3, #42	; 0x2a
 80059cc:	d135      	bne.n	8005a3a <_vfiprintf_r+0x1ce>
 80059ce:	9b03      	ldr	r3, [sp, #12]
 80059d0:	1d1a      	adds	r2, r3, #4
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	9203      	str	r2, [sp, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	bfb8      	it	lt
 80059da:	f04f 33ff 	movlt.w	r3, #4294967295
 80059de:	3402      	adds	r4, #2
 80059e0:	9305      	str	r3, [sp, #20]
 80059e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005ac8 <_vfiprintf_r+0x25c>
 80059e6:	7821      	ldrb	r1, [r4, #0]
 80059e8:	2203      	movs	r2, #3
 80059ea:	4650      	mov	r0, sl
 80059ec:	f7fa fc00 	bl	80001f0 <memchr>
 80059f0:	b140      	cbz	r0, 8005a04 <_vfiprintf_r+0x198>
 80059f2:	2340      	movs	r3, #64	; 0x40
 80059f4:	eba0 000a 	sub.w	r0, r0, sl
 80059f8:	fa03 f000 	lsl.w	r0, r3, r0
 80059fc:	9b04      	ldr	r3, [sp, #16]
 80059fe:	4303      	orrs	r3, r0
 8005a00:	3401      	adds	r4, #1
 8005a02:	9304      	str	r3, [sp, #16]
 8005a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a08:	482c      	ldr	r0, [pc, #176]	; (8005abc <_vfiprintf_r+0x250>)
 8005a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a0e:	2206      	movs	r2, #6
 8005a10:	f7fa fbee 	bl	80001f0 <memchr>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d03f      	beq.n	8005a98 <_vfiprintf_r+0x22c>
 8005a18:	4b29      	ldr	r3, [pc, #164]	; (8005ac0 <_vfiprintf_r+0x254>)
 8005a1a:	bb1b      	cbnz	r3, 8005a64 <_vfiprintf_r+0x1f8>
 8005a1c:	9b03      	ldr	r3, [sp, #12]
 8005a1e:	3307      	adds	r3, #7
 8005a20:	f023 0307 	bic.w	r3, r3, #7
 8005a24:	3308      	adds	r3, #8
 8005a26:	9303      	str	r3, [sp, #12]
 8005a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2a:	443b      	add	r3, r7
 8005a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a2e:	e767      	b.n	8005900 <_vfiprintf_r+0x94>
 8005a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a34:	460c      	mov	r4, r1
 8005a36:	2001      	movs	r0, #1
 8005a38:	e7a5      	b.n	8005986 <_vfiprintf_r+0x11a>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	3401      	adds	r4, #1
 8005a3e:	9305      	str	r3, [sp, #20]
 8005a40:	4619      	mov	r1, r3
 8005a42:	f04f 0c0a 	mov.w	ip, #10
 8005a46:	4620      	mov	r0, r4
 8005a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a4c:	3a30      	subs	r2, #48	; 0x30
 8005a4e:	2a09      	cmp	r2, #9
 8005a50:	d903      	bls.n	8005a5a <_vfiprintf_r+0x1ee>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0c5      	beq.n	80059e2 <_vfiprintf_r+0x176>
 8005a56:	9105      	str	r1, [sp, #20]
 8005a58:	e7c3      	b.n	80059e2 <_vfiprintf_r+0x176>
 8005a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a5e:	4604      	mov	r4, r0
 8005a60:	2301      	movs	r3, #1
 8005a62:	e7f0      	b.n	8005a46 <_vfiprintf_r+0x1da>
 8005a64:	ab03      	add	r3, sp, #12
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	462a      	mov	r2, r5
 8005a6a:	4b16      	ldr	r3, [pc, #88]	; (8005ac4 <_vfiprintf_r+0x258>)
 8005a6c:	a904      	add	r1, sp, #16
 8005a6e:	4630      	mov	r0, r6
 8005a70:	f7fd fe22 	bl	80036b8 <_printf_float>
 8005a74:	4607      	mov	r7, r0
 8005a76:	1c78      	adds	r0, r7, #1
 8005a78:	d1d6      	bne.n	8005a28 <_vfiprintf_r+0x1bc>
 8005a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a7c:	07d9      	lsls	r1, r3, #31
 8005a7e:	d405      	bmi.n	8005a8c <_vfiprintf_r+0x220>
 8005a80:	89ab      	ldrh	r3, [r5, #12]
 8005a82:	059a      	lsls	r2, r3, #22
 8005a84:	d402      	bmi.n	8005a8c <_vfiprintf_r+0x220>
 8005a86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a88:	f000 faaf 	bl	8005fea <__retarget_lock_release_recursive>
 8005a8c:	89ab      	ldrh	r3, [r5, #12]
 8005a8e:	065b      	lsls	r3, r3, #25
 8005a90:	f53f af12 	bmi.w	80058b8 <_vfiprintf_r+0x4c>
 8005a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a96:	e711      	b.n	80058bc <_vfiprintf_r+0x50>
 8005a98:	ab03      	add	r3, sp, #12
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	462a      	mov	r2, r5
 8005a9e:	4b09      	ldr	r3, [pc, #36]	; (8005ac4 <_vfiprintf_r+0x258>)
 8005aa0:	a904      	add	r1, sp, #16
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	f7fe f8ac 	bl	8003c00 <_printf_i>
 8005aa8:	e7e4      	b.n	8005a74 <_vfiprintf_r+0x208>
 8005aaa:	bf00      	nop
 8005aac:	080066d4 	.word	0x080066d4
 8005ab0:	080066f4 	.word	0x080066f4
 8005ab4:	080066b4 	.word	0x080066b4
 8005ab8:	0800655c 	.word	0x0800655c
 8005abc:	08006566 	.word	0x08006566
 8005ac0:	080036b9 	.word	0x080036b9
 8005ac4:	08005847 	.word	0x08005847
 8005ac8:	08006562 	.word	0x08006562

08005acc <__swbuf_r>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	460e      	mov	r6, r1
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	4605      	mov	r5, r0
 8005ad4:	b118      	cbz	r0, 8005ade <__swbuf_r+0x12>
 8005ad6:	6983      	ldr	r3, [r0, #24]
 8005ad8:	b90b      	cbnz	r3, 8005ade <__swbuf_r+0x12>
 8005ada:	f000 f9e7 	bl	8005eac <__sinit>
 8005ade:	4b21      	ldr	r3, [pc, #132]	; (8005b64 <__swbuf_r+0x98>)
 8005ae0:	429c      	cmp	r4, r3
 8005ae2:	d12b      	bne.n	8005b3c <__swbuf_r+0x70>
 8005ae4:	686c      	ldr	r4, [r5, #4]
 8005ae6:	69a3      	ldr	r3, [r4, #24]
 8005ae8:	60a3      	str	r3, [r4, #8]
 8005aea:	89a3      	ldrh	r3, [r4, #12]
 8005aec:	071a      	lsls	r2, r3, #28
 8005aee:	d52f      	bpl.n	8005b50 <__swbuf_r+0x84>
 8005af0:	6923      	ldr	r3, [r4, #16]
 8005af2:	b36b      	cbz	r3, 8005b50 <__swbuf_r+0x84>
 8005af4:	6923      	ldr	r3, [r4, #16]
 8005af6:	6820      	ldr	r0, [r4, #0]
 8005af8:	1ac0      	subs	r0, r0, r3
 8005afa:	6963      	ldr	r3, [r4, #20]
 8005afc:	b2f6      	uxtb	r6, r6
 8005afe:	4283      	cmp	r3, r0
 8005b00:	4637      	mov	r7, r6
 8005b02:	dc04      	bgt.n	8005b0e <__swbuf_r+0x42>
 8005b04:	4621      	mov	r1, r4
 8005b06:	4628      	mov	r0, r5
 8005b08:	f000 f93c 	bl	8005d84 <_fflush_r>
 8005b0c:	bb30      	cbnz	r0, 8005b5c <__swbuf_r+0x90>
 8005b0e:	68a3      	ldr	r3, [r4, #8]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	60a3      	str	r3, [r4, #8]
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	6022      	str	r2, [r4, #0]
 8005b1a:	701e      	strb	r6, [r3, #0]
 8005b1c:	6963      	ldr	r3, [r4, #20]
 8005b1e:	3001      	adds	r0, #1
 8005b20:	4283      	cmp	r3, r0
 8005b22:	d004      	beq.n	8005b2e <__swbuf_r+0x62>
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	07db      	lsls	r3, r3, #31
 8005b28:	d506      	bpl.n	8005b38 <__swbuf_r+0x6c>
 8005b2a:	2e0a      	cmp	r6, #10
 8005b2c:	d104      	bne.n	8005b38 <__swbuf_r+0x6c>
 8005b2e:	4621      	mov	r1, r4
 8005b30:	4628      	mov	r0, r5
 8005b32:	f000 f927 	bl	8005d84 <_fflush_r>
 8005b36:	b988      	cbnz	r0, 8005b5c <__swbuf_r+0x90>
 8005b38:	4638      	mov	r0, r7
 8005b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <__swbuf_r+0x9c>)
 8005b3e:	429c      	cmp	r4, r3
 8005b40:	d101      	bne.n	8005b46 <__swbuf_r+0x7a>
 8005b42:	68ac      	ldr	r4, [r5, #8]
 8005b44:	e7cf      	b.n	8005ae6 <__swbuf_r+0x1a>
 8005b46:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <__swbuf_r+0xa0>)
 8005b48:	429c      	cmp	r4, r3
 8005b4a:	bf08      	it	eq
 8005b4c:	68ec      	ldreq	r4, [r5, #12]
 8005b4e:	e7ca      	b.n	8005ae6 <__swbuf_r+0x1a>
 8005b50:	4621      	mov	r1, r4
 8005b52:	4628      	mov	r0, r5
 8005b54:	f000 f81a 	bl	8005b8c <__swsetup_r>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	d0cb      	beq.n	8005af4 <__swbuf_r+0x28>
 8005b5c:	f04f 37ff 	mov.w	r7, #4294967295
 8005b60:	e7ea      	b.n	8005b38 <__swbuf_r+0x6c>
 8005b62:	bf00      	nop
 8005b64:	080066d4 	.word	0x080066d4
 8005b68:	080066f4 	.word	0x080066f4
 8005b6c:	080066b4 	.word	0x080066b4

08005b70 <__ascii_wctomb>:
 8005b70:	b149      	cbz	r1, 8005b86 <__ascii_wctomb+0x16>
 8005b72:	2aff      	cmp	r2, #255	; 0xff
 8005b74:	bf85      	ittet	hi
 8005b76:	238a      	movhi	r3, #138	; 0x8a
 8005b78:	6003      	strhi	r3, [r0, #0]
 8005b7a:	700a      	strbls	r2, [r1, #0]
 8005b7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005b80:	bf98      	it	ls
 8005b82:	2001      	movls	r0, #1
 8005b84:	4770      	bx	lr
 8005b86:	4608      	mov	r0, r1
 8005b88:	4770      	bx	lr
	...

08005b8c <__swsetup_r>:
 8005b8c:	4b32      	ldr	r3, [pc, #200]	; (8005c58 <__swsetup_r+0xcc>)
 8005b8e:	b570      	push	{r4, r5, r6, lr}
 8005b90:	681d      	ldr	r5, [r3, #0]
 8005b92:	4606      	mov	r6, r0
 8005b94:	460c      	mov	r4, r1
 8005b96:	b125      	cbz	r5, 8005ba2 <__swsetup_r+0x16>
 8005b98:	69ab      	ldr	r3, [r5, #24]
 8005b9a:	b913      	cbnz	r3, 8005ba2 <__swsetup_r+0x16>
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	f000 f985 	bl	8005eac <__sinit>
 8005ba2:	4b2e      	ldr	r3, [pc, #184]	; (8005c5c <__swsetup_r+0xd0>)
 8005ba4:	429c      	cmp	r4, r3
 8005ba6:	d10f      	bne.n	8005bc8 <__swsetup_r+0x3c>
 8005ba8:	686c      	ldr	r4, [r5, #4]
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bb0:	0719      	lsls	r1, r3, #28
 8005bb2:	d42c      	bmi.n	8005c0e <__swsetup_r+0x82>
 8005bb4:	06dd      	lsls	r5, r3, #27
 8005bb6:	d411      	bmi.n	8005bdc <__swsetup_r+0x50>
 8005bb8:	2309      	movs	r3, #9
 8005bba:	6033      	str	r3, [r6, #0]
 8005bbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005bc0:	81a3      	strh	r3, [r4, #12]
 8005bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc6:	e03e      	b.n	8005c46 <__swsetup_r+0xba>
 8005bc8:	4b25      	ldr	r3, [pc, #148]	; (8005c60 <__swsetup_r+0xd4>)
 8005bca:	429c      	cmp	r4, r3
 8005bcc:	d101      	bne.n	8005bd2 <__swsetup_r+0x46>
 8005bce:	68ac      	ldr	r4, [r5, #8]
 8005bd0:	e7eb      	b.n	8005baa <__swsetup_r+0x1e>
 8005bd2:	4b24      	ldr	r3, [pc, #144]	; (8005c64 <__swsetup_r+0xd8>)
 8005bd4:	429c      	cmp	r4, r3
 8005bd6:	bf08      	it	eq
 8005bd8:	68ec      	ldreq	r4, [r5, #12]
 8005bda:	e7e6      	b.n	8005baa <__swsetup_r+0x1e>
 8005bdc:	0758      	lsls	r0, r3, #29
 8005bde:	d512      	bpl.n	8005c06 <__swsetup_r+0x7a>
 8005be0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005be2:	b141      	cbz	r1, 8005bf6 <__swsetup_r+0x6a>
 8005be4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005be8:	4299      	cmp	r1, r3
 8005bea:	d002      	beq.n	8005bf2 <__swsetup_r+0x66>
 8005bec:	4630      	mov	r0, r6
 8005bee:	f7ff fb6f 	bl	80052d0 <_free_r>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	6363      	str	r3, [r4, #52]	; 0x34
 8005bf6:	89a3      	ldrh	r3, [r4, #12]
 8005bf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bfc:	81a3      	strh	r3, [r4, #12]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	6063      	str	r3, [r4, #4]
 8005c02:	6923      	ldr	r3, [r4, #16]
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	89a3      	ldrh	r3, [r4, #12]
 8005c08:	f043 0308 	orr.w	r3, r3, #8
 8005c0c:	81a3      	strh	r3, [r4, #12]
 8005c0e:	6923      	ldr	r3, [r4, #16]
 8005c10:	b94b      	cbnz	r3, 8005c26 <__swsetup_r+0x9a>
 8005c12:	89a3      	ldrh	r3, [r4, #12]
 8005c14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c1c:	d003      	beq.n	8005c26 <__swsetup_r+0x9a>
 8005c1e:	4621      	mov	r1, r4
 8005c20:	4630      	mov	r0, r6
 8005c22:	f000 fa07 	bl	8006034 <__smakebuf_r>
 8005c26:	89a0      	ldrh	r0, [r4, #12]
 8005c28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c2c:	f010 0301 	ands.w	r3, r0, #1
 8005c30:	d00a      	beq.n	8005c48 <__swsetup_r+0xbc>
 8005c32:	2300      	movs	r3, #0
 8005c34:	60a3      	str	r3, [r4, #8]
 8005c36:	6963      	ldr	r3, [r4, #20]
 8005c38:	425b      	negs	r3, r3
 8005c3a:	61a3      	str	r3, [r4, #24]
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	b943      	cbnz	r3, 8005c52 <__swsetup_r+0xc6>
 8005c40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c44:	d1ba      	bne.n	8005bbc <__swsetup_r+0x30>
 8005c46:	bd70      	pop	{r4, r5, r6, pc}
 8005c48:	0781      	lsls	r1, r0, #30
 8005c4a:	bf58      	it	pl
 8005c4c:	6963      	ldrpl	r3, [r4, #20]
 8005c4e:	60a3      	str	r3, [r4, #8]
 8005c50:	e7f4      	b.n	8005c3c <__swsetup_r+0xb0>
 8005c52:	2000      	movs	r0, #0
 8005c54:	e7f7      	b.n	8005c46 <__swsetup_r+0xba>
 8005c56:	bf00      	nop
 8005c58:	2000000c 	.word	0x2000000c
 8005c5c:	080066d4 	.word	0x080066d4
 8005c60:	080066f4 	.word	0x080066f4
 8005c64:	080066b4 	.word	0x080066b4

08005c68 <abort>:
 8005c68:	b508      	push	{r3, lr}
 8005c6a:	2006      	movs	r0, #6
 8005c6c:	f000 fa52 	bl	8006114 <raise>
 8005c70:	2001      	movs	r0, #1
 8005c72:	f7fd fbb9 	bl	80033e8 <_exit>
	...

08005c78 <__sflush_r>:
 8005c78:	898a      	ldrh	r2, [r1, #12]
 8005c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c7e:	4605      	mov	r5, r0
 8005c80:	0710      	lsls	r0, r2, #28
 8005c82:	460c      	mov	r4, r1
 8005c84:	d458      	bmi.n	8005d38 <__sflush_r+0xc0>
 8005c86:	684b      	ldr	r3, [r1, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	dc05      	bgt.n	8005c98 <__sflush_r+0x20>
 8005c8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	dc02      	bgt.n	8005c98 <__sflush_r+0x20>
 8005c92:	2000      	movs	r0, #0
 8005c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c9a:	2e00      	cmp	r6, #0
 8005c9c:	d0f9      	beq.n	8005c92 <__sflush_r+0x1a>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ca4:	682f      	ldr	r7, [r5, #0]
 8005ca6:	602b      	str	r3, [r5, #0]
 8005ca8:	d032      	beq.n	8005d10 <__sflush_r+0x98>
 8005caa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	075a      	lsls	r2, r3, #29
 8005cb0:	d505      	bpl.n	8005cbe <__sflush_r+0x46>
 8005cb2:	6863      	ldr	r3, [r4, #4]
 8005cb4:	1ac0      	subs	r0, r0, r3
 8005cb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cb8:	b10b      	cbz	r3, 8005cbe <__sflush_r+0x46>
 8005cba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cbc:	1ac0      	subs	r0, r0, r3
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cc4:	6a21      	ldr	r1, [r4, #32]
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	47b0      	blx	r6
 8005cca:	1c43      	adds	r3, r0, #1
 8005ccc:	89a3      	ldrh	r3, [r4, #12]
 8005cce:	d106      	bne.n	8005cde <__sflush_r+0x66>
 8005cd0:	6829      	ldr	r1, [r5, #0]
 8005cd2:	291d      	cmp	r1, #29
 8005cd4:	d82c      	bhi.n	8005d30 <__sflush_r+0xb8>
 8005cd6:	4a2a      	ldr	r2, [pc, #168]	; (8005d80 <__sflush_r+0x108>)
 8005cd8:	40ca      	lsrs	r2, r1
 8005cda:	07d6      	lsls	r6, r2, #31
 8005cdc:	d528      	bpl.n	8005d30 <__sflush_r+0xb8>
 8005cde:	2200      	movs	r2, #0
 8005ce0:	6062      	str	r2, [r4, #4]
 8005ce2:	04d9      	lsls	r1, r3, #19
 8005ce4:	6922      	ldr	r2, [r4, #16]
 8005ce6:	6022      	str	r2, [r4, #0]
 8005ce8:	d504      	bpl.n	8005cf4 <__sflush_r+0x7c>
 8005cea:	1c42      	adds	r2, r0, #1
 8005cec:	d101      	bne.n	8005cf2 <__sflush_r+0x7a>
 8005cee:	682b      	ldr	r3, [r5, #0]
 8005cf0:	b903      	cbnz	r3, 8005cf4 <__sflush_r+0x7c>
 8005cf2:	6560      	str	r0, [r4, #84]	; 0x54
 8005cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cf6:	602f      	str	r7, [r5, #0]
 8005cf8:	2900      	cmp	r1, #0
 8005cfa:	d0ca      	beq.n	8005c92 <__sflush_r+0x1a>
 8005cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d00:	4299      	cmp	r1, r3
 8005d02:	d002      	beq.n	8005d0a <__sflush_r+0x92>
 8005d04:	4628      	mov	r0, r5
 8005d06:	f7ff fae3 	bl	80052d0 <_free_r>
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	6360      	str	r0, [r4, #52]	; 0x34
 8005d0e:	e7c1      	b.n	8005c94 <__sflush_r+0x1c>
 8005d10:	6a21      	ldr	r1, [r4, #32]
 8005d12:	2301      	movs	r3, #1
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b0      	blx	r6
 8005d18:	1c41      	adds	r1, r0, #1
 8005d1a:	d1c7      	bne.n	8005cac <__sflush_r+0x34>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0c4      	beq.n	8005cac <__sflush_r+0x34>
 8005d22:	2b1d      	cmp	r3, #29
 8005d24:	d001      	beq.n	8005d2a <__sflush_r+0xb2>
 8005d26:	2b16      	cmp	r3, #22
 8005d28:	d101      	bne.n	8005d2e <__sflush_r+0xb6>
 8005d2a:	602f      	str	r7, [r5, #0]
 8005d2c:	e7b1      	b.n	8005c92 <__sflush_r+0x1a>
 8005d2e:	89a3      	ldrh	r3, [r4, #12]
 8005d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d34:	81a3      	strh	r3, [r4, #12]
 8005d36:	e7ad      	b.n	8005c94 <__sflush_r+0x1c>
 8005d38:	690f      	ldr	r7, [r1, #16]
 8005d3a:	2f00      	cmp	r7, #0
 8005d3c:	d0a9      	beq.n	8005c92 <__sflush_r+0x1a>
 8005d3e:	0793      	lsls	r3, r2, #30
 8005d40:	680e      	ldr	r6, [r1, #0]
 8005d42:	bf08      	it	eq
 8005d44:	694b      	ldreq	r3, [r1, #20]
 8005d46:	600f      	str	r7, [r1, #0]
 8005d48:	bf18      	it	ne
 8005d4a:	2300      	movne	r3, #0
 8005d4c:	eba6 0807 	sub.w	r8, r6, r7
 8005d50:	608b      	str	r3, [r1, #8]
 8005d52:	f1b8 0f00 	cmp.w	r8, #0
 8005d56:	dd9c      	ble.n	8005c92 <__sflush_r+0x1a>
 8005d58:	6a21      	ldr	r1, [r4, #32]
 8005d5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d5c:	4643      	mov	r3, r8
 8005d5e:	463a      	mov	r2, r7
 8005d60:	4628      	mov	r0, r5
 8005d62:	47b0      	blx	r6
 8005d64:	2800      	cmp	r0, #0
 8005d66:	dc06      	bgt.n	8005d76 <__sflush_r+0xfe>
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d6e:	81a3      	strh	r3, [r4, #12]
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	e78e      	b.n	8005c94 <__sflush_r+0x1c>
 8005d76:	4407      	add	r7, r0
 8005d78:	eba8 0800 	sub.w	r8, r8, r0
 8005d7c:	e7e9      	b.n	8005d52 <__sflush_r+0xda>
 8005d7e:	bf00      	nop
 8005d80:	20400001 	.word	0x20400001

08005d84 <_fflush_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	690b      	ldr	r3, [r1, #16]
 8005d88:	4605      	mov	r5, r0
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	b913      	cbnz	r3, 8005d94 <_fflush_r+0x10>
 8005d8e:	2500      	movs	r5, #0
 8005d90:	4628      	mov	r0, r5
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	b118      	cbz	r0, 8005d9e <_fflush_r+0x1a>
 8005d96:	6983      	ldr	r3, [r0, #24]
 8005d98:	b90b      	cbnz	r3, 8005d9e <_fflush_r+0x1a>
 8005d9a:	f000 f887 	bl	8005eac <__sinit>
 8005d9e:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <_fflush_r+0x6c>)
 8005da0:	429c      	cmp	r4, r3
 8005da2:	d11b      	bne.n	8005ddc <_fflush_r+0x58>
 8005da4:	686c      	ldr	r4, [r5, #4]
 8005da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0ef      	beq.n	8005d8e <_fflush_r+0xa>
 8005dae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005db0:	07d0      	lsls	r0, r2, #31
 8005db2:	d404      	bmi.n	8005dbe <_fflush_r+0x3a>
 8005db4:	0599      	lsls	r1, r3, #22
 8005db6:	d402      	bmi.n	8005dbe <_fflush_r+0x3a>
 8005db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dba:	f000 f915 	bl	8005fe8 <__retarget_lock_acquire_recursive>
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	f7ff ff59 	bl	8005c78 <__sflush_r>
 8005dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dc8:	07da      	lsls	r2, r3, #31
 8005dca:	4605      	mov	r5, r0
 8005dcc:	d4e0      	bmi.n	8005d90 <_fflush_r+0xc>
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	059b      	lsls	r3, r3, #22
 8005dd2:	d4dd      	bmi.n	8005d90 <_fflush_r+0xc>
 8005dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dd6:	f000 f908 	bl	8005fea <__retarget_lock_release_recursive>
 8005dda:	e7d9      	b.n	8005d90 <_fflush_r+0xc>
 8005ddc:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <_fflush_r+0x70>)
 8005dde:	429c      	cmp	r4, r3
 8005de0:	d101      	bne.n	8005de6 <_fflush_r+0x62>
 8005de2:	68ac      	ldr	r4, [r5, #8]
 8005de4:	e7df      	b.n	8005da6 <_fflush_r+0x22>
 8005de6:	4b04      	ldr	r3, [pc, #16]	; (8005df8 <_fflush_r+0x74>)
 8005de8:	429c      	cmp	r4, r3
 8005dea:	bf08      	it	eq
 8005dec:	68ec      	ldreq	r4, [r5, #12]
 8005dee:	e7da      	b.n	8005da6 <_fflush_r+0x22>
 8005df0:	080066d4 	.word	0x080066d4
 8005df4:	080066f4 	.word	0x080066f4
 8005df8:	080066b4 	.word	0x080066b4

08005dfc <std>:
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	b510      	push	{r4, lr}
 8005e00:	4604      	mov	r4, r0
 8005e02:	e9c0 3300 	strd	r3, r3, [r0]
 8005e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e0a:	6083      	str	r3, [r0, #8]
 8005e0c:	8181      	strh	r1, [r0, #12]
 8005e0e:	6643      	str	r3, [r0, #100]	; 0x64
 8005e10:	81c2      	strh	r2, [r0, #14]
 8005e12:	6183      	str	r3, [r0, #24]
 8005e14:	4619      	mov	r1, r3
 8005e16:	2208      	movs	r2, #8
 8005e18:	305c      	adds	r0, #92	; 0x5c
 8005e1a:	f7fd fba5 	bl	8003568 <memset>
 8005e1e:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <std+0x38>)
 8005e20:	6263      	str	r3, [r4, #36]	; 0x24
 8005e22:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <std+0x3c>)
 8005e24:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e26:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <std+0x40>)
 8005e28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e2a:	4b05      	ldr	r3, [pc, #20]	; (8005e40 <std+0x44>)
 8005e2c:	6224      	str	r4, [r4, #32]
 8005e2e:	6323      	str	r3, [r4, #48]	; 0x30
 8005e30:	bd10      	pop	{r4, pc}
 8005e32:	bf00      	nop
 8005e34:	0800614d 	.word	0x0800614d
 8005e38:	0800616f 	.word	0x0800616f
 8005e3c:	080061a7 	.word	0x080061a7
 8005e40:	080061cb 	.word	0x080061cb

08005e44 <_cleanup_r>:
 8005e44:	4901      	ldr	r1, [pc, #4]	; (8005e4c <_cleanup_r+0x8>)
 8005e46:	f000 b8af 	b.w	8005fa8 <_fwalk_reent>
 8005e4a:	bf00      	nop
 8005e4c:	08005d85 	.word	0x08005d85

08005e50 <__sfmoreglue>:
 8005e50:	b570      	push	{r4, r5, r6, lr}
 8005e52:	1e4a      	subs	r2, r1, #1
 8005e54:	2568      	movs	r5, #104	; 0x68
 8005e56:	4355      	muls	r5, r2
 8005e58:	460e      	mov	r6, r1
 8005e5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e5e:	f7ff fa87 	bl	8005370 <_malloc_r>
 8005e62:	4604      	mov	r4, r0
 8005e64:	b140      	cbz	r0, 8005e78 <__sfmoreglue+0x28>
 8005e66:	2100      	movs	r1, #0
 8005e68:	e9c0 1600 	strd	r1, r6, [r0]
 8005e6c:	300c      	adds	r0, #12
 8005e6e:	60a0      	str	r0, [r4, #8]
 8005e70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e74:	f7fd fb78 	bl	8003568 <memset>
 8005e78:	4620      	mov	r0, r4
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}

08005e7c <__sfp_lock_acquire>:
 8005e7c:	4801      	ldr	r0, [pc, #4]	; (8005e84 <__sfp_lock_acquire+0x8>)
 8005e7e:	f000 b8b3 	b.w	8005fe8 <__retarget_lock_acquire_recursive>
 8005e82:	bf00      	nop
 8005e84:	200002a8 	.word	0x200002a8

08005e88 <__sfp_lock_release>:
 8005e88:	4801      	ldr	r0, [pc, #4]	; (8005e90 <__sfp_lock_release+0x8>)
 8005e8a:	f000 b8ae 	b.w	8005fea <__retarget_lock_release_recursive>
 8005e8e:	bf00      	nop
 8005e90:	200002a8 	.word	0x200002a8

08005e94 <__sinit_lock_acquire>:
 8005e94:	4801      	ldr	r0, [pc, #4]	; (8005e9c <__sinit_lock_acquire+0x8>)
 8005e96:	f000 b8a7 	b.w	8005fe8 <__retarget_lock_acquire_recursive>
 8005e9a:	bf00      	nop
 8005e9c:	200002a3 	.word	0x200002a3

08005ea0 <__sinit_lock_release>:
 8005ea0:	4801      	ldr	r0, [pc, #4]	; (8005ea8 <__sinit_lock_release+0x8>)
 8005ea2:	f000 b8a2 	b.w	8005fea <__retarget_lock_release_recursive>
 8005ea6:	bf00      	nop
 8005ea8:	200002a3 	.word	0x200002a3

08005eac <__sinit>:
 8005eac:	b510      	push	{r4, lr}
 8005eae:	4604      	mov	r4, r0
 8005eb0:	f7ff fff0 	bl	8005e94 <__sinit_lock_acquire>
 8005eb4:	69a3      	ldr	r3, [r4, #24]
 8005eb6:	b11b      	cbz	r3, 8005ec0 <__sinit+0x14>
 8005eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ebc:	f7ff bff0 	b.w	8005ea0 <__sinit_lock_release>
 8005ec0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ec4:	6523      	str	r3, [r4, #80]	; 0x50
 8005ec6:	4b13      	ldr	r3, [pc, #76]	; (8005f14 <__sinit+0x68>)
 8005ec8:	4a13      	ldr	r2, [pc, #76]	; (8005f18 <__sinit+0x6c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ece:	42a3      	cmp	r3, r4
 8005ed0:	bf04      	itt	eq
 8005ed2:	2301      	moveq	r3, #1
 8005ed4:	61a3      	streq	r3, [r4, #24]
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f000 f820 	bl	8005f1c <__sfp>
 8005edc:	6060      	str	r0, [r4, #4]
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f000 f81c 	bl	8005f1c <__sfp>
 8005ee4:	60a0      	str	r0, [r4, #8]
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f000 f818 	bl	8005f1c <__sfp>
 8005eec:	2200      	movs	r2, #0
 8005eee:	60e0      	str	r0, [r4, #12]
 8005ef0:	2104      	movs	r1, #4
 8005ef2:	6860      	ldr	r0, [r4, #4]
 8005ef4:	f7ff ff82 	bl	8005dfc <std>
 8005ef8:	68a0      	ldr	r0, [r4, #8]
 8005efa:	2201      	movs	r2, #1
 8005efc:	2109      	movs	r1, #9
 8005efe:	f7ff ff7d 	bl	8005dfc <std>
 8005f02:	68e0      	ldr	r0, [r4, #12]
 8005f04:	2202      	movs	r2, #2
 8005f06:	2112      	movs	r1, #18
 8005f08:	f7ff ff78 	bl	8005dfc <std>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	61a3      	str	r3, [r4, #24]
 8005f10:	e7d2      	b.n	8005eb8 <__sinit+0xc>
 8005f12:	bf00      	nop
 8005f14:	08006330 	.word	0x08006330
 8005f18:	08005e45 	.word	0x08005e45

08005f1c <__sfp>:
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1e:	4607      	mov	r7, r0
 8005f20:	f7ff ffac 	bl	8005e7c <__sfp_lock_acquire>
 8005f24:	4b1e      	ldr	r3, [pc, #120]	; (8005fa0 <__sfp+0x84>)
 8005f26:	681e      	ldr	r6, [r3, #0]
 8005f28:	69b3      	ldr	r3, [r6, #24]
 8005f2a:	b913      	cbnz	r3, 8005f32 <__sfp+0x16>
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	f7ff ffbd 	bl	8005eac <__sinit>
 8005f32:	3648      	adds	r6, #72	; 0x48
 8005f34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	d503      	bpl.n	8005f44 <__sfp+0x28>
 8005f3c:	6833      	ldr	r3, [r6, #0]
 8005f3e:	b30b      	cbz	r3, 8005f84 <__sfp+0x68>
 8005f40:	6836      	ldr	r6, [r6, #0]
 8005f42:	e7f7      	b.n	8005f34 <__sfp+0x18>
 8005f44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f48:	b9d5      	cbnz	r5, 8005f80 <__sfp+0x64>
 8005f4a:	4b16      	ldr	r3, [pc, #88]	; (8005fa4 <__sfp+0x88>)
 8005f4c:	60e3      	str	r3, [r4, #12]
 8005f4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f52:	6665      	str	r5, [r4, #100]	; 0x64
 8005f54:	f000 f847 	bl	8005fe6 <__retarget_lock_init_recursive>
 8005f58:	f7ff ff96 	bl	8005e88 <__sfp_lock_release>
 8005f5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f64:	6025      	str	r5, [r4, #0]
 8005f66:	61a5      	str	r5, [r4, #24]
 8005f68:	2208      	movs	r2, #8
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f70:	f7fd fafa 	bl	8003568 <memset>
 8005f74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f80:	3468      	adds	r4, #104	; 0x68
 8005f82:	e7d9      	b.n	8005f38 <__sfp+0x1c>
 8005f84:	2104      	movs	r1, #4
 8005f86:	4638      	mov	r0, r7
 8005f88:	f7ff ff62 	bl	8005e50 <__sfmoreglue>
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	6030      	str	r0, [r6, #0]
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d1d5      	bne.n	8005f40 <__sfp+0x24>
 8005f94:	f7ff ff78 	bl	8005e88 <__sfp_lock_release>
 8005f98:	230c      	movs	r3, #12
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	e7ee      	b.n	8005f7c <__sfp+0x60>
 8005f9e:	bf00      	nop
 8005fa0:	08006330 	.word	0x08006330
 8005fa4:	ffff0001 	.word	0xffff0001

08005fa8 <_fwalk_reent>:
 8005fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fac:	4606      	mov	r6, r0
 8005fae:	4688      	mov	r8, r1
 8005fb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005fb4:	2700      	movs	r7, #0
 8005fb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fba:	f1b9 0901 	subs.w	r9, r9, #1
 8005fbe:	d505      	bpl.n	8005fcc <_fwalk_reent+0x24>
 8005fc0:	6824      	ldr	r4, [r4, #0]
 8005fc2:	2c00      	cmp	r4, #0
 8005fc4:	d1f7      	bne.n	8005fb6 <_fwalk_reent+0xe>
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fcc:	89ab      	ldrh	r3, [r5, #12]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d907      	bls.n	8005fe2 <_fwalk_reent+0x3a>
 8005fd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	d003      	beq.n	8005fe2 <_fwalk_reent+0x3a>
 8005fda:	4629      	mov	r1, r5
 8005fdc:	4630      	mov	r0, r6
 8005fde:	47c0      	blx	r8
 8005fe0:	4307      	orrs	r7, r0
 8005fe2:	3568      	adds	r5, #104	; 0x68
 8005fe4:	e7e9      	b.n	8005fba <_fwalk_reent+0x12>

08005fe6 <__retarget_lock_init_recursive>:
 8005fe6:	4770      	bx	lr

08005fe8 <__retarget_lock_acquire_recursive>:
 8005fe8:	4770      	bx	lr

08005fea <__retarget_lock_release_recursive>:
 8005fea:	4770      	bx	lr

08005fec <__swhatbuf_r>:
 8005fec:	b570      	push	{r4, r5, r6, lr}
 8005fee:	460e      	mov	r6, r1
 8005ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff4:	2900      	cmp	r1, #0
 8005ff6:	b096      	sub	sp, #88	; 0x58
 8005ff8:	4614      	mov	r4, r2
 8005ffa:	461d      	mov	r5, r3
 8005ffc:	da07      	bge.n	800600e <__swhatbuf_r+0x22>
 8005ffe:	2300      	movs	r3, #0
 8006000:	602b      	str	r3, [r5, #0]
 8006002:	89b3      	ldrh	r3, [r6, #12]
 8006004:	061a      	lsls	r2, r3, #24
 8006006:	d410      	bmi.n	800602a <__swhatbuf_r+0x3e>
 8006008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800600c:	e00e      	b.n	800602c <__swhatbuf_r+0x40>
 800600e:	466a      	mov	r2, sp
 8006010:	f000 f902 	bl	8006218 <_fstat_r>
 8006014:	2800      	cmp	r0, #0
 8006016:	dbf2      	blt.n	8005ffe <__swhatbuf_r+0x12>
 8006018:	9a01      	ldr	r2, [sp, #4]
 800601a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800601e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006022:	425a      	negs	r2, r3
 8006024:	415a      	adcs	r2, r3
 8006026:	602a      	str	r2, [r5, #0]
 8006028:	e7ee      	b.n	8006008 <__swhatbuf_r+0x1c>
 800602a:	2340      	movs	r3, #64	; 0x40
 800602c:	2000      	movs	r0, #0
 800602e:	6023      	str	r3, [r4, #0]
 8006030:	b016      	add	sp, #88	; 0x58
 8006032:	bd70      	pop	{r4, r5, r6, pc}

08006034 <__smakebuf_r>:
 8006034:	898b      	ldrh	r3, [r1, #12]
 8006036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006038:	079d      	lsls	r5, r3, #30
 800603a:	4606      	mov	r6, r0
 800603c:	460c      	mov	r4, r1
 800603e:	d507      	bpl.n	8006050 <__smakebuf_r+0x1c>
 8006040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	6123      	str	r3, [r4, #16]
 8006048:	2301      	movs	r3, #1
 800604a:	6163      	str	r3, [r4, #20]
 800604c:	b002      	add	sp, #8
 800604e:	bd70      	pop	{r4, r5, r6, pc}
 8006050:	ab01      	add	r3, sp, #4
 8006052:	466a      	mov	r2, sp
 8006054:	f7ff ffca 	bl	8005fec <__swhatbuf_r>
 8006058:	9900      	ldr	r1, [sp, #0]
 800605a:	4605      	mov	r5, r0
 800605c:	4630      	mov	r0, r6
 800605e:	f7ff f987 	bl	8005370 <_malloc_r>
 8006062:	b948      	cbnz	r0, 8006078 <__smakebuf_r+0x44>
 8006064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006068:	059a      	lsls	r2, r3, #22
 800606a:	d4ef      	bmi.n	800604c <__smakebuf_r+0x18>
 800606c:	f023 0303 	bic.w	r3, r3, #3
 8006070:	f043 0302 	orr.w	r3, r3, #2
 8006074:	81a3      	strh	r3, [r4, #12]
 8006076:	e7e3      	b.n	8006040 <__smakebuf_r+0xc>
 8006078:	4b0d      	ldr	r3, [pc, #52]	; (80060b0 <__smakebuf_r+0x7c>)
 800607a:	62b3      	str	r3, [r6, #40]	; 0x28
 800607c:	89a3      	ldrh	r3, [r4, #12]
 800607e:	6020      	str	r0, [r4, #0]
 8006080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006084:	81a3      	strh	r3, [r4, #12]
 8006086:	9b00      	ldr	r3, [sp, #0]
 8006088:	6163      	str	r3, [r4, #20]
 800608a:	9b01      	ldr	r3, [sp, #4]
 800608c:	6120      	str	r0, [r4, #16]
 800608e:	b15b      	cbz	r3, 80060a8 <__smakebuf_r+0x74>
 8006090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006094:	4630      	mov	r0, r6
 8006096:	f000 f8d1 	bl	800623c <_isatty_r>
 800609a:	b128      	cbz	r0, 80060a8 <__smakebuf_r+0x74>
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	f043 0301 	orr.w	r3, r3, #1
 80060a6:	81a3      	strh	r3, [r4, #12]
 80060a8:	89a0      	ldrh	r0, [r4, #12]
 80060aa:	4305      	orrs	r5, r0
 80060ac:	81a5      	strh	r5, [r4, #12]
 80060ae:	e7cd      	b.n	800604c <__smakebuf_r+0x18>
 80060b0:	08005e45 	.word	0x08005e45

080060b4 <_malloc_usable_size_r>:
 80060b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060b8:	1f18      	subs	r0, r3, #4
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	bfbc      	itt	lt
 80060be:	580b      	ldrlt	r3, [r1, r0]
 80060c0:	18c0      	addlt	r0, r0, r3
 80060c2:	4770      	bx	lr

080060c4 <_raise_r>:
 80060c4:	291f      	cmp	r1, #31
 80060c6:	b538      	push	{r3, r4, r5, lr}
 80060c8:	4604      	mov	r4, r0
 80060ca:	460d      	mov	r5, r1
 80060cc:	d904      	bls.n	80060d8 <_raise_r+0x14>
 80060ce:	2316      	movs	r3, #22
 80060d0:	6003      	str	r3, [r0, #0]
 80060d2:	f04f 30ff 	mov.w	r0, #4294967295
 80060d6:	bd38      	pop	{r3, r4, r5, pc}
 80060d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80060da:	b112      	cbz	r2, 80060e2 <_raise_r+0x1e>
 80060dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060e0:	b94b      	cbnz	r3, 80060f6 <_raise_r+0x32>
 80060e2:	4620      	mov	r0, r4
 80060e4:	f000 f830 	bl	8006148 <_getpid_r>
 80060e8:	462a      	mov	r2, r5
 80060ea:	4601      	mov	r1, r0
 80060ec:	4620      	mov	r0, r4
 80060ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060f2:	f000 b817 	b.w	8006124 <_kill_r>
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d00a      	beq.n	8006110 <_raise_r+0x4c>
 80060fa:	1c59      	adds	r1, r3, #1
 80060fc:	d103      	bne.n	8006106 <_raise_r+0x42>
 80060fe:	2316      	movs	r3, #22
 8006100:	6003      	str	r3, [r0, #0]
 8006102:	2001      	movs	r0, #1
 8006104:	e7e7      	b.n	80060d6 <_raise_r+0x12>
 8006106:	2400      	movs	r4, #0
 8006108:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800610c:	4628      	mov	r0, r5
 800610e:	4798      	blx	r3
 8006110:	2000      	movs	r0, #0
 8006112:	e7e0      	b.n	80060d6 <_raise_r+0x12>

08006114 <raise>:
 8006114:	4b02      	ldr	r3, [pc, #8]	; (8006120 <raise+0xc>)
 8006116:	4601      	mov	r1, r0
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	f7ff bfd3 	b.w	80060c4 <_raise_r>
 800611e:	bf00      	nop
 8006120:	2000000c 	.word	0x2000000c

08006124 <_kill_r>:
 8006124:	b538      	push	{r3, r4, r5, lr}
 8006126:	4d07      	ldr	r5, [pc, #28]	; (8006144 <_kill_r+0x20>)
 8006128:	2300      	movs	r3, #0
 800612a:	4604      	mov	r4, r0
 800612c:	4608      	mov	r0, r1
 800612e:	4611      	mov	r1, r2
 8006130:	602b      	str	r3, [r5, #0]
 8006132:	f7fd f951 	bl	80033d8 <_kill>
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	d102      	bne.n	8006140 <_kill_r+0x1c>
 800613a:	682b      	ldr	r3, [r5, #0]
 800613c:	b103      	cbz	r3, 8006140 <_kill_r+0x1c>
 800613e:	6023      	str	r3, [r4, #0]
 8006140:	bd38      	pop	{r3, r4, r5, pc}
 8006142:	bf00      	nop
 8006144:	2000029c 	.word	0x2000029c

08006148 <_getpid_r>:
 8006148:	f7fd b944 	b.w	80033d4 <_getpid>

0800614c <__sread>:
 800614c:	b510      	push	{r4, lr}
 800614e:	460c      	mov	r4, r1
 8006150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006154:	f000 f894 	bl	8006280 <_read_r>
 8006158:	2800      	cmp	r0, #0
 800615a:	bfab      	itete	ge
 800615c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800615e:	89a3      	ldrhlt	r3, [r4, #12]
 8006160:	181b      	addge	r3, r3, r0
 8006162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006166:	bfac      	ite	ge
 8006168:	6563      	strge	r3, [r4, #84]	; 0x54
 800616a:	81a3      	strhlt	r3, [r4, #12]
 800616c:	bd10      	pop	{r4, pc}

0800616e <__swrite>:
 800616e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006172:	461f      	mov	r7, r3
 8006174:	898b      	ldrh	r3, [r1, #12]
 8006176:	05db      	lsls	r3, r3, #23
 8006178:	4605      	mov	r5, r0
 800617a:	460c      	mov	r4, r1
 800617c:	4616      	mov	r6, r2
 800617e:	d505      	bpl.n	800618c <__swrite+0x1e>
 8006180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006184:	2302      	movs	r3, #2
 8006186:	2200      	movs	r2, #0
 8006188:	f000 f868 	bl	800625c <_lseek_r>
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006196:	81a3      	strh	r3, [r4, #12]
 8006198:	4632      	mov	r2, r6
 800619a:	463b      	mov	r3, r7
 800619c:	4628      	mov	r0, r5
 800619e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061a2:	f000 b817 	b.w	80061d4 <_write_r>

080061a6 <__sseek>:
 80061a6:	b510      	push	{r4, lr}
 80061a8:	460c      	mov	r4, r1
 80061aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ae:	f000 f855 	bl	800625c <_lseek_r>
 80061b2:	1c43      	adds	r3, r0, #1
 80061b4:	89a3      	ldrh	r3, [r4, #12]
 80061b6:	bf15      	itete	ne
 80061b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80061ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061c2:	81a3      	strheq	r3, [r4, #12]
 80061c4:	bf18      	it	ne
 80061c6:	81a3      	strhne	r3, [r4, #12]
 80061c8:	bd10      	pop	{r4, pc}

080061ca <__sclose>:
 80061ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ce:	f000 b813 	b.w	80061f8 <_close_r>
	...

080061d4 <_write_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4d07      	ldr	r5, [pc, #28]	; (80061f4 <_write_r+0x20>)
 80061d8:	4604      	mov	r4, r0
 80061da:	4608      	mov	r0, r1
 80061dc:	4611      	mov	r1, r2
 80061de:	2200      	movs	r2, #0
 80061e0:	602a      	str	r2, [r5, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f7fd f913 	bl	800340e <_write>
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	d102      	bne.n	80061f2 <_write_r+0x1e>
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	b103      	cbz	r3, 80061f2 <_write_r+0x1e>
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	2000029c 	.word	0x2000029c

080061f8 <_close_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	4d06      	ldr	r5, [pc, #24]	; (8006214 <_close_r+0x1c>)
 80061fc:	2300      	movs	r3, #0
 80061fe:	4604      	mov	r4, r0
 8006200:	4608      	mov	r0, r1
 8006202:	602b      	str	r3, [r5, #0]
 8006204:	f7fd f92a 	bl	800345c <_close>
 8006208:	1c43      	adds	r3, r0, #1
 800620a:	d102      	bne.n	8006212 <_close_r+0x1a>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	b103      	cbz	r3, 8006212 <_close_r+0x1a>
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	bd38      	pop	{r3, r4, r5, pc}
 8006214:	2000029c 	.word	0x2000029c

08006218 <_fstat_r>:
 8006218:	b538      	push	{r3, r4, r5, lr}
 800621a:	4d07      	ldr	r5, [pc, #28]	; (8006238 <_fstat_r+0x20>)
 800621c:	2300      	movs	r3, #0
 800621e:	4604      	mov	r4, r0
 8006220:	4608      	mov	r0, r1
 8006222:	4611      	mov	r1, r2
 8006224:	602b      	str	r3, [r5, #0]
 8006226:	f7fd f91c 	bl	8003462 <_fstat>
 800622a:	1c43      	adds	r3, r0, #1
 800622c:	d102      	bne.n	8006234 <_fstat_r+0x1c>
 800622e:	682b      	ldr	r3, [r5, #0]
 8006230:	b103      	cbz	r3, 8006234 <_fstat_r+0x1c>
 8006232:	6023      	str	r3, [r4, #0]
 8006234:	bd38      	pop	{r3, r4, r5, pc}
 8006236:	bf00      	nop
 8006238:	2000029c 	.word	0x2000029c

0800623c <_isatty_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4d06      	ldr	r5, [pc, #24]	; (8006258 <_isatty_r+0x1c>)
 8006240:	2300      	movs	r3, #0
 8006242:	4604      	mov	r4, r0
 8006244:	4608      	mov	r0, r1
 8006246:	602b      	str	r3, [r5, #0]
 8006248:	f7fd f910 	bl	800346c <_isatty>
 800624c:	1c43      	adds	r3, r0, #1
 800624e:	d102      	bne.n	8006256 <_isatty_r+0x1a>
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	b103      	cbz	r3, 8006256 <_isatty_r+0x1a>
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	bd38      	pop	{r3, r4, r5, pc}
 8006258:	2000029c 	.word	0x2000029c

0800625c <_lseek_r>:
 800625c:	b538      	push	{r3, r4, r5, lr}
 800625e:	4d07      	ldr	r5, [pc, #28]	; (800627c <_lseek_r+0x20>)
 8006260:	4604      	mov	r4, r0
 8006262:	4608      	mov	r0, r1
 8006264:	4611      	mov	r1, r2
 8006266:	2200      	movs	r2, #0
 8006268:	602a      	str	r2, [r5, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	f7fd f900 	bl	8003470 <_lseek>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	d102      	bne.n	800627a <_lseek_r+0x1e>
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	b103      	cbz	r3, 800627a <_lseek_r+0x1e>
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	2000029c 	.word	0x2000029c

08006280 <_read_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4d07      	ldr	r5, [pc, #28]	; (80062a0 <_read_r+0x20>)
 8006284:	4604      	mov	r4, r0
 8006286:	4608      	mov	r0, r1
 8006288:	4611      	mov	r1, r2
 800628a:	2200      	movs	r2, #0
 800628c:	602a      	str	r2, [r5, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	f7fd f8b0 	bl	80033f4 <_read>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d102      	bne.n	800629e <_read_r+0x1e>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	b103      	cbz	r3, 800629e <_read_r+0x1e>
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	bd38      	pop	{r3, r4, r5, pc}
 80062a0:	2000029c 	.word	0x2000029c

080062a4 <_init>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	bf00      	nop
 80062a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062aa:	bc08      	pop	{r3}
 80062ac:	469e      	mov	lr, r3
 80062ae:	4770      	bx	lr

080062b0 <_fini>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	bf00      	nop
 80062b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b6:	bc08      	pop	{r3}
 80062b8:	469e      	mov	lr, r3
 80062ba:	4770      	bx	lr
